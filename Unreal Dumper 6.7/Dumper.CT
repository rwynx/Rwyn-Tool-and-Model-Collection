<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>26213</ID>
      <Description>"Dumpers (Created By Cake-San) Thank you for this awsome dumper!"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>004000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>26077</ID>
          <Description>"Dumper V4"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>25330</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}
 if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

    UObject.enumMul= 0x10

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A

    UObject.Property= 0x78

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
    UObject.enumMul= 0xC
  end

----------------------------
---------UE3 struct---------
--1.25
 elseif UE4ver&gt;=1 then
    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58
    UObject.enumMul= 0x8


--0.10246
 else
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70
 end

---------------------------
end


local ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then UE4ver=0 return end
--return info.minor
 UE4ver=tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local number,str,datatable
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end
 if not FName then return nil end
 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end
 local CFName=FName
 if UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)+1
  FName=(FName&amp;0xFFFF)*2
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  datatable={}
  for m=1,2 do
    datatable[m]=FNameDict[i][FName+m]
  end

  local le = byteTableToWord(datatable)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and FNameDict[i][FName+1]&amp;1==1 or false
  if widechar then
    datatable={}
    for m=1,le*2 do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToWideString(datatable)
  else
    datatable={}
    for m=1,le do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToString(datatable)
  end
 else
  local i
  if UEver&gt;2 then
   i=(FName&gt;&gt;0xE)+1
   FName=(FName&amp;0x3FFF)*(8-sub)
  else i=1 FName=FName*(8-sub) end
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  local pointer
  if targetIs64Bit() then
    datatable={}
    for m=1,8 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToQword(datatable)
  else
    datatable={}
    for m=1,4 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToDword(datatable)
  end
  if not pointer or pointer==0 then return nil end

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if FName==1 and not stringoffset or not stringoffsetid then
     str=readString(pointer+8,13)
     if str=='ByteProperty' then stringoffset=8
     else str=readString(pointer+0xC,13)
         if str=='ByteProperty' then stringoffset=0xC
         else str=readString(pointer+0x10,13)
             if str=='ByteProperty' then stringoffset=0x10 end
         end
     end

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  local widechar=true and readInteger(pointer+stringoffsetid)&amp;1==1 and UEver&gt;2 or false
  str= readString(pointer+stringoffset,200,widechar)
  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
   --print(string.format('%X',pointer+0xC))
 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 return str
end

function GetNameAlgo(object)
 if not object then return nil end
 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local fnameoffset=UObject.FNameIndex
 local typeoffset=UObject.Class
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 local str1=FNameStringAlgo(pointer+fnameoffset)
 local str2=FNameStringAlgo(object+fnameoffset)
 if not str2 then str2=FNameStringAlgo(object+fnameoffset-8)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end
 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafeAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i return end
      end
    end
  end
end


function FindStringFName(namestr)
  local size
  if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=stop
    stop=stop+num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1
  if UE4ver&gt;=25 then str1=GetFullNameSafeAlgo(object)
  else str1=GetFullNameAlgo(object) end
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]

function ue4parsetable()
 FNameList={}
 ObjectList={}
 FullNameList={}
 sub=targetIs64Bit() and 0 or 4
 local pool=getAddressSafe('FNamePool')
 local pool2=getAddressSafe('GUObjectArray')
 if pool and pool2 then
  if UE4ver&gt;=20 then GUObjectsize=readInteger(getAddress('GUObjectArray+24')-(sub*2))
  elseif UE4ver&gt;11 then  GUObjectsize=readInteger('GUObjectArray+1C')
  else GUObjectsize=readInteger(getAddress('GUObjectArray+8')-(sub*2))
  end
  FNameDict={}
  GUObjectDict={}
  for i=0,100 do
   local pointer
   if UE4ver&gt;=23 then pointer=readPointer(pool+i*(8-sub)+0x10)
   elseif UE4ver&gt;2 then  pointer=readPointer(readPointer(pool)+i*(8-sub))
   else pointer=readPointer(pool+i*(8-sub)) end
   if pointer and pointer~=0 then
    local size=getregionsize(pointer)
    if not size or size==0 then break end
    FNameDict[i+1]=readBytes(pointer,size-1,true)
   else break
   end
  end
  for i=0,100 do
   if UE4ver&gt;=20 then
    pointer=readPointer(readPointer(pool2+0x10)+i*(8-sub))
    if pointer and pointer~=0 then
    --print(string.format('%X',pointer))
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break
    end
   elseif UE4ver&gt;11 then pointer=readPointer(pool2+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   elseif UE4ver&gt;2 then pointer=readPointer(readPointer(pool2)+i*8+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break end
   else pointer=readPointer(pool2)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   end
  end
 end
end


function ue4parsetablecheck()
 if not FNameDict or not GUObjectDict then ue4parsetable()
 else
 local pointer,pointei,datatable,m
 if targetIs64Bit() then
   datatable={}
   for m=1,8 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToQword(datatable)
 else
   datatable={}
   for m=1,4 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToDword(datatable)
 end
 if UE4ver&gt;=20 then pointei=readPointer('[[GUObjectArray+10]]')
 elseif UE4ver&gt;11 then pointei=readPointer('[GUObjectArray+10]')
 elseif UE4ver&gt;2 then pointei=readPointer('[[GUObjectArray]+10]')
 else pointei=readPointer('[GUObjectArray]') end
 --print(string.format('%X',pointei))
 --print(string.format('%X',pointer))
 if pointei ~= pointer then ue4parsetable() end
 local GUObjectsizes
 if UE4ver&gt;=20 then GUObjectsizes=readInteger(getAddress('GUObjectArray+24')-(sub*2))
 elseif UE4ver&gt;11 then GUObjectsizes=readInteger('GUObjectArray+1C')
 else GUObjectsizes=readInteger(getAddress('GUObjectArray+8')-(sub*2)) end
 if GUObjectsizes~=GUObjectsize then ue4parsetable() end
 end
end

function FindObject(threadlist,ObjectId,address,size,i,start,stop,fullname)
  local pointer,datatable
  for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          name=string.sub(name,string.find(name,' ')+1,name:len())
          if not FullNameList[name]then FullNameList[name]=pointer end
          if FullNameList[fullname] then
            ObjectResult=FullNameList[fullname]
            for k,v in ipairs(threadlist) do v.terminate() end
            return
          end
        end
      end
    end
  end
end

function StaticFindObjectAlgo(fullname)
 ue4parsetablecheck()
 if FullNameList[fullname] then return FullNameList[fullname]end
 local threadlist={}
 local k=1
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local ObjectId=UObject.ObjectId
 ObjectResult=nil
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess) do
    start=stop
    stop=stop+num
    if ObjectResult then break end
    threadlist[k]=createThread(FindObject(threadlist,ObjectId,GUObjectDict[i],size,i,start,stop-1,fullname))
    k=k+1
  end
 end
 local result=ObjectResult
 ObjectResult=nil
 return result
end

function registerFunc(ObjectId,address,size,i,start,stop)
  local funct=UObject.funct
  for j=start,stop do
    local pointer
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          local typ=string.sub(name,1,string.find(name,' ')-1)
          if typ=='Function' then
            local fullname=string.sub(name,string.find(name,' ')+1,name:len())
            local func=readPointer(pointer+funct)
            if func and func~=0 then extralist.addSymbol('UE',fullname,func,1)end
          end
        end
      end
    end
  end
end

function registerFuncAlgo()
 local funct=UObject.funct
 ue4parsetablecheck()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 if not enumUEObjIsRunning and UEObj then
   for i,v in ipairs(UEObj) do
     if v.Type=='Function' then
       local func=readPointer(v.Address+funct)
       if func and func~=0 then extralist.addSymbol('UE',v.FullName,func,1)end
     end
   end
 else
   local k=1
   local count=0x200
   local size=GUObjectsize
   local sizess= UE4ver&gt;2 and (targetIs64Bit() and 0x18*count or 0x10*count) or 0x4*count
   local ObjectId=UObject.ObjectId
   for i=1,#GUObjectDict do
    local num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      if ObjectResult then break end
      createThread(registerFunc(ObjectId,GUObjectDict[i],size,i,start,stop-1))
      k=k+1
    end
   end
 end
end

function isStructExist(name)
for i=0,getStructureCount()-1 do
if(getStructure(i).getName()==name)then return getStructure(i) end
end
return false
end

function deletestruct(name)
local count=getStructureCount()
local structure
for i=0,count-1 do
structure=getStructure(i)
if(structure.getName()==name)then structure.removeFromGlobalStructureList() break end
end end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(modulename,true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress(stopaddress)
				stopaddress=modulename+getModuleSize(stopaddress)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function ue4determineversion()
 local address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]
 if address then findAddress('FNamePool',1,address) UE4ver=25 ue4parsetable() ue4config()
  local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
  if not address or address==0 then error('StaticFindObject not functioning as expected...')end
  UE4ver=nil
  local pointer=readPointer(address+UObject.member)
  if pointer then pointer=readPointer(pointer) if pointer then UE4ver=25 end end
  if not UE4ver then UE4ver=23 end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1]
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
  local address=readPointer('[[GUObjectArray+10]]+18')
  if address&gt;0x10000 then
   UE4ver=22
   ue4parsetable()
   ue4config()
   FNameStringAlgo(1,true)
   local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
   if not address or address==0 then error('StaticFindObject not functioning as expected...')end
   UE4ver=nil
   local pointer=readPointer(address+UObject.member)
   if pointer then pointer=readPointer(pointer) if pointer then UE4ver=22 end end
   if not UE4ver then UE4ver=20 end
  else UE4ver=18 end
 end
end


function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  local member,Offset,Property,bitmask,nextmember,super=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress
  local isUE425=UE4ver&gt;=25
  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end
  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    --print(GetFullNameAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=isUE425 and GetFullNameSafeAlgo(pointer) or GetFullNameAlgo(pointer)
      if PropName and string.find(PropName,' ') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
            end
            if Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end

  if Struct.Count==0 then return end
  if AddedOffset&gt;0 then return end

  if Struct.Element[Struct.Count-1].Offset&lt;=0x5000 then
    local count=Struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
        element1=Struct.Element[i]
        element2=Struct.Element[i+1]
        if element2 then
          bytesize=element1.Bytesize
          if bytesize&lt;4 then bytesize=4 end
          size=element2.Offset-element1.Offset-bytesize
          if size&gt;0 then
             if size%4&gt;0 then size=4-size%4+size end
             local start=element1.Offset
             if start%4&gt;0 then start=4-start%4+start
             else start=start+4 end
             size=size/4
             for j=0,size-1 do
               if (start+j*4)&gt;=(element1.Offset+bytesize) then
                 list[k]=start+j*4
                 k=k+1
               end
             end
           end
        end
      end
      for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
    end

    if isGlobal then Struct.addToGlobalStructureList()end
end


function ue4createstructfast(fullnameortable,StructName,isGlobal,isfullname,structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  if not UEObj then enumUEObj() end
  local tabl=fullnameortable
  if type(fullnameortable)==type('') then
    for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
  end
  --[[
  if not tabl or type(tabl)~=type({})  then
    enumUEObj()
    if type(fullnameortable)==type('') then
      for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
    end
  end
  ]]
  if not tabl or type(tabl)~=type({})  then
    print(tostring(fullnameortable)..' not found...')
    return
  end
  local name=StructName
  if not name then name=tabl.Name end
  if not AddedOffset then AddedOffset=0 end
  local struct=structu
  if not struct then struct=createStructure(name)end
  if not AddedName then AddedName='' end
  --print(tostring(tabl))
  local isUserDefinedStruct=string.find(tabl.Type,'UserDefinedStruct')
  local e,typ,propname
  while(true)do
    if not tabl then break end
    if type(tabl)==type(1) or tabl.Name=='Object' then break end
    print(tostring(tabl.Type)..' '..tostring(tabl.FullName))
    if tabl.Member then
      for i=1,#tabl.Member do
        if tabl.Member[i].Type~='Function' then
          if isfullname then e.Name=string.format('%s %s%s',tabl.Member[i].Type,AddedName,tabl.Member[i].FullName)
          else
            propname=AddedName..tabl.Member[i].Name
            if isUserDefinedStruct then propname=propname:sub(1,string.find(propname,'_')-1) end
          end
          if tabl.Member[i].Type=='StructProperty' then ue4createstructfast(tabl.Member[i].Property,nil,nil,isfullname,struct,tabl.Member[i].Offset+AddedOffset,propname..'.')
          else
            e=struct.addElement()
            e.Offset=tabl.Member[i].Offset+AddedOffset
            typ=tabl.Member[i].Type
            e.Name=propname
            e.Vartype=ue4type[typ]
            if e.Vartype==nil then e.Vartype=vtDword end
          --if typ=='StructProperty' then for i=2,(v.Size/4) do local f=struct.addElement() f.Offset=e.Offset+i*4-4 f.Name=e.Name..'_'..i f.Vartype=e.Vartype end e.Name=e.Name
            if typ=='ArrayProperty' then
              local f=struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              --[[
              if tabl.Member[i].Property.Name and tabl.Member[i].Property.Property.Name then
                local struc=createStructure(tabl.Member[i].Property.Name)
                ue4createstructfast(tabl.Member[i].Property.Property,isfullname and tabl.Member[i].Property.Property.FullName..'.' or tabl.Member[i].Property.Property.Name..'.',10,isfullname,struc)
                if struc.Count&gt;1 then e.ChildStruct=struc end
              end]]
            elseif typ=='BoolProperty' then e.ChildStructStart=tabl.Member[i].BitField end
          end
        end
      end
    end
    tabl=tabl.Parent
  end
  if struct.Count==0 then return end
  if AddedOffset&gt;0 then return end
  if struct.Element[struct.Count-1].Offset&lt;=0x5000 then
    local count=struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
      element1=struct.Element[i]
      element2=struct.Element[i+1]
      if element2 then
        bytesize=element1.Bytesize
        if bytesize&lt;4 then bytesize=4 end
        size=element2.Offset-element1.Offset-bytesize
        if size&gt;0 then
           if size%4&gt;0 then size=4-size%4+size end
           local start=element1.Offset
           if start%4&gt;0 then start=4-start%4+start
           else start=start+4 end
           size=size/4
           for j=0,size-1 do
             if (start+j*4)&gt;=(element1.Offset+bytesize) then
               list[k]=start+j*4
               k=k+1
             end
           end
        end
      end
    end
    for i,v in ipairs(list) do local e=struct.addElement() e.Offset=v e.Vartype=vtDword end
  end
  if isGlobal then struct.addToGlobalStructureList()end
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(Instance)

  if name then
   -- print('banana3')
    ue4createstructfast(fullname,nil,10,nil,Struct)
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName
    end
  end

  if not UEObj then enumUEObj() end
  for i=1,#UEObj do
    if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
       if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
         local name
         return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName
       end
    end
  end

  return address
end


function enumUEObjT(file,size,i,start,stop)
 local datatable,Address,FName,Name,FullName,typ,typ1,isProperty,l,pointer,stri,num,isPropertyc,EObj,k=0
 local Class,ObjectId,super,Offset,nextmember,member,propsize,bitmask,Property=UObject.Class,UObject.ObjectId,UObject.super,UObject.Offset,UObject.nextmember,UObject.member,UObject.propsize,UObject.bitmask,UObject.Property
 local UEver=UE4ver
 local pointersize= targetIs64Bit() and 8 or 4

 for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      Address=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      Address=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      Address=byteTableToDword(datatable)
    end

    if Address and Address~=0 then
       objid=readInteger(Address+ObjectId)
       if objid then
          if objid&lt;size then
             FullName=GetFullNameAlgo(Address)

             if FullName then
               typ1=FullName:sub(1,string.find(FullName,' ')-1)
               FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
               if string.find(FullName,'%.') then Name=FullName:sub(string.find(FullName,'%.')+1,FullName:len())
               else Name=FullName end
               if UEObjIndex[FullName] and UEObj[UEObjIndex[FullName]] then UEObj[UEObjIndex[FullName]].Address=Address
               else
                 EObj={}
                 EObj.Address=Address
                 EObj.Id=objid
                 EObj.Class=temp[readPointer(Address+Class)]
                 EObj.Type=typ1
                 EObj.FullName=FullName
                 EObj.Name=Name
                 Parent=readPointer(Address+super)
                 if Parent and Parent~=0 then EObj.Parent=Parent end
                 temp[Address]=EObj
                 k=1
                 EObj.MemberSize=readInteger(Address+member+pointersize)
                 Address=readPointer(Address+member)

                 EObj.Member={}
                 while(true)do
                   if UEver&gt;=25 then FullName=GetFullNameSafeAlgo(Address)
                   else FullName=GetFullNameAlgo(Address) end
                   if not FullName then break end

                   typ=FullName:sub(1,string.find(FullName,' ')-1)
                   FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                   if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                   else Name=FullName end
                   EObj.Member[k]={}
                   EObj.Member[k].Address=Address
                   EObj.Member[k].Type=typ
                   EObj.Member[k].FullName=FullName
                   EObj.Member[k].Name=Name
                   EObj.Member[k].Size=readInteger(Address+propsize)
                   EObj.Member[k].Offset=readInteger(Address+Offset)
                   if typ=='BoolProperty' then EObj.Member[k].BitField=readBytes(Address+bitmask,1)
                   elseif typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' then EObj.Member[k].Property=readPointer(Address+Property)end
                   Address=readPointer(Address+nextmember)
                   k=k+1
                 end
                 if #EObj.Member==0 then EObj.Member=nil end
                 UEObj[#UEObj+1]=EObj
                 UEObjIndex[EObj.FullName]=#UEObj+1
               end
             end
          end
       end
    end
 end
--print(i..':'..k)
end

function enumUEObj(isSilent,isUpdateOnly)
 enumUEObjIsRunning=true
 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 if not isUpdateOnly then
   UEObj={}
   UEObjIndex={}
 end
 temp={}
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(enumUEObjT(file,size,i,start,stop-1))
  end
 end
 if not isUpdateOnly then
   for i=1,#UEObj do
     if UEObj[i].Parent then
       if temp[UEObj[i].Parent] then
         UEObj[i].Parent=temp[UEObj[i].Parent]
       end
     end
     if UEObj[i].Member then
       for j=1,#UEObj[i].Member do
         if UEObj[i].Member[j].Property then
           if temp[UEObj[i].Member[j].Property] then
             UEObj[i].Member[j].Property=temp[UEObj[i].Member[j].Property]
             local typ=UEObj[i].Member[j].Property.Type
             if typ and ( typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' ) then
               typ=temp[readPointer(UEObj[i].Member[j].Property.Address+UObject.Property)]
               if typ then
                 UEObj[i].Member[j].Property.Property=typ
               end
             end
           end
         end
       end


     end
   end
 end
 temp=nil
 enumUEObjIsRunning=false
 if not isSilent then print(string.format('\nA Total of %u objects had been enumerated in %u seconds',#UEObj,os.time()-starttime))end
end



function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function UEfindInstancesOfClass(fullnameOrAddress)
  local class,address=UObject.Class
  if type(fullnameOrAddress)==type('')then address=StaticFindObjectAlgo(fullnameOrAddress)
  else address=fullnameOrAddress end
  local fname=readInteger(address+UObject.FNameIndex)
  local result=groupscan(string.format('%u:%u 4:%u',targetIs64Bit() and 8 or 4,address,fname))
  for i,v in ipairs(result) do result[i]=tonumber(v,16)-class end
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
if force~=nil
then state = not force
end
compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
getMainForm().Splitter1.Visible = state
getMainForm().Panel4.Visible = state
getMainForm().Panel5.Visible = state
end

function addCompactMenu()
if compactmenualreadyexists
then return end
local parent = getMainForm().Menu.Items
compactmenuitem = createMenuItem(parent)
parent.add(compactmenuitem)
compactmenuitem.Caption = 'Compact View Mode'
compactmenuitem.OnClick = cycleFullCompact
compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
local starttime=os.time()
ue4versioncheck()

if targetIs64Bit() then

 local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
 if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
 if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
 if not address then error('GUObjectArray aob not found...')end
 findAddress('GUObjectArray',1,address)

 ue4config()

 if UE4ver&gt;=23 then findAddress('FNamePool',1,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process)
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
  if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
 end

 local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
 if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
 if not address then error('GEngine aob not found...')end
 findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)

else
 ue4config()
 if UE4ver&gt;2 then
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
  findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
 else
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
  findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
 end
end
print('AOBScan done : '..os.time()-starttime)
ue4parsetable()
--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

FNameStringAlgo(1,true)

print('Table parsing done : '..os.time()-starttime)
if UE4ver&gt;2 then

 createThread(ue4createstruct('/Script/Engine.GameEngine','GameEngine',1))
 createThread(ue4createstruct('/Script/Engine.GameViewportClient','GameViewportClient',0))

 createThread(ue4createstruct('/Script/Engine.GameInstance','GameInstance',0))
 createThread(ue4createstruct('/Script/Engine.LocalPlayer','LocalPlayer',1))
 createThread(ue4createstruct('/Script/Engine.PlayerController','PlayerController',2))
 createThread(ue4createstruct('/Script/Engine.CharacterMovementComponent','MovementComponent',0))
 createThread(ue4createstruct('/Script/Engine.CapsuleComponent','CapsuleComponent',3))
 createThread(ue4createstruct('/Script/Engine.Character','GPlayer',0))

 createThread(ue4createstruct('/Script/Engine.World','World',0))

end

print('All done : '..os.time()-starttime..'\n')
sleep(1000)
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26076</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end

 
 
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26050</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local Offset,ObjectId,nextmember,member,enumMul,Property=UObject.Offset,UObject.ObjectId,UObject.nextmember,UObject.member,UObject.enumMul,UObject.Property

function ue4dump(file,address,size,i,start,stop)
 local k=0
 local addy= targetIs64Bit() and 8 or 4
 local en= targetIs64Bit() and 0x40 or 0x2C
 local pointer,datatable,pointers,propname,offset,list,str,strid,name,objid
 for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
       local objid=readInteger(pointer+ObjectId)
       if objid then
          if objid&lt;size then
             str=string.format('%016X',pointer)
             strid=string.format('%08u',objid)
             name=GetFullNameSuperAlgo(pointer,true)
             if name then
                 typ=name:sub(1,string.find(name,' ')-1)
                 if string.find(typ,'Property') then
                     if (typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') ) and Property then
                       name=hasProperty(pointer)
                     end
                     strid=string.format('%8X',readInteger(pointer+Offset))
                 end

                 file:write(string.format('[%s] %s %s\n',strid,str,name))


                 if (typ=='UserDefinedEnum' or typ=='Enum') and enumMul then
                   list=pointer+en
                   for i=0,readInteger(list+8)-1 do
                     pointers=readPointer(list)+i*enumMul
                     offset=readBytes(pointers+addy,1)
                     if offset==0 then offset=i end
                     propname=FNameStringAlgo(pointers)
                     strid=string.format('%8X',offset)
                     str=string.format('%016X',pointers)
                     file:write(string.format('[%s] %s %s\n',strid,str,propname))
                   end
                 elseif typ=='MapProperty' and Property then
                   for n=0,1 do
                     pointers=readPointer(pointer+n*8+Property)
                     propname=hasProperty(pointers)
                     if propname then
                       offset=readInteger(pointers+Offset)
                       strid=string.format('%8X',offset)
                       str=string.format('%016X',pointers)
                       file:write(string.format('[%s] %s %s\n',strid,str,propname))
                     end
                   end
                 end

                 if UE4ver&gt;=25 then
                     local pointers= readPointer(pointer+member)
                     while(true)do
	                     propname=GetFullNameSafeAlgo(pointers)
	                     if not propname then break end
	                     offset=readInteger(pointers+Offset)
	                     strid=string.format('%8X',offset)
                         str=string.format('%016X',pointers)

                         typ=propname:sub(1,string.find(propname,' ')-1)
                         if typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') then
                           propname=hasProperty(pointers)
                         end

	                     file:write(string.format('[%s] %s %s\n',strid,str,propname))

                         if typ=='MapProperty' then
                           for n=0,1 do
                             pointer=readPointer(pointers+n*8+Property)
                             propname=hasProperty(pointer)
                             if propname then
                               offset=readInteger(pointer+Offset)
                               strid=string.format('%8X',offset)
                               str=string.format('%016X',pointer)
                               file:write(string.format('[%s] %s %s\n',strid,str,propname))
                             end
                           end
                         end

	                     pointers=readPointer(pointers+nextmember)
                     end
                 end
                 k=k+1
             end
          end
       end
    end
 end
    totalobject=totalobject+k
--print(i..':'..k)
end


 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] ObjectsDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
--local re={rei1,rei2,rei3,rei4,rei5}
 totalobject=0
--allobject=createStringlist()

 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(ue4dump(file,GUObjectDict[i],size,i,start,stop-1))
  end
 end


 file:close()
 print(string.format('\nA Total of %u objects had been dumped in %u seconds',totalobject,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26051</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26040</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26041</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26039</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26025</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26026</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26052</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>25848</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25853</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25854</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25855</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25857</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25858</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26049</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26048</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



createThread(function()
print('------------------')
local isUnicode=false
local strlist,result,result2,result3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          print(strlist[i]..'&lt;-'..result[j])
          if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
            result2=pointerscan(getAddressSafe(result[j]))
            for k=1,#result2 do
              print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
              result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
              for l=1,#result3 do print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l]) end
            end
          end
        end
      end
    end
  end
end
print('done')
end)
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26029</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26028</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26030</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26099</ID>
          <Description>"Dumper V4.1"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26078</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}
 if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

    UObject.enumMul= 0x10

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A

    UObject.Property= 0x78

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
    UObject.enumMul= 0xC
  end

----------------------------
---------UE3 struct---------
--1.25
 elseif UE4ver&gt;=1 then
    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58
    UObject.enumMul= 0x8


--0.10246
 else
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70
 end

---------------------------
end


local ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then UE4ver=0 return end
--return info.minor
 UE4ver=tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local number,str,datatable
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end
 if not FName then return nil end
 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end
 local CFName=FName
 if UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)+1
  FName=(FName&amp;0xFFFF)*2
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  datatable={}
  for m=1,2 do
    datatable[m]=FNameDict[i][FName+m]
  end

  local le = byteTableToWord(datatable)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and FNameDict[i][FName+1]&amp;1==1 or false
  if widechar then
    datatable={}
    for m=1,le*2 do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToWideString(datatable)
  else
    datatable={}
    for m=1,le do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToString(datatable)
  end
 else
  local i
  if UEver&gt;2 then
   i=(FName&gt;&gt;0xE)+1
   FName=(FName&amp;0x3FFF)*(8-sub)
  else i=1 FName=FName*(8-sub) end
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  local pointer
  if targetIs64Bit() then
    datatable={}
    for m=1,8 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToQword(datatable)
  else
    datatable={}
    for m=1,4 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToDword(datatable)
  end
  if not pointer or pointer==0 then return nil end

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if FName==1 and not stringoffset or not stringoffsetid then
     str=readString(pointer+8,13)
     if str=='ByteProperty' then stringoffset=8
     else str=readString(pointer+0xC,13)
         if str=='ByteProperty' then stringoffset=0xC
         else str=readString(pointer+0x10,13)
             if str=='ByteProperty' then stringoffset=0x10 end
         end
     end

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  local widechar=true and readInteger(pointer+stringoffsetid)&amp;1==1 and UEver&gt;2 or false
  str= readString(pointer+stringoffset,200,widechar)
  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
   --print(string.format('%X',pointer+0xC))
 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 return str
end

function GetNameAlgo(object)
 if not object then return nil end
 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local fnameoffset=UObject.FNameIndex
 local typeoffset=UObject.Class
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 local str1=FNameStringAlgo(pointer+fnameoffset)
 local str2=FNameStringAlgo(object+fnameoffset)
 if not str2 then str2=FNameStringAlgo(object+fnameoffset-8)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end
 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafeAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i return end
      end
    end
  end
end


function FindStringFName(namestr)
  local size
  if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=stop
    stop=stop+num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1
  if UE4ver&gt;=25 then str1=GetFullNameSafeAlgo(object)
  else str1=GetFullNameAlgo(object) end
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]

function ue4parsetable()
 FNameList={}
 ObjectList={}
 FullNameList={}
 sub=targetIs64Bit() and 0 or 4
 local pool=getAddressSafe('FNamePool')
 local pool2=getAddressSafe('GUObjectArray')
 if pool and pool2 then
  if UE4ver&gt;=20 then GUObjectsize=readInteger(getAddress('GUObjectArray+24')-(sub*2))
  elseif UE4ver&gt;11 then  GUObjectsize=readInteger('GUObjectArray+1C')
  else GUObjectsize=readInteger(getAddress('GUObjectArray+8')-(sub*2))
  end
  FNameDict={}
  GUObjectDict={}
  for i=0,100 do
   local pointer
   if UE4ver&gt;=23 then pointer=readPointer(pool+i*(8-sub)+0x10)
   elseif UE4ver&gt;2 then  pointer=readPointer(readPointer(pool)+i*(8-sub))
   else pointer=readPointer(pool+i*(8-sub)) end
   if pointer and pointer~=0 then
    local size=getregionsize(pointer)
    if not size or size==0 then break end
    FNameDict[i+1]=readBytes(pointer,size-1,true)
   else break
   end
  end
  for i=0,100 do
   if UE4ver&gt;=20 then
    pointer=readPointer(readPointer(pool2+0x10)+i*(8-sub))
    if pointer and pointer~=0 then
    --print(string.format('%X',pointer))
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break
    end
   elseif UE4ver&gt;11 then pointer=readPointer(pool2+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   elseif UE4ver&gt;2 then pointer=readPointer(readPointer(pool2)+i*8+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break end
   else pointer=readPointer(pool2)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   end
  end
 end
end


function ue4parsetablecheck()
 if not FNameDict or not GUObjectDict then ue4parsetable()
 else
 local pointer,pointei,datatable,m
 if targetIs64Bit() then
   datatable={}
   for m=1,8 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToQword(datatable)
 else
   datatable={}
   for m=1,4 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToDword(datatable)
 end
 if UE4ver&gt;=20 then pointei=readPointer('[[GUObjectArray+10]]')
 elseif UE4ver&gt;11 then pointei=readPointer('[GUObjectArray+10]')
 elseif UE4ver&gt;2 then pointei=readPointer('[[GUObjectArray]+10]')
 else pointei=readPointer('[GUObjectArray]') end
 --print(string.format('%X',pointei))
 --print(string.format('%X',pointer))
 if pointei ~= pointer then ue4parsetable() end
 local GUObjectsizes
 if UE4ver&gt;=20 then GUObjectsizes=readInteger(getAddress('GUObjectArray+24')-(sub*2))
 elseif UE4ver&gt;11 then GUObjectsizes=readInteger('GUObjectArray+1C')
 else GUObjectsizes=readInteger(getAddress('GUObjectArray+8')-(sub*2)) end
 if GUObjectsizes~=GUObjectsize then ue4parsetable() end
 end
end

function FindObject(threadlist,ObjectId,address,size,i,start,stop,fullname)
  local pointer,datatable
  for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          name=string.sub(name,string.find(name,' ')+1,name:len())
          if not FullNameList[name]then FullNameList[name]=pointer end
          if FullNameList[fullname] then
            ObjectResult=FullNameList[fullname]
            for k,v in ipairs(threadlist) do v.terminate() end
            return
          end
        end
      end
    end
  end
end

function StaticFindObjectAlgo(fullname)
 ue4parsetablecheck()
 if FullNameList[fullname] then return FullNameList[fullname]end
 local threadlist={}
 local k=1
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local ObjectId=UObject.ObjectId
 ObjectResult=nil
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess) do
    start=stop
    stop=stop+num
    if ObjectResult then break end
    threadlist[k]=createThread(FindObject(threadlist,ObjectId,GUObjectDict[i],size,i,start,stop-1,fullname))
    k=k+1
  end
 end
 local result=ObjectResult
 ObjectResult=nil
 return result
end

function registerFunc(ObjectId,address,size,i,start,stop)
  local funct=UObject.funct
  for j=start,stop do
    local pointer
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          local typ=string.sub(name,1,string.find(name,' ')-1)
          if typ=='Function' then
            local fullname=string.sub(name,string.find(name,' ')+1,name:len())
            local func=readPointer(pointer+funct)
            if func and func~=0 then extralist.addSymbol('UE',fullname,func,1)end
          end
        end
      end
    end
  end
end

function registerFuncAlgo()
 local funct=UObject.funct
 ue4parsetablecheck()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 if not enumUEObjIsRunning and UEObj then
   for i,v in ipairs(UEObj) do
     if v.Type=='Function' then
       local func=readPointer(v.Address+funct)
       if func and func~=0 then extralist.addSymbol('UE',v.FullName,func,1)end
     end
   end
 else
   local k=1
   local count=0x200
   local size=GUObjectsize
   local sizess= UE4ver&gt;2 and (targetIs64Bit() and 0x18*count or 0x10*count) or 0x4*count
   local ObjectId=UObject.ObjectId
   for i=1,#GUObjectDict do
    local num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      if ObjectResult then break end
      createThread(registerFunc(ObjectId,GUObjectDict[i],size,i,start,stop-1))
      k=k+1
    end
   end
 end
end

function isStructExist(name)
for i=0,getStructureCount()-1 do
if(getStructure(i).getName()==name)then return getStructure(i) end
end
return false
end

function deletestruct(name)
local count=getStructureCount()
local structure
for i=0,count-1 do
structure=getStructure(i)
if(structure.getName()==name)then structure.removeFromGlobalStructureList() break end
end end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function ue4determineversion()
 local address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]
 if address then findAddress('FNamePool',1,address) UE4ver=25 ue4parsetable() ue4config()
  local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
  if not address or address==0 then error('StaticFindObject not functioning as expected...')end
  UE4ver=nil
  local pointer=readPointer(address+UObject.member)
  if pointer then pointer=readPointer(pointer) if pointer then UE4ver=25 end end
  if not UE4ver then UE4ver=23 end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1]
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
  local address=readPointer('[[GUObjectArray+10]]+18')
  if address&gt;0x10000 then
   UE4ver=22
   ue4parsetable()
   ue4config()
   FNameStringAlgo(1,true)
   local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
   if not address or address==0 then error('StaticFindObject not functioning as expected...')end
   UE4ver=nil
   local pointer=readPointer(address+UObject.member)
   if pointer then pointer=readPointer(pointer) if pointer then UE4ver=22 end end
   if not UE4ver then UE4ver=20 end
  else UE4ver=18 end
 end
end


function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  local member,Offset,Property,bitmask,nextmember,super=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress
  local isUE425=UE4ver&gt;=25
  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end
  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    --print(GetFullNameAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=isUE425 and GetFullNameSafeAlgo(pointer) or GetFullNameAlgo(pointer)
      if PropName and string.find(PropName,' ') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
            end
            if Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end

  if Struct.Count==0 then return end
  if AddedOffset&gt;0 then return end

  if Struct.Element[Struct.Count-1].Offset&lt;=0x5000 then
    local count=Struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
        element1=Struct.Element[i]
        element2=Struct.Element[i+1]
        if element2 then
          bytesize=element1.Bytesize
          if bytesize&lt;4 then bytesize=4 end
          size=element2.Offset-element1.Offset-bytesize
          if size&gt;0 then
             if size%4&gt;0 then size=4-size%4+size end
             local start=element1.Offset
             if start%4&gt;0 then start=4-start%4+start
             else start=start+4 end
             size=size/4
             for j=0,size-1 do
               if (start+j*4)&gt;=(element1.Offset+bytesize) then
                 list[k]=start+j*4
                 k=k+1
               end
             end
           end
        end
      end
      for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
    end

    if isGlobal then Struct.addToGlobalStructureList()end
end


function ue4createstructfast(fullnameortable,StructName,isGlobal,isfullname,structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  if not UEObj then enumUEObj() end
  local tabl=fullnameortable
  if type(fullnameortable)==type('') then
    for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
  end
  --[[
  if not tabl or type(tabl)~=type({})  then
    enumUEObj()
    if type(fullnameortable)==type('') then
      for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
    end
  end
  ]]
  if not tabl or type(tabl)~=type({})  then
    print(tostring(fullnameortable)..' not found...')
    return
  end
  local name=StructName
  if not name then name=tabl.Name end
  if not AddedOffset then AddedOffset=0 end
  local struct=structu
  if not struct then struct=createStructure(name)end
  if not AddedName then AddedName='' end
  --print(tostring(tabl))
  local isUserDefinedStruct=string.find(tabl.Type,'UserDefinedStruct')
  local e,typ,propname
  while(true)do
    if not tabl then break end
    if type(tabl)==type(1) or tabl.Name=='Object' then break end
    print(tostring(tabl.Type)..' '..tostring(tabl.FullName))
    if tabl.Member then
      for i=1,#tabl.Member do
        if tabl.Member[i].Type~='Function' then
          if isfullname then e.Name=string.format('%s %s%s',tabl.Member[i].Type,AddedName,tabl.Member[i].FullName)
          else
            propname=AddedName..tabl.Member[i].Name
            if isUserDefinedStruct then propname=propname:sub(1,string.find(propname,'_')-1) end
          end
          if tabl.Member[i].Type=='StructProperty' then ue4createstructfast(tabl.Member[i].Property,nil,nil,isfullname,struct,tabl.Member[i].Offset+AddedOffset,propname..'.')
          else
            e=struct.addElement()
            e.Offset=tabl.Member[i].Offset+AddedOffset
            typ=tabl.Member[i].Type
            e.Name=propname
            e.Vartype=ue4type[typ]
            if e.Vartype==nil then e.Vartype=vtDword end
          --if typ=='StructProperty' then for i=2,(v.Size/4) do local f=struct.addElement() f.Offset=e.Offset+i*4-4 f.Name=e.Name..'_'..i f.Vartype=e.Vartype end e.Name=e.Name
            if typ=='ArrayProperty' then
              local f=struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              --[[
              if tabl.Member[i].Property.Name and tabl.Member[i].Property.Property.Name then
                local struc=createStructure(tabl.Member[i].Property.Name)
                ue4createstructfast(tabl.Member[i].Property.Property,isfullname and tabl.Member[i].Property.Property.FullName..'.' or tabl.Member[i].Property.Property.Name..'.',10,isfullname,struc)
                if struc.Count&gt;1 then e.ChildStruct=struc end
              end]]
            elseif typ=='BoolProperty' then e.ChildStructStart=tabl.Member[i].BitField end
          end
        end
      end
    end
    tabl=tabl.Parent
  end
  if struct.Count==0 then return end
  if AddedOffset&gt;0 then return end
  if struct.Element[struct.Count-1].Offset&lt;=0x5000 then
    local count=struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
      element1=struct.Element[i]
      element2=struct.Element[i+1]
      if element2 then
        bytesize=element1.Bytesize
        if bytesize&lt;4 then bytesize=4 end
        size=element2.Offset-element1.Offset-bytesize
        if size&gt;0 then
           if size%4&gt;0 then size=4-size%4+size end
           local start=element1.Offset
           if start%4&gt;0 then start=4-start%4+start
           else start=start+4 end
           size=size/4
           for j=0,size-1 do
             if (start+j*4)&gt;=(element1.Offset+bytesize) then
               list[k]=start+j*4
               k=k+1
             end
           end
        end
      end
    end
    for i,v in ipairs(list) do local e=struct.addElement() e.Offset=v e.Vartype=vtDword end
  end
  if isGlobal then struct.addToGlobalStructureList()end
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(Instance)

  if name then
   -- print('banana3')
    ue4createstructfast(fullname,nil,10,nil,Struct)
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName
    end
  end

  if not UEObj then enumUEObj() end
  for i=1,#UEObj do
    if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
       if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
         local name
         return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName
       end
    end
  end

  return address
end


function enumUEObjT(file,size,i,start,stop)
 local datatable,Address,FName,Name,FullName,typ,typ1,isProperty,l,pointer,stri,num,isPropertyc,EObj,k=0
 local Class,ObjectId,super,Offset,nextmember,member,propsize,bitmask,Property,Outer=UObject.Class,UObject.ObjectId,UObject.super,UObject.Offset,UObject.nextmember,UObject.member,UObject.propsize,UObject.bitmask,UObject.Property,UObject.Outer
 local UEver=UE4ver
 local pointersize= targetIs64Bit() and 8 or 4

 for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      Address=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      Address=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      Address=byteTableToDword(datatable)
    end

    if Address and Address~=0 then
       objid=readInteger(Address+ObjectId)
       if objid then
          if objid&lt;size then
             FullName=GetFullNameAlgo(Address)

             if FullName then
               isProperty=false
               typ1=FullName:sub(1,string.find(FullName,' ')-1)
               FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
               if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len()) isProperty=true
               elseif string.find(FullName,'%.') then Name=FullName:sub(string.find(FullName,'%.')+1,FullName:len())
               else Name=FullName end
               if UEObjIndex[FullName] and UEObj[UEObjIndex[FullName]] then UEObj[UEObjIndex[FullName]].Address=Address
               else
                 EObj={}
                 EObj.Address=Address
                 EObj.Id=objid
                 EObj.Class=temp[readPointer(Address+Class)]
                 EObj.Type=typ1
                 EObj.FullName=FullName
                 EObj.Name=Name
                 if isProperty then
                   isProperty=readPointer(Address+Outer)
                   if isProperty and isProperty~=0 then
                     EObj.Outer=isProperty
                     EObj.Size=readInteger(Address+propsize)
                     EObj.Offset=readInteger(Address+Offset)
                     if typ1=='BoolProperty' then EObj.BitField=readBytes(Address+bitmask,1)
                     elseif typ1=='StructProperty' or typ1=='ObjectProperty' or typ1=='ArrayProperty' then EObj.Property=readPointer(Address+Property)end
                   else print(FullName..' nil outer')
                   end
                 end

                 Parent=readPointer(Address+super)
                 if Parent and Parent~=0 then EObj.Parent=Parent end
                 temp[Address]=EObj
                 if UEver&gt;=25 then
                   k=1
                   EObj.MemberSize=readInteger(Address+member+pointersize)
                   Address=readPointer(Address+member)
                   EObj.Member={}

                   while(true)do
                     if UEver&gt;=25 then FullName=GetFullNameSafeAlgo(Address)
                     else FullName=GetFullNameAlgo(Address) end
                     if not FullName then break end

                     typ=FullName:sub(1,string.find(FullName,' ')-1)
                     FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                     if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                     else Name=FullName end
                     EObj.Member[k]={}
                     EObj.Member[k].Address=Address
                     EObj.Member[k].Type=typ
                     EObj.Member[k].FullName=FullName
                     EObj.Member[k].Name=Name
                     EObj.Member[k].Size=readInteger(Address+propsize)
                     EObj.Member[k].Offset=readInteger(Address+Offset)
                     if typ=='BoolProperty' then EObj.Member[k].BitField=readBytes(Address+bitmask,1)
                     elseif typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' then EObj.Member[k].Property=readPointer(Address+Property)end
                     Address=readPointer(Address+nextmember)
                     k=k+1
                   end
                   if #EObj.Member==0 then EObj.Member=nil end
                 end
                 UEObj[#UEObj+1]=EObj
                 UEObjIndex[EObj.FullName]=#UEObj+1
               end
             end
          end
       end
    end
 end
--print(i..':'..k)
end

function enumUEObj(isSilent,isUpdateOnly)
 enumUEObjIsRunning=true
 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 if not isUpdateOnly then
   UEObj={}
   UEObjIndex={}
 end
 temp={}
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(enumUEObjT(file,size,i,start,stop-1))
  end
 end
 if not isUpdateOnly then
   if UE4ver&gt;=25 then
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Member then
         for j=1,#UEObj[i].Member do
           if UEObj[i].Member[j].Property then
             if temp[UEObj[i].Member[j].Property] then
               UEObj[i].Member[j].Property=temp[UEObj[i].Member[j].Property]
               local typ=UEObj[i].Member[j].Property.Type
               if typ and ( typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' ) then
                 typ=temp[readPointer(UEObj[i].Member[j].Property.Address+UObject.Property)]
                 if typ then
                   UEObj[i].Member[j].Property.Property=typ
                 end
               end
             end
           end
         end
       end
     end
   else
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Outer then
         if temp[UEObj[i].Outer]then
           if temp[UEObj[i].Property] then
             UEObj[i].Property=temp[UEObj[i].Property]
             local typ=UEObj[i].Property.Type
             if typ and ( typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' ) then
               typ=temp[readPointer(UEObj[i].Property.Address+UObject.Property)]
               if typ then
                 UEObj[i].Property.Property=typ
               end
             end
           end
           if not temp[UEObj[i].Outer].Member then temp[UEObj[i].Outer].Member={}end
           temp[UEObj[i].Outer].Member[#temp[UEObj[i].Outer].Member+1]=UEObj[i]
         else print(UEObj[i].FullName..' missing outer') end
       end
     end
   end
 end
 temp=nil
 enumUEObjIsRunning=false
 if not isSilent then print(string.format('\nA Total of %u objects had been enumerated in %u seconds',#UEObj,os.time()-starttime))end
end



function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function UEfindInstancesOfClass(fullnameOrAddress)
  local class,address=UObject.Class
  if type(fullnameOrAddress)==type('')then address=StaticFindObjectAlgo(fullnameOrAddress)
  else address=fullnameOrAddress end
  local fname=readInteger(address+UObject.FNameIndex)
  local result=groupscan(string.format('%u:%u 4:%u',targetIs64Bit() and 8 or 4,address,fname))
  for i,v in ipairs(result) do result[i]=tonumber(v,16)-class end
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
if force~=nil
then state = not force
end
compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
getMainForm().Splitter1.Visible = state
getMainForm().Panel4.Visible = state
getMainForm().Panel5.Visible = state
end

function addCompactMenu()
if compactmenualreadyexists
then return end
local parent = getMainForm().Menu.Items
compactmenuitem = createMenuItem(parent)
parent.add(compactmenuitem)
compactmenuitem.Caption = 'Compact View Mode'
compactmenuitem.OnClick = cycleFullCompact
compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
local starttime=os.time()
ue4versioncheck()

if targetIs64Bit() then

 local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
 if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
 if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
 if not address then error('GUObjectArray aob not found...')end
 findAddress('GUObjectArray',1,address)

 ue4config()

 if UE4ver&gt;=23 then findAddress('FNamePool',1,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process)
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
  if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
 end

 local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
 if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
 if not address then error('GEngine aob not found...')end
 findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)

else
 ue4config()
 if UE4ver&gt;2 then
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
  findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
 else
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
  findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
 end
end
print('AOBScan done : '..os.time()-starttime)
ue4parsetable()
--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

FNameStringAlgo(1,true)

print('Table parsing done : '..os.time()-starttime)
if UE4ver&gt;2 then

 createThread(ue4createstruct('/Script/Engine.GameEngine','GameEngine',1))
 createThread(ue4createstruct('/Script/Engine.GameViewportClient','GameViewportClient',0))

 createThread(ue4createstruct('/Script/Engine.GameInstance','GameInstance',0))
 createThread(ue4createstruct('/Script/Engine.LocalPlayer','LocalPlayer',1))
 createThread(ue4createstruct('/Script/Engine.PlayerController','PlayerController',2))
 createThread(ue4createstruct('/Script/Engine.CharacterMovementComponent','MovementComponent',0))
 createThread(ue4createstruct('/Script/Engine.CapsuleComponent','CapsuleComponent',3))
 createThread(ue4createstruct('/Script/Engine.Character','GPlayer',0))

 createThread(ue4createstruct('/Script/Engine.World','World',0))

end

print('All done : '..os.time()-starttime..'\n')
sleep(1000)
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26079</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end

 
 
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26080</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local Offset,ObjectId,nextmember,member,enumMul,Property=UObject.Offset,UObject.ObjectId,UObject.nextmember,UObject.member,UObject.enumMul,UObject.Property

function ue4dump(file,address,size,i,start,stop)
 local k=0
 local addy= targetIs64Bit() and 8 or 4
 local en= targetIs64Bit() and 0x40 or 0x2C
 local pointer,datatable,pointers,propname,offset,list,str,strid,name,objid
 for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
       local objid=readInteger(pointer+ObjectId)
       if objid then
          if objid&lt;size then
             str=string.format('%016X',pointer)
             strid=string.format('%08u',objid)
             name=GetFullNameSuperAlgo(pointer,true)
             if name then
                 typ=name:sub(1,string.find(name,' ')-1)
                 if string.find(typ,'Property') then
                     if (typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') ) and Property then
                       name=hasProperty(pointer)
                     end
                     strid=string.format('%8X',readInteger(pointer+Offset))
                 end

                 file:write(string.format('[%s] %s %s\n',strid,str,name))


                 if (typ=='UserDefinedEnum' or typ=='Enum') and enumMul then
                   list=pointer+en
                   for i=0,readInteger(list+8)-1 do
                     pointers=readPointer(list)+i*enumMul
                     offset=readBytes(pointers+addy,1)
                     if offset==0 then offset=i end
                     propname=FNameStringAlgo(pointers)
                     strid=string.format('%8X',offset)
                     str=string.format('%016X',pointers)
                     file:write(string.format('[%s] %s %s\n',strid,str,propname))
                   end
                 elseif typ=='MapProperty' and Property then
                   for n=0,1 do
                     pointers=readPointer(pointer+n*8+Property)
                     propname=hasProperty(pointers)
                     if propname then
                       offset=readInteger(pointers+Offset)
                       strid=string.format('%8X',offset)
                       str=string.format('%016X',pointers)
                       file:write(string.format('[%s] %s %s\n',strid,str,propname))
                     end
                   end
                 end

                 if UE4ver&gt;=25 then
                     local pointers= readPointer(pointer+member)
                     while(true)do
	                     propname=GetFullNameSafeAlgo(pointers)
	                     if not propname then break end
	                     offset=readInteger(pointers+Offset)
	                     strid=string.format('%8X',offset)
                         str=string.format('%016X',pointers)

                         typ=propname:sub(1,string.find(propname,' ')-1)
                         if typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') then
                           propname=hasProperty(pointers)
                         end

	                     file:write(string.format('[%s] %s %s\n',strid,str,propname))

                         if typ=='MapProperty' then
                           for n=0,1 do
                             pointer=readPointer(pointers+n*8+Property)
                             propname=hasProperty(pointer)
                             if propname then
                               offset=readInteger(pointer+Offset)
                               strid=string.format('%8X',offset)
                               str=string.format('%016X',pointer)
                               file:write(string.format('[%s] %s %s\n',strid,str,propname))
                             end
                           end
                         end

	                     pointers=readPointer(pointers+nextmember)
                     end
                 end
                 k=k+1
             end
          end
       end
    end
 end
    totalobject=totalobject+k
--print(i..':'..k)
end


 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] ObjectsDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
--local re={rei1,rei2,rei3,rei4,rei5}
 totalobject=0
--allobject=createStringlist()

 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(ue4dump(file,GUObjectDict[i],size,i,start,stop-1))
  end
 end


 file:close()
 print(string.format('\nA Total of %u objects had been dumped in %u seconds',totalobject,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26081</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26082</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26083</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26084</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26085</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26086</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26087</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26088</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26089</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26090</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26091</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26092</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26093</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26094</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26095</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



createThread(function()
print('------------------')
local isUnicode=false
local strlist,result,result2,result3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          print(strlist[i]..'&lt;-'..result[j])
          if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
            result2=pointerscan(getAddressSafe(result[j]))
            for k=1,#result2 do
              print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
              result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
              for l=1,#result3 do print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l]) end
            end
          end
        end
      end
    end
  end
end
print('done')
end)
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26096</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26097</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26098</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26121</ID>
          <Description>"Dumper V4.2"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26100</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}
 if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

    UObject.enumMul= 0x10

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A

    UObject.Property= 0x78

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
    UObject.enumMul= 0xC
  end

----------------------------
---------UE3 struct---------
--1.25
 elseif UE4ver&gt;=1 then
    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58
    UObject.enumMul= 0x8


--0.10246
 else
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70
 end

---------------------------
end


local ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then UE4ver=0 return end
--return info.minor
 UE4ver=tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local number,str,datatable
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end
 if not FName then return nil end
 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end
 local CFName=FName
 if UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)+1
  FName=(FName&amp;0xFFFF)*2
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  datatable={}
  for m=1,2 do
    datatable[m]=FNameDict[i][FName+m]
  end

  local le = byteTableToWord(datatable)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and FNameDict[i][FName+1]&amp;1==1 or false
  if widechar then
    datatable={}
    for m=1,le*2 do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToWideString(datatable)
  else
    datatable={}
    for m=1,le do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToString(datatable)
  end
 else
  local i
  if UEver&gt;2 then
   i=(FName&gt;&gt;0xE)+1
   FName=(FName&amp;0x3FFF)*(8-sub)
  else i=1 FName=FName*(8-sub) end
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  local pointer
  if targetIs64Bit() then
    datatable={}
    for m=1,8 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToQword(datatable)
  else
    datatable={}
    for m=1,4 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToDword(datatable)
  end
  if not pointer or pointer==0 then return nil end

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if FName==1 and not stringoffset or not stringoffsetid then
     str=readString(pointer+8,13)
     if str=='ByteProperty' then stringoffset=8
     else str=readString(pointer+0xC,13)
         if str=='ByteProperty' then stringoffset=0xC
         else str=readString(pointer+0x10,13)
             if str=='ByteProperty' then stringoffset=0x10 end
         end
     end

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  local widechar=true and readInteger(pointer+stringoffsetid)&amp;1==1 and UEver&gt;2 or false
  str= readString(pointer+stringoffset,200,widechar)
  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
   --print(string.format('%X',pointer+0xC))
 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 return str
end

function GetNameAlgo(object)
 if not object then return nil end
 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local fnameoffset=UObject.FNameIndex
 local typeoffset=UObject.Class
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 local str1=FNameStringAlgo(pointer+fnameoffset)
 local str2=FNameStringAlgo(object+fnameoffset)
 if not str2 then str2=FNameStringAlgo(object+fnameoffset-8)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end
 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafesAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end


function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafesAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i return end
      end
    end
  end
end


function FindStringFName(namestr)
  local size
  if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=stop
    stop=stop+num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1
  if UE4ver&gt;=25 then str1=GetFullNameSafeAlgo(object)
  else str1=GetFullNameAlgo(object) end
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]

function ue4parsetable()
 FNameList={}
 ObjectList={}
 FullNameList={}
 sub=targetIs64Bit() and 0 or 4
 local pool=getAddressSafe('FNamePool')
 local pool2=getAddressSafe('GUObjectArray')
 if pool and pool2 then
  if UE4ver&gt;=20 then GUObjectsize=readInteger(getAddress('GUObjectArray+24')-(sub*2))
  elseif UE4ver&gt;11 then  GUObjectsize=readInteger('GUObjectArray+1C')
  else GUObjectsize=readInteger(getAddress('GUObjectArray+8')-(sub*2))
  end
  FNameDict={}
  GUObjectDict={}
  for i=0,500 do
   local pointer
   if UE4ver&gt;=23 then pointer=readPointer(pool+i*(8-sub)+0x10)
   elseif UE4ver&gt;2 then  pointer=readPointer(readPointer(pool)+i*(8-sub))
   else pointer=readPointer(pool+i*(8-sub)) end
   if pointer and pointer~=0 then
    local size=getregionsize(pointer)
    if not size or size==0 then break end
    FNameDict[i+1]=readBytes(pointer,size-1,true)
   else break
   end
  end
  for i=0,500 do
   if UE4ver&gt;=20 then
    pointer=readPointer(readPointer(pool2+0x10)+i*(8-sub))
    if pointer and pointer~=0 then
    --print(string.format('%X',pointer))
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break
    end
   elseif UE4ver&gt;11 then pointer=readPointer(pool2+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   elseif UE4ver&gt;2 then pointer=readPointer(readPointer(pool2)+i*8+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break end
   else pointer=readPointer(pool2)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   end
  end
 end
end


function ue4parsetablecheck()
 if not FNameDict or not GUObjectDict then ue4parsetable()
 else
 local pointer,pointei,datatable,m
 if targetIs64Bit() then
   datatable={}
   for m=1,8 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToQword(datatable)
 else
   datatable={}
   for m=1,4 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToDword(datatable)
 end
 if UE4ver&gt;=20 then pointei=readPointer('[[GUObjectArray+10]]')
 elseif UE4ver&gt;11 then pointei=readPointer('[GUObjectArray+10]')
 elseif UE4ver&gt;2 then pointei=readPointer('[[GUObjectArray]+10]')
 else pointei=readPointer('[GUObjectArray]') end
 --print(string.format('%X',pointei))
 --print(string.format('%X',pointer))
 if pointei ~= pointer then ue4parsetable() end
 local GUObjectsizes
 if UE4ver&gt;=20 then GUObjectsizes=readInteger(getAddress('GUObjectArray+24')-(sub*2))
 elseif UE4ver&gt;11 then GUObjectsizes=readInteger('GUObjectArray+1C')
 else GUObjectsizes=readInteger(getAddress('GUObjectArray+8')-(sub*2)) end
 if GUObjectsizes~=GUObjectsize then ue4parsetable() end
 end
end

function FindObject(threadlist,ObjectId,address,size,i,start,stop,fullname)
  local pointer,datatable
  for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          name=string.sub(name,string.find(name,' ')+1,name:len())
          if not FullNameList[name]then FullNameList[name]=pointer end
          if FullNameList[fullname] then
            ObjectResult=FullNameList[fullname]
            for k,v in ipairs(threadlist) do v.terminate() end
            return
          end
        end
      end
    end
  end
end

function StaticFindObjectAlgo(fullname)
 ue4parsetablecheck()
 if FullNameList[fullname] then return FullNameList[fullname]end
 local threadlist={}
 local k=1
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local ObjectId=UObject.ObjectId
 ObjectResult=nil
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess) do
    start=stop
    stop=stop+num
    if ObjectResult then break end
    threadlist[k]=createThread(FindObject(threadlist,ObjectId,GUObjectDict[i],size,i,start,stop-1,fullname))
    k=k+1
  end
 end
 local result=ObjectResult
 ObjectResult=nil
 return result
end

function registerFunc(ObjectId,address,size,i,start,stop)
  local funct=UObject.funct
  for j=start,stop do
    local pointer
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          local typ=string.sub(name,1,string.find(name,' ')-1)
          if typ=='Function' then
            local fullname=string.sub(name,string.find(name,' ')+1,name:len())
            local func=readPointer(pointer+funct)
            if func and func~=0 then extralist.addSymbol('UE',fullname,func,1)end
          end
        end
      end
    end
  end
end

function registerFuncAlgo()
 local funct=UObject.funct
 ue4parsetablecheck()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 if not enumUEObjIsRunning and UEObj then
   for i,v in ipairs(UEObj) do
     if v.Type=='Function' then
       local func=readPointer(v.Address+funct)
       if func and func~=0 then extralist.addSymbol('UE',v.FullName,func,1)end
     end
   end
 else
   local k=1
   local count=0x200
   local size=GUObjectsize
   local sizess= UE4ver&gt;2 and (targetIs64Bit() and 0x18*count or 0x10*count) or 0x4*count
   local ObjectId=UObject.ObjectId
   for i=1,#GUObjectDict do
    local num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      if ObjectResult then break end
      createThread(registerFunc(ObjectId,GUObjectDict[i],size,i,start,stop-1))
      k=k+1
    end
   end
 end
end

function isStructExist(name)
for i=0,getStructureCount()-1 do
if(getStructure(i).getName()==name)then return getStructure(i) end
end
return false
end

function deletestruct(name)
local count=getStructureCount()
local structure
for i=0,count-1 do
structure=getStructure(i)
if(structure.getName()==name)then structure.removeFromGlobalStructureList() break end
end end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function ue4determineversion()
 local address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]
 if address then findAddress('FNamePool',1,address) UE4ver=25 ue4parsetable() ue4config()
  local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
  if not address or address==0 then error('StaticFindObject not functioning as expected...')end
  UE4ver=nil
  local pointer=readPointer(address+UObject.member)
  if pointer then pointer=readPointer(pointer) if pointer then UE4ver=25 end end
  if not UE4ver then UE4ver=23 end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1]
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
  local address=readPointer('[[GUObjectArray+10]]+18')
  if address&gt;0x10000 then
   UE4ver=22
   ue4parsetable()
   ue4config()
   FNameStringAlgo(1,true)
   local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
   if not address or address==0 then error('StaticFindObject not functioning as expected...')end
   UE4ver=nil
   local pointer=readPointer(address+UObject.member)
   if pointer then pointer=readPointer(pointer) if pointer then UE4ver=22 end end
   if not UE4ver then UE4ver=20 end
  else UE4ver=18 end
 end
end


function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  local member,Offset,Property,bitmask,nextmember,super=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress
  local isUE425=UE4ver&gt;=25
  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end
  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    --print(GetFullNameAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=isUE425 and GetFullNameSafeAlgo(pointer) or GetFullNameAlgo(pointer)
      if PropName and string.find(PropName,' ') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then
            ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
            if not getElementByOffset(Struct,Off) then e=Struct.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
            end
            if Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end

  if Struct.Count==0 then return end
  if AddedOffset&gt;0 then return end

  if Struct.Element[Struct.Count-1].Offset&lt;=0x5000 then
    local count=Struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
        element1=Struct.Element[i]
        element2=Struct.Element[i+1]
        if element2 then
          bytesize=element1.Bytesize
          if bytesize&lt;4 then bytesize=4 end
          size=element2.Offset-element1.Offset-bytesize
          if size&gt;0 then
             if size%4&gt;0 then size=4-size%4+size end
             local start=element1.Offset
             if start%4&gt;0 then start=4-start%4+start
             else start=start+4 end
             size=size/4
             for j=0,size-1 do
               if (start+j*4)&gt;=(element1.Offset+bytesize) then
                 list[k]=start+j*4
                 k=k+1
               end
             end
           end
        end
      end
      for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
    end

    if isGlobal then Struct.addToGlobalStructureList()end
end

function getElementByOffset(struct,offset)
  for i=0,struct.Count-1 do
    if struct.Element[i].Offset==offset then return i end
  end
  return nil
end

function ue4createstructfast(fullnameortable,StructName,isGlobal,isfullname,structu,AddedOffset,AddedName)
  if StructName and isStructExist(StructName) and isGlobal then return end
  if not UEObj then enumUEObj() end
  local tabl=fullnameortable
  if type(fullnameortable)==type('') then
    for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
  end
  --[[
  if not tabl or type(tabl)~=type({})  then
    enumUEObj()
    if type(fullnameortable)==type('') then
      for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
    end
  end
  ]]
  if not tabl or type(tabl)~=type({})  then
    print(tostring(fullnameortable)..' not found...')
    return
  end
  local name=StructName
  if not name then name=tabl.Name end
  if not AddedOffset then AddedOffset=0 end
  local struct=structu
  if not struct then struct=createStructure(name)end
  if not AddedName then AddedName='' end
  --print(tostring(tabl))
  local isUserDefinedStruct=string.find(tabl.Type,'UserDefinedStruct')
  local e,typ,propname
  while(true)do
    if not tabl then break end
    if type(tabl)==type(1) or tabl.Name=='Object' then break end
    print(tostring(tabl.Type)..' '..tostring(tabl.FullName))
    if tabl.Member then
      for i=1,#tabl.Member do
        if tabl.Member[i].Type~='Function' then
          if isfullname then e.Name=string.format('%s %s%s',tabl.Member[i].Type,AddedName,tabl.Member[i].FullName)
          else
            propname=AddedName..tabl.Member[i].Name
            if isUserDefinedStruct then propname=propname:sub(1,string.find(propname,'_')-1) end
          end
          if tabl.Member[i].Type=='StructProperty' then
            ue4createstructfast(tabl.Member[i].Property,nil,nil,isfullname,struct,tabl.Member[i].Offset+AddedOffset,propname..'.')
            if not getElementByOffset(struct,tabl.Member[i].Offset+AddedOffset) then e=struct.addElement() e.Offset=tabl.Member[i].Offset+AddedOffset e.Name=propname e.Vartype=vtDword end
          else
            e=struct.addElement()
            e.Offset=tabl.Member[i].Offset+AddedOffset
            typ=tabl.Member[i].Type
            e.Name=propname
            e.Vartype=ue4type[typ]
            if e.Vartype==nil then e.Vartype=vtDword end
          --if typ=='StructProperty' then for i=2,(v.Size/4) do local f=struct.addElement() f.Offset=e.Offset+i*4-4 f.Name=e.Name..'_'..i f.Vartype=e.Vartype end e.Name=e.Name
            if typ=='ArrayProperty' then
              local f=struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              --[[
              if tabl.Member[i].Property.Name and tabl.Member[i].Property.Property.Name then
                local struc=createStructure(tabl.Member[i].Property.Name)
                ue4createstructfast(tabl.Member[i].Property.Property,isfullname and tabl.Member[i].Property.Property.FullName..'.' or tabl.Member[i].Property.Property.Name..'.',10,isfullname,struc)
                if struc.Count&gt;1 then e.ChildStruct=struc end
              end]]
            elseif typ=='BoolProperty' then e.ChildStructStart=tabl.Member[i].BitField end
          end
        end
      end
    end
    tabl=tabl.Parent
  end
  if struct.Count==0 then return end
  if AddedOffset&gt;0 then return end
  if struct.Element[struct.Count-1].Offset&lt;=0x5000 then
    local count=struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
      element1=struct.Element[i]
      element2=struct.Element[i+1]
      if element2 then
        bytesize=element1.Bytesize
        if bytesize&lt;4 then bytesize=4 end
        size=element2.Offset-element1.Offset-bytesize
        if size&gt;0 then
           if size%4&gt;0 then size=4-size%4+size end
           local start=element1.Offset
           if start%4&gt;0 then start=4-start%4+start
           else start=start+4 end
           size=size/4
           for j=0,size-1 do
             if (start+j*4)&gt;=(element1.Offset+bytesize) then
               list[k]=start+j*4
               k=k+1
             end
           end
        end
      end
    end
    for i,v in ipairs(list) do local e=struct.addElement() e.Offset=v e.Vartype=vtDword end
  end
  if isGlobal then struct.addToGlobalStructureList()end
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(Instance)

  if name then
   -- print('banana3')
    ue4createstructfast(fullname,nil,10,nil,Struct)
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName
    end
  end

  if not UEObj then enumUEObj() end
  for i=1,#UEObj do
    if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
       if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
         local name
         return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName
       end
    end
  end

  return address
end


function enumUEObjT(file,size,i,start,stop)
 local datatable,Address,FName,Name,FullName,typ,typ1,isProperty,l,pointer,stri,num,isPropertyc,EObj,k=0
 local Class,ObjectId,super,Offset,nextmember,member,propsize,bitmask,Property,Outer=UObject.Class,UObject.ObjectId,UObject.super,UObject.Offset,UObject.nextmember,UObject.member,UObject.propsize,UObject.bitmask,UObject.Property,UObject.Outer
 local UEver=UE4ver
 local pointersize= targetIs64Bit() and 8 or 4

 for j=start,stop do
    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      Address=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      Address=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      Address=byteTableToDword(datatable)
    end

    if Address and Address~=0 then
       objid=readInteger(Address+ObjectId)
       if objid then
          if objid&lt;size then
             FullName=GetFullNameAlgo(Address)

             if FullName then
               isProperty=false
               typ1=FullName:sub(1,string.find(FullName,' ')-1)
               FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
               if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len()) isProperty=true
               elseif string.find(FullName,'%.') then Name=FullName:sub(string.find(FullName,'%.')+1,FullName:len())
               else Name=FullName end
               if UEObjIndex[FullName] and UEObj[UEObjIndex[FullName]] then UEObj[UEObjIndex[FullName]].Address=Address
               else
                 EObj={}
                 EObj.Address=Address
                 EObj.Id=objid
                 EObj.Class=temp[readPointer(Address+Class)]
                 EObj.Type=typ1
                 EObj.FullName=FullName
                 EObj.Name=Name
                 if isProperty then
                   isProperty=readPointer(Address+Outer)
                   if isProperty and isProperty~=0 then
                     EObj.Outer=isProperty
                     EObj.Size=readInteger(Address+propsize)
                     EObj.Offset=readInteger(Address+Offset)
                     if typ1=='BoolProperty' then EObj.BitField=readBytes(Address+bitmask,1)
                     elseif typ1=='StructProperty' or typ1=='ObjectProperty' or typ1=='ArrayProperty' then EObj.Property=readPointer(Address+Property)end
                   else print(FullName..' nil outer')
                   end
                 end

                 Parent=readPointer(Address+super)
                 if Parent and Parent~=0 then EObj.Parent=Parent end
                 temp[Address]=EObj
                 if UEver&gt;=25 then
                   k=1
                   EObj.MemberSize=readInteger(Address+member+pointersize)
                   Address=readPointer(Address+member)
                   EObj.Member={}

                   while(true)do
                     if UEver&gt;=25 then FullName=GetFullNameSafeAlgo(Address)
                     else FullName=GetFullNameAlgo(Address) end
                     if not FullName then break end

                     typ=FullName:sub(1,string.find(FullName,' ')-1)
                     FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                     if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                     else Name=FullName end
                     EObj.Member[k]={}
                     EObj.Member[k].Address=Address
                     EObj.Member[k].Type=typ
                     EObj.Member[k].FullName=FullName
                     EObj.Member[k].Name=Name
                     EObj.Member[k].Size=readInteger(Address+propsize)
                     EObj.Member[k].Offset=readInteger(Address+Offset)
                     if typ=='BoolProperty' then EObj.Member[k].BitField=readBytes(Address+bitmask,1)
                     elseif typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' then EObj.Member[k].Property=readPointer(Address+Property)end
                     Address=readPointer(Address+nextmember)
                     k=k+1
                   end
                   if #EObj.Member==0 then EObj.Member=nil end
                 end
                 UEObj[#UEObj+1]=EObj
                 UEObjIndex[EObj.FullName]=#UEObj+1
               end
             end
          end
       end
    end
 end
--print(i..':'..k)
end

function enumUEObj(isSilent,isUpdateOnly)
 enumUEObjIsRunning=true
 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 if not isUpdateOnly then
   UEObj={}
   UEObjIndex={}
 end
 temp={}
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(enumUEObjT(file,size,i,start,stop-1))
  end
 end
 if not isUpdateOnly then
   if UE4ver&gt;=25 then
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Member then
         for j=1,#UEObj[i].Member do
           if UEObj[i].Member[j].Property then
             if temp[UEObj[i].Member[j].Property] then
               UEObj[i].Member[j].Property=temp[UEObj[i].Member[j].Property]
               local typ=UEObj[i].Member[j].Property.Type
               if typ and ( typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' ) then
                 typ=temp[readPointer(UEObj[i].Member[j].Property.Address+UObject.Property)]
                 if typ then
                   UEObj[i].Member[j].Property.Property=typ
                 end
               end
             end
           end
         end
       end
     end
   else
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Outer then
         if temp[UEObj[i].Outer]then
           if temp[UEObj[i].Property] then
             UEObj[i].Property=temp[UEObj[i].Property]
             local typ=UEObj[i].Property.Type
             if typ and ( typ=='StructProperty' or typ=='ObjectProperty' or typ=='ArrayProperty' ) then
               typ=temp[readPointer(UEObj[i].Property.Address+UObject.Property)]
               if typ then
                 UEObj[i].Property.Property=typ
               end
             end
           end
           if not temp[UEObj[i].Outer].Member then temp[UEObj[i].Outer].Member={}end
           temp[UEObj[i].Outer].Member[#temp[UEObj[i].Outer].Member+1]=UEObj[i]
         else print(UEObj[i].FullName..' missing outer') end
       end
     end
   end
 end
 temp=nil
 enumUEObjIsRunning=false
 if not isSilent then print(string.format('\nA Total of %u objects had been enumerated in %u seconds',#UEObj,os.time()-starttime))end
end



function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function UEfindInstancesOfClass(fullnameOrAddress)
  local class,address=UObject.Class
  if type(fullnameOrAddress)==type('')then address=StaticFindObjectAlgo(fullnameOrAddress)
  else address=fullnameOrAddress end
  local fname=readInteger(address+UObject.FNameIndex)
  local result=groupscan(string.format('%u:%u 4:%u',targetIs64Bit() and 8 or 4,address,fname))
  for i,v in ipairs(result) do result[i]=tonumber(v,16)-class end
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
if force~=nil
then state = not force
end
compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
getMainForm().Splitter1.Visible = state
getMainForm().Panel4.Visible = state
getMainForm().Panel5.Visible = state
end

function addCompactMenu()
if compactmenualreadyexists
then return end
local parent = getMainForm().Menu.Items
compactmenuitem = createMenuItem(parent)
parent.add(compactmenuitem)
compactmenuitem.Caption = 'Compact View Mode'
compactmenuitem.OnClick = cycleFullCompact
compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
local starttime=os.time()
ue4versioncheck()

if targetIs64Bit() then

 local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
 if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
 if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
 if not address then error('GUObjectArray aob not found...')end
 findAddress('GUObjectArray',1,address)

 ue4config()

 if UE4ver&gt;=23 then
   address=findAddress('FNamePool',0,'4C 8D 05 * * * * EB 16 48 8D 0D * * * * E8banana',process,nil,0,true)[1]
   if not address then address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]end
   if address then findAddress('FNamePool',1,address)
   else error('FNamePool aob not found...')end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
  if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
 end
 local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
 if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
 if not address then error('GEngine aob not found...')end
 findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)

else
 ue4config()
 if UE4ver&gt;2 then
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
  findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
 else
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
  findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
 end
end
print('AOBScan done : '..os.time()-starttime)
ue4parsetable()
--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

FNameStringAlgo(1,true)

print('Table parsing done : '..os.time()-starttime)
if UE4ver&gt;2 then

 createThread(ue4createstruct('/Script/Engine.GameEngine','GameEngine',1))
 createThread(ue4createstruct('/Script/Engine.GameViewportClient','GameViewportClient',0))

 createThread(ue4createstruct('/Script/Engine.GameInstance','GameInstance',0))
 createThread(ue4createstruct('/Script/Engine.LocalPlayer','LocalPlayer',1))
 createThread(ue4createstruct('/Script/Engine.PlayerController','PlayerController',2))
 createThread(ue4createstruct('/Script/Engine.CharacterMovementComponent','MovementComponent',0))
 createThread(ue4createstruct('/Script/Engine.CapsuleComponent','CapsuleComponent',3))
 createThread(ue4createstruct('/Script/Engine.Character','GPlayer',0))

 createThread(ue4createstruct('/Script/Engine.World','World',0))

end

print('All done : '..os.time()-starttime..'\n')
sleep(1000)
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26101</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end

 
 
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26102</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local Offset,ObjectId,nextmember,member,enumMul,Property=UObject.Offset,UObject.ObjectId,UObject.nextmember,UObject.member,UObject.enumMul,UObject.Property

function ue4dump(file,address,size,i,start,stop)
 local k=0
 local addy= targetIs64Bit() and 8 or 4
 local en= targetIs64Bit() and 0x40 or 0x2C
 local pointer,datatable,pointers,propname,offset,list,str,strid,name,objid
 for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
       local objid=readInteger(pointer+ObjectId)
       if objid then
          if objid&lt;size then
             str=string.format('%016X',pointer)
             strid=string.format('%08u',objid)
             name=GetFullNameSuperAlgo(pointer,true)
             if name then
                 typ=name:sub(1,string.find(name,' ')-1)
                 if string.find(typ,'Property') then
                     if (typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') ) and Property then
                       name=hasProperty(pointer)
                     end
                     strid=string.format('%8X',readInteger(pointer+Offset))
                 end

                 file:write(string.format('[%s] %s %s\n',strid,str,name))


                 if (typ=='UserDefinedEnum' or typ=='Enum') and enumMul then
                   list=pointer+en
                   for i=0,readInteger(list+8)-1 do
                     pointers=readPointer(list)+i*enumMul
                     offset=readBytes(pointers+addy,1)
                     if offset==0 then offset=i end
                     propname=FNameStringAlgo(pointers)
                     strid=string.format('%8X',offset)
                     str=string.format('%016X',pointers)
                     file:write(string.format('[%s] %s %s\n',strid,str,propname))
                   end
                 elseif typ=='MapProperty' and Property then
                   for n=0,1 do
                     pointers=readPointer(pointer+n*8+Property)
                     propname=hasProperty(pointers)
                     if propname then
                       offset=readInteger(pointers+Offset)
                       strid=string.format('%8X',offset)
                       str=string.format('%016X',pointers)
                       file:write(string.format('[%s] %s %s\n',strid,str,propname))
                     end
                   end
                 end

                 if UE4ver&gt;=25 then
                     local pointers= readPointer(pointer+member)
                     while(true)do
	                     propname=GetFullNameSafeAlgo(pointers)
	                     if not propname then break end
	                     offset=readInteger(pointers+Offset)
	                     strid=string.format('%8X',offset)
                         str=string.format('%016X',pointers)

                         typ=propname:sub(1,string.find(propname,' ')-1)
                         if typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') then
                           propname=hasProperty(pointers)
                         end

	                     file:write(string.format('[%s] %s %s\n',strid,str,propname))

                         if typ=='MapProperty' then
                           for n=0,1 do
                             pointer=readPointer(pointers+n*8+Property)
                             propname=hasProperty(pointer)
                             if propname then
                               offset=readInteger(pointer+Offset)
                               strid=string.format('%8X',offset)
                               str=string.format('%016X',pointer)
                               file:write(string.format('[%s] %s %s\n',strid,str,propname))
                             end
                           end
                         end

	                     pointers=readPointer(pointers+nextmember)
                     end
                 end
                 k=k+1
             end
          end
       end
    end
 end
    totalobject=totalobject+k
--print(i..':'..k)
end


 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] ObjectsDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
--local re={rei1,rei2,rei3,rei4,rei5}
 totalobject=0
--allobject=createStringlist()

 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(ue4dump(file,GUObjectDict[i],size,i,start,stop-1))
  end
 end


 file:close()
 print(string.format('\nA Total of %u objects had been dumped in %u seconds',totalobject,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26103</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26104</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26105</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26106</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26107</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26108</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26109</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26110</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26111</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26112</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26113</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26114</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26115</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26116</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26117</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



createThread(function()
print('------------------')
local isUnicode=true
local strlist,result,result2,result3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          print(strlist[i]..'&lt;-'..result[j])
          if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
            result2=pointerscan(getAddressSafe(result[j]))
            for k=1,#result2 do
              print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
              result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
              for l=1,#result3 do print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l]) end
            end
          end
        end
      end
    end
  end
end
print('done')
end)
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26118</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26119</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26120</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26122</ID>
          <Description>"Dumper V5"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26123</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}
 if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

    UObject.enumMul= 0x10

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A
    UObject.funct= 0xD8
    UObject.Property= 0x78

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
    UObject.funct= 0xC0
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
    UObject.funct= 0xB0
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
    UObject.enumMul= 0xC
  end

----------------------------
---------UE3 struct---------
--1.25
 elseif UE4ver&gt;=1 then
    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58
    UObject.enumMul= 0x8


--0.10246
 else
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70
 end

---------------------------
end


local ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then UE4ver=0 return end
--return info.minor
 UE4ver=tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local number,str,datatable
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end
 if not FName then return nil end
 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end
 local CFName=FName
 if UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)+1
  FName=(FName&amp;0xFFFF)*2
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  datatable={}
  for m=1,2 do
    datatable[m]=FNameDict[i][FName+m]
  end

  local le = byteTableToWord(datatable)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and FNameDict[i][FName+1]&amp;1==1 or false
  if widechar then
    datatable={}
    for m=1,le*2 do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToWideString(datatable)
  else
    datatable={}
    for m=1,le do
      datatable[m]=FNameDict[i][FName+2+m]
    end
    str=byteTableToString(datatable)
  end
 else
  local i
  if UEver&gt;2 then
   i=(FName&gt;&gt;0xE)+1
   FName=(FName&amp;0x3FFF)*(8-sub)
  else i=1 FName=FName*(8-sub) end
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  local pointer
  if targetIs64Bit() then
    datatable={}
    for m=1,8 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToQword(datatable)
  else
    datatable={}
    for m=1,4 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToDword(datatable)
  end
  if not pointer or pointer==0 then return nil end

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if FName==1 and not stringoffset or not stringoffsetid then
     str=readString(pointer+8,13)
     if str=='ByteProperty' then stringoffset=8
     else str=readString(pointer+0xC,13)
         if str=='ByteProperty' then stringoffset=0xC
         else str=readString(pointer+0x10,13)
             if str=='ByteProperty' then stringoffset=0x10 end
         end
     end

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  local widechar=true and readInteger(pointer+stringoffsetid)&amp;1==1 and UEver&gt;2 or false
  str= readString(pointer+stringoffset,200,widechar)
  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
   --print(string.format('%X',pointer+0xC))
 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 return str
end

function GetNameAlgo(object)
 if not object then return nil end
 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local fnameoffset=UObject.FNameIndex
 local typeoffset=UObject.Class
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 local str1=FNameStringAlgo(pointer+fnameoffset)
 local str2=FNameStringAlgo(object+fnameoffset)
 if not str2 then str2=FNameStringAlgo(object+fnameoffset-8)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end
 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafesAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end


function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafesAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i return end
      end
    end
  end
end


function FindStringFName(namestr)
  local size
  if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=stop
    stop=stop+num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1
  if UE4ver&gt;=25 then str1=GetFullNameSafeAlgo(object)
  else str1=GetFullNameAlgo(object) end
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    local str2 = GetFullNameAlgo(pointer)
    if not str2 then str2=GetFullNameSafeAlgo(pointer)end
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]

function ue4parsetable()
 FNameList={}
 ObjectList={}
 FullNameList={}
 sub=targetIs64Bit() and 0 or 4
 local pool=getAddressSafe('FNamePool')
 local pool2=getAddressSafe('GUObjectArray')
 if pool and pool2 then
  if UE4ver&gt;=20 then GUObjectsize=readInteger(getAddress('GUObjectArray+24')-(sub*2))
  elseif UE4ver&gt;11 then  GUObjectsize=readInteger('GUObjectArray+1C')
  else GUObjectsize=readInteger(getAddress('GUObjectArray+8')-(sub*2))
  end
  FNameDict={}
  GUObjectDict={}
  for i=0,500 do
   local pointer
   if UE4ver&gt;=23 then pointer=readPointer(pool+i*(8-sub)+0x10)
   elseif UE4ver&gt;2 then  pointer=readPointer(readPointer(pool)+i*(8-sub))
   else pointer=readPointer(pool+i*(8-sub)) end
   if pointer and pointer~=0 then
    local size=getregionsize(pointer)
    if not size or size==0 then break end
    FNameDict[i+1]=readBytes(pointer,size-1,true)
   else break
   end
  end
  for i=0,500 do
   if UE4ver&gt;=20 then
    pointer=readPointer(readPointer(pool2+0x10)+i*(8-sub))
    if pointer and pointer~=0 then
    --print(string.format('%X',pointer))
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break
    end
   elseif UE4ver&gt;11 then pointer=readPointer(pool2+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   elseif UE4ver&gt;2 then pointer=readPointer(readPointer(pool2)+i*8+0x10)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true)
    else break end
   else pointer=readPointer(pool2)
    if pointer and pointer~=0 then
     GUObjectDict[i+1]=readBytes(pointer,getregionsize(pointer)-1,true) break
    else break end
   end
  end
 end
end


function ue4parsetablecheck()
 if not FNameDict or not GUObjectDict then ue4parsetable()
 else
 local pointer,pointei,datatable,m
 if targetIs64Bit() then
   datatable={}
   for m=1,8 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToQword(datatable)
 else
   datatable={}
   for m=1,4 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToDword(datatable)
 end
 if UE4ver&gt;=20 then pointei=readPointer('[[GUObjectArray+10]]')
 elseif UE4ver&gt;11 then pointei=readPointer('[GUObjectArray+10]')
 elseif UE4ver&gt;2 then pointei=readPointer('[[GUObjectArray]+10]')
 else pointei=readPointer('[GUObjectArray]') end
 --print(string.format('%X',pointei))
 --print(string.format('%X',pointer))
 if pointei ~= pointer then ue4parsetable() end
 local GUObjectsizes
 if UE4ver&gt;=20 then GUObjectsizes=readInteger(getAddress('GUObjectArray+24')-(sub*2))
 elseif UE4ver&gt;11 then GUObjectsizes=readInteger('GUObjectArray+1C')
 else GUObjectsizes=readInteger(getAddress('GUObjectArray+8')-(sub*2)) end
 if GUObjectsizes~=GUObjectsize then ue4parsetable() end
 end
end

function FindObject(threadlist,ObjectId,address,size,i,start,stop,fullname)
  local pointer,datatable
  for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          name=string.sub(name,string.find(name,' ')+1,name:len())
          name=name:lower()
          if not FullNameList[name]then FullNameList[name]=pointer end
          if FullNameList[fullname] then
            ObjectResult=FullNameList[fullname]
            for k,v in ipairs(threadlist) do v.terminate() end
            return
          end
        end
      end
    end
  end
end

function StaticFindObjectAlgo(fullname)
 ue4parsetablecheck()
 fullname=fullname:lower()
 if FullNameList[fullname] then return FullNameList[fullname]end
 local threadlist={}
 local k=1
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local ObjectId=UObject.ObjectId
 ObjectResult=nil
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess) do
    start=stop
    stop=stop+num
    if ObjectResult then break end
    threadlist[k]=createThread(FindObject(threadlist,ObjectId,GUObjectDict[i],size,i,start,stop-1,fullname))
    k=k+1
  end
 end
 local result=ObjectResult
 ObjectResult=nil
 return result
end

function registerFunc(ObjectId,address,size,i,start,stop)
  local funct=UObject.funct
  for j=start,stop do
    local pointer

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameAlgo(pointer)
        if name and string.find(name,' ') then
          local typ=string.sub(name,1,string.find(name,' ')-1)
          if typ=='Function' then
            local fullname=string.sub(name,string.find(name,' ')+1,name:len())
            local func=readPointer(pointer+funct)
            if func and func~=0 then extralist.addSymbol('UE',fullname,func,1)end
          end
        end
      end
    end
  end
end

function registerFuncAlgo()
 local funct=UObject.funct
 ue4parsetablecheck()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 if not enumUEObjIsRunning and UEObj then
   for i,v in ipairs(UEObj) do
     if v.Type=='Function' then
       local func=readPointer(v.Address+funct)
       if func and func~=0 then extralist.addSymbol('UE',v.FullName,func,1)end
     end
   end
 else
   local k=1
   local count=0x200
   local size=GUObjectsize
   local sizess= UE4ver&gt;2 and (targetIs64Bit() and 0x18*count or 0x10*count) or 0x4*count
   local ObjectId=UObject.ObjectId
   for i=1,#GUObjectDict do
    local num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      if ObjectResult then break end
      createThread(registerFunc(ObjectId,GUObjectDict[i],size,i,start,stop-1))
      k=k+1
    end
   end
 end
end

function isStructExist(name)
  for i=1,#StructList do
    if StructList[i].Name==name then return StructList[i] end
  end
  return nil
end

function SaveAndRemoveStruct()
  StructList={}
  local count=getStructureCount()
  for i=count-1,0,-1 do
    local struct=getStructure(i)
    StructList[i+1]=struct
    struct:removeFromGlobalStructureList()
  end
end

function DeleteStruct(Struct)
  local count=#StructList
  for i=1,count do
    if Struct==StructList[i] then
      Struct:Destroy()
      StructList[i]=nil
    end
    if not StructList[i] and StructList[i+1] then
      StructList[i]=StructList[i+1]
      StructList[i+1]=nil
    end
  end
end

function LoadStruct()
  for i=1,#StructList do
    StructList[i]:addToGlobalStructureList()
  end
end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function ue4determineversion()
 local address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]
 if address then findAddress('FNamePool',1,address) UE4ver=25 ue4parsetable() ue4config()
  local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
  if not address or address==0 then error('StaticFindObject not functioning as expected...')end
  UE4ver=nil
  local pointer=readPointer(address+UObject.member)
  if pointer then pointer=readPointer(pointer) if pointer then UE4ver=25 end end
  if not UE4ver then UE4ver=23 end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1]
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
  local address=readPointer('[[GUObjectArray+10]]+18')
  if address&gt;0x10000 then
   UE4ver=22
   ue4parsetable()
   ue4config()
   FNameStringAlgo(1,true)
   local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
   if not address or address==0 then error('StaticFindObject not functioning as expected...')end
   UE4ver=nil
   local pointer=readPointer(address+UObject.member)
   if pointer then pointer=readPointer(pointer) if pointer then UE4ver=22 end end
   if not UE4ver then UE4ver=20 end
  else UE4ver=18 end
 end
end

function fillstruct4bytes(Struct)
  if not getElementByOffset(Struct,0) then local e=Struct.addElement() e.Offset=0 e.Vartype=vtDword end
  Struct.beginUpdate()
  local count=Struct.Count-1
  local list,k,element1,element2,size,bytesize={},1
  for i=0,count do
    element1=Struct.Element[i]
    element2=Struct.Element[i+1]
    if element2 then
      bytesize=element1.Bytesize
      if bytesize&lt;4 then bytesize=4 end
      size=element2.Offset-element1.Offset-bytesize
      if size&gt;0 then
        if size%4&gt;0 then size=4-size%4+size end
        local start=element1.Offset
        if start%4&gt;0 then start=4-start%4+start
        else start=start+4 end
        size=size/4
        for j=0,size-1 do
          if (start+j*4)&gt;=(element1.Offset+bytesize) then
            list[k]=start+j*4
            k=k+1
          end
        end
      end
    end
  end
  for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
  Struct.endUpdate()
end

function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName)
  if not FullNameOrAddress then return end
  if StructName and isGlobal then local Struct=isStructExist(StructName) if Struct then DeleteStruct(Struct)end end
  local member,Offset,Property,bitmask,nextmember,super,propsize=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super,UObject.propsize
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress
  local isUE425=UE4ver&gt;=25
  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end

  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end

  if not AddedName then AddedName='' end
  local RunningStructName=name
  if not AddedOffset then
    if not RunningStruct then RunningStruct={} end
    RunningStruct[#RunningStruct+1]=RunningStructName

    AddedOffset=0 Struct.beginUpdate()
  else
    local FullName=GetFullNameAlgo(Object)
    FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())

    if not LocalStruct then LocalStruct={}end
    if LocalStruct[FullName] then copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    else
      local copy=createStructure(FullName)
      ue4createstruct(Object,nil,nil,isfullname,copy)
      LocalStruct[FullName]=copy
      copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    end
    return
  end

  --print(string.format('%X',Object))
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    print(GetFullNameAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=isUE425 and GetFullNameSafeAlgo(pointer) or GetFullNameAlgo(pointer)
      if PropName and string.find(PropName,' ') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then
            ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
            if not getElementByOffset(Struct,Off) then e=Struct.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' or Typ=='MapProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              local isMap= Typ=='MapProperty'

              Prop=readPointer(pointer+Property)
              PropName=GetFullNameAlgo(Prop)
              if not PropName then PropName=GetFullNameSafeAlgo(Prop)end
              if PropName then
                Typ=PropName:sub(1,string.find(PropName,' ')-1)
                PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end
                if Typ=='StructProperty' then
                  Prop=readPointer(Prop+Property)
                  PropName=GetNameAlgo(Prop)
                  if PropName then
                    PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())..'[]'
                    --print(Typ..' '..PropName)
                  end
                else PropName=PropName..'[]' end
                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[PropName] then e.setChildStruct(ArrayStruct[PropName])
                else
                  local stru=createStructure(PropName)
                  ArrayStruct[PropName]=stru
                  e.setChildStruct(stru)

                  stru.beginUpdate()
                  for j=0,1 do
                    Prop=readPointer(pointer+Property+j*(8-sub))
                    PropName=GetFullNameAlgo(Prop)
                    if not PropName then PropName=GetFullNameSafeAlgo(Prop)end
                    if PropName then
                      Typ=PropName:sub(1,string.find(PropName,' ')-1)
                      --if Typ=='StructProperty' then print(PropName)end
                      PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                      if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end
                      local psize=isMap and 0x10 or readInteger(Prop+propsize)
                      local Offs=isMap and readInteger(Prop+Offset) or 0
                      local Propt
                      if Typ=='StructProperty' then
                        Propt=readPointer(Prop+Property)
                      end
                      for p=0,10 do
                        Off=p*psize+Offs
                        local ItemName=string.format('[%u] ',p)
                        if Typ=='StructProperty' then
                          ue4createstruct(Propt,nil,nil,isfullname,stru,Off,ItemName)
                          --if not getElementByOffset(stru,Off) then e=stru.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
                        else
                          local g=stru.addElement()
                          g.Offset=Off
                          g.Name=ItemName..PropName
                          if not ue4type[Typ] then g.Vartype=vtDword
                          else g.Vartype=ue4type[Typ]end
                        end
                      end
                    end
                  end
                  stru.endUpdate()
                  fillstruct4bytes(stru)
                end
              end
            elseif Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end
  if AddedOffset&gt;0 then return end
  Struct.endUpdate()
  fillstruct4bytes(Struct)
  if isGlobal then StructList[#StructList+1]=Struct end

  local count=#RunningStruct
  for i=1,count do
    if RunningStruct[i]==RunningStructName then RunningStruct[i]=nil end
    if not RunningStruct[i] and RunningStruct[i+1] then RunningStruct[i]=RunningStruct[i+1] RunningStruct[i+1]=nil end
  end
end

function getElementByOffset(struct,offset)
  for i=0,struct.Count-1 do
    if struct.Element[i].Offset==offset then return i end
  end
  return nil
end

function copyStruct(original,copy,AddedOffset,AddedName)
  if not copy then copy=createStructure(original.Name..'_copy')end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  copy.beginUpdate()
  for i=0,original.Count-1 do
    local e=copy.addElement()
    e.Offset=original.Element[i].Offset+AddedOffset
    if original.Element[i].Name=='' then e.Name=original.Element[i].Name
    else e.Name=AddedName..original.Element[i].Name end
    e.Vartype=original.Element[i].Vartype
    e.ChildStruct=original.Element[i].ChildStruct
    e.ChildStructStart=original.Element[i].ChildStructStart
    e.Bytesize=original.Element[i].Bytesize
  end
  copy.endUpdate()
  return copy
end

function ue4createstructfast(fullnameortable,StructName,isGlobal,isfullname,structu,AddedOffset,AddedName,depth,callernum)
  if not callernum then callernum=0 end
  if not depth then depth=10 end
  local depths=0
  callernum=callernum+1
  if callernum&gt;10 then return end
  if StructName and isGlobal then local struct=isStructExist(StructName) if struct then DeleteStruct(struct) end end
  if not UEObj then enumUEObj() end
  local tabl=fullnameortable
  if type(fullnameortable)==type('') then
    for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
  end
  --[[
  if not tabl or type(tabl)~=type({})  then
    enumUEObj()
    if type(fullnameortable)==type('') then
      for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
    end
  end
  ]]
  if not tabl or type(tabl)~=type({})  then
    print(tostring(fullnameortable)..' not found...')
    return
  end
  local name=StructName
  if not name then name=tabl.Name end
  local struct=structu
  if not struct then struct=createStructure(name)end
  if not AddedName then AddedName='' end
  local RunningStructName=name
  if not AddedOffset then
    if not RunningStruct then RunningStruct={} end
    RunningStruct[#RunningStruct+1]=RunningStructName

    AddedOffset=0 struct.beginUpdate()
  elseif tabl and tabl.FullName then
    if not LocalStruct then LocalStruct={}end
    if LocalStruct[tabl.FullName] then copyStruct(LocalStruct[tabl.FullName],struct,AddedOffset,AddedName)
    else
      local copy=createStructure(tabl.FullName)
      ue4createstructfast(tabl,nil,nil,isfullname,copy)
      LocalStruct[tabl.FullName]=copy
      copyStruct(LocalStruct[tabl.FullName],struct,AddedOffset,AddedName)
    end
    return
  end

  --print(tostring(tabl))
  local isUserDefinedStruct=string.find(tabl.Type,'UserDefinedStruct')
  local e,typ,propname
  while(true)do
    if not tabl then break end
    if type(tabl)==type(1) or tabl.Name=='Object' then break end
    print(tostring(tabl.Type)..' '..tostring(tabl.FullName))
    if tabl.Member then
      for i=1,#tabl.Member do
        if tabl.Member[i].Type~='Function' then
          if isfullname then e.Name=string.format('%s %s%s',tabl.Member[i].Type,AddedName,tabl.Member[i].FullName)
          else
            propname=AddedName..tabl.Member[i].Name
            if isUserDefinedStruct then propname=propname:sub(1,string.find(propname,'_')-1) end
          end
          if tabl.Member[i].Type=='StructProperty' then
            ue4createstructfast(tabl.Member[i].Property,nil,nil,isfullname,struct,tabl.Member[i].Offset+AddedOffset,propname..'.',depth,callernum)
            if not getElementByOffset(struct,tabl.Member[i].Offset+AddedOffset) then e=struct.addElement() e.Offset=tabl.Member[i].Offset+AddedOffset e.Name=propname e.Vartype=vtDword end
          else
            e=struct.addElement()
            e.Offset=tabl.Member[i].Offset+AddedOffset
            typ=tabl.Member[i].Type
            e.Name=propname
            e.Vartype=ue4type[typ]
            if e.Vartype==nil then e.Vartype=vtDword end
            if typ=='ArrayProperty' or typ=='MapProperty' then
              local isMap= Typ=='MapProperty'
              local Typ=tabl.Member[i].Property[1].Type
              if Typ=='StructProperty' then propname=tabl.Member[i].Property[1].Property.Name..'[]'
              else propname=tabl.Member[i].Property[1].Name..'[]' end
              if not ArrayStruct then ArrayStruct={} end
              if ArrayStruct[propname] then e.setChildStruct(ArrayStruct[propname])
              else
                local stru=createStructure(propname)
                stru.beginUpdate()
                for p=1,#tabl.Member[i].Property do
                  local PropName=tabl.Member[i].Property[p].Name
                  local Typ=tabl.Member[i].Property[p].Type
                  local psize=isMap and 0x10 or tabl.Member[i].Property[p].Size
                  local Offs=isMap and tabl.Member[i].Property[p].Offset or 0
                  for l=0,10 do
                    Off=l*psize+Offs
                    local ItemName=string.format('[%u] ',l)
                    if Typ=='StructProperty' then
                      ue4createstructfast(tabl.Member[i].Property[p].Property,nil,nil,isfullname,stru,Off,ItemName,depth,callernum)
                      --if not getElementByOffset(stru,Off) then g=stru.addElement() g.Offset=Off g.Name=ItemName..PropName g.Vartype=vtDword end
                    else
                      g=stru.addElement()
                      g.Offset=Off
                      g.Name=ItemName..PropName
                      if not ue4type[Typ] then g.Vartype=vtDword
                      else g.Vartype=ue4type[Typ]end
                    end
                  end
                end
                stru.endUpdate()
                if stru.Count&gt;1 then
                  fillstruct4bytes(stru)
                  e.setChildStruct(stru)
                  ArrayStruct[propname]=stru
                else stru:Destroy()end
              end

              local f=struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
            elseif typ=='BoolProperty' then e.ChildStructStart=tabl.Member[i].BitField end
          end
        end
      end
    end
    depths=depths+1
    if depths&gt;depth then break end
    tabl=tabl.Parent
  end
  if AddedName~='' then return end
  struct.endUpdate()

  fillstruct4bytes(struct)
  if isGlobal then StructList[#StructList+1]=struct end

  local count=#RunningStruct
  for i=1,count do
    if RunningStruct[i]==RunningStructName then RunningStruct[i]=nil end
    if not RunningStruct[i] and RunningStruct[i+1] then RunningStruct[i]=RunningStruct[i+1] RunningStruct[i+1]=nil end
  end
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname,class
  address,name,fullname,class=ue_findRealStartOfObject(Instance)

  if class then
   -- print('banana3')
    --if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then ue4createstructfast(fullname,nil,nil,nil,Struct) end
    SaveAndRemoveStruct()
    ue4createstruct(class,nil,nil,nil,Struct)
    LoadStruct()
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_SymbolLookupCallback(symbol)
  --print('banana1')
  local str='Function '
  if string.find(symbol,str) then
    symbol=symbol:sub(string.find(symbol,str)+str:len(),symbol:len())
    local pointer=StaticFindObjectAlgo(symbol)
    if pointer then return readPointer(pointer+UObject.funct)end
  end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName,pointer
    end
  end

  if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then
    for i=1,#UEObj do
      if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
         if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
           local name
           return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName,UEObj[i].Class.Address
         end
      end
    end
  end

  return address
end


function enumUEObjT(file,size,i,start,stop)
 local datatable,Address,FName,Name,FullName,typ,typ1,isProperty,l,pointer,stri,num,isPropertyc,EObj,k=0
 local Class,ObjectId,super,Offset,nextmember,member,propsize,bitmask,Property,Outer=UObject.Class,UObject.ObjectId,UObject.super,UObject.Offset,UObject.nextmember,UObject.member,UObject.propsize,UObject.bitmask,UObject.Property,UObject.Outer
 local UEver=UE4ver
 local pointersize= targetIs64Bit() and 8 or 4

 for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      Address=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      Address=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      Address=byteTableToDword(datatable)
    end

    if Address and Address~=0 then
       objid=readInteger(Address+ObjectId)
       if objid then
          if objid&lt;size then
             FullName=GetFullNameAlgo(Address)

             if FullName then
               isProperty=false
               typ1=FullName:sub(1,string.find(FullName,' ')-1)
               FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
               if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len()) isProperty=true
               elseif string.find(FullName,'%.') then Name=FullName:sub(string.find(FullName,'%.')+1,FullName:len())
               else Name=FullName end
               if UEObjIndex[FullName] and UEObj[UEObjIndex[FullName]] then UEObj[UEObjIndex[FullName]].Address=Address
               else
                 EObj={}
                 EObj.Address=Address
                 EObj.Id=objid
                 EObj.Class=temp[readPointer(Address+Class)]
                 EObj.Type=typ1
                 EObj.FullName=FullName
                 EObj.Name=Name
                 if isProperty then
                   isProperty=readPointer(Address+Outer)
                   if isProperty and isProperty~=0 then
                     EObj.Outer=isProperty
                     EObj.Size=readInteger(Address+propsize)
                     EObj.Offset=readInteger(Address+Offset)
                     if typ1=='BoolProperty' then EObj.BitField=readBytes(Address+bitmask,1)
                     elseif typ1=='StructProperty' or typ1=='ObjectProperty' then EObj.Property=readPointer(Address+Property)
                     elseif typ1=='MapProperty' or typ1=='ArrayProperty' then
                       EObj.Property={}
                       local count= typ1=='MapProperty' and 1 or 0
                       for p=0,count do
                         local prop=readPointer(Address+Property+p*8)
                         FullName=GetFullNameAlgo(prop)
                         if not FullName then FullName=GetFullNameSafeAlgo(prop)end
                         if FullName then
                           typ=FullName:sub(1,string.find(FullName,' ')-1)
                           FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                           if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                           else Name=FullName end
                           if string.find(Name,'%:') then Name=Name:sub(string.find(Name,'%:')+1,Name:len())end
                           local Prop={}
                           Prop.Address=prop
                           Prop.Type=typ
                           Prop.FullName=FullName
                           Prop.Name=Name
                           Prop.Size=readInteger(prop+propsize)
                           Prop.Offset=readInteger(prop+Offset)
                           if typ=='BoolProperty' then Prop.BitField=readBytes(prop+bitmask,1)
                           elseif typ=='StructProperty' or typ=='ObjectProperty' then Prop.Property=readPointer(prop+Property)end
                           EObj.Property[p+1]=Prop
                         end
                       end
                     end
                   else print(FullName..' nil outer')
                   end
                 end

                 Parent=readPointer(Address+super)
                 if Parent and Parent~=0 then EObj.Parent=Parent end
                 temp[Address]=EObj
                 if UEver&gt;=25 then
                   k=1
                   EObj.MemberSize=readInteger(Address+member+pointersize)
                   Address=readPointer(Address+member)
                   EObj.Member={}

                   while(true)do
                     if UEver&gt;=25 then FullName=GetFullNameSafeAlgo(Address)
                     else FullName=GetFullNameAlgo(Address) end
                     if not FullName then break end

                     typ=FullName:sub(1,string.find(FullName,' ')-1)
                     FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                     if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                     else Name=FullName end
                     EObj.Member[k]={}
                     EObj.Member[k].Address=Address
                     EObj.Member[k].Type=typ
                     EObj.Member[k].FullName=FullName
                     EObj.Member[k].Name=Name
                     EObj.Member[k].Size=readInteger(Address+propsize)
                     EObj.Member[k].Offset=readInteger(Address+Offset)
                     if typ=='BoolProperty' then EObj.Member[k].BitField=readBytes(Address+bitmask,1)
                     elseif typ=='StructProperty' or typ=='ObjectProperty' then EObj.Member[k].Property=readPointer(Address+Property)
                     elseif typ=='MapProperty' or typ=='ArrayProperty' then
                       EObj.Member[k].Property={}
                       for p=0,1 do
                         local prop=readPointer(Address+Property+p*8)
                         FullName=GetFullNameAlgo(prop)
                         if not FullName then FullName=GetFullNameSafeAlgo(prop)end
                         if FullName then
                           typ=FullName:sub(1,string.find(FullName,' ')-1)
                           FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                           if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                           else Name=FullName end
                           if string.find(Name,'%:') then Name=Name:sub(string.find(Name,'%:')+1,Name:len())end
                           local Prop={}
                           Prop.Address=prop
                           Prop.Type=typ
                           Prop.FullName=FullName
                           Prop.Name=Name
                           Prop.Size=readInteger(prop+propsize)
                           Prop.Offset=readInteger(prop+Offset)
                           if typ=='BoolProperty' then Prop.BitField=readBytes(prop+bitmask,1)
                           elseif typ=='StructProperty' or typ=='ObjectProperty' then local propt=readPointer(prop+Property) if propt then Prop.Property=propt end end
                           EObj.Member[k].Property[p+1]=Prop
                         end
                       end
                       if #EObj.Member[k].Property==0 then EObj.Member[k].Property=nil end
                     end
                     Address=readPointer(Address+nextmember)
                     k=k+1
                   end
                   if #EObj.Member==0 then EObj.Member=nil end
                 end
                 UEObj[#UEObj+1]=EObj
                 UEObjIndex[EObj.FullName]=#UEObj+1
               end
             end
          end
       end
    end
 end
--print(i..':'..k)
end

function enumUEObj(isSilent,isUpdateOnly)
 if isUpdateOnly then enumUEObjIsUpdateOnly=true end
 enumUEObjIsRunning=true
 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 if not isUpdateOnly then
   UEObj={}
   UEObjIndex={}
 end
 temp={}
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(enumUEObjT(file,size,i,start,stop-1))
  end
 end
 if not isUpdateOnly then
   if UE4ver&gt;=25 then
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Member then
         for j=1,#UEObj[i].Member do
           if UEObj[i].Member[j].Property then
             if temp[UEObj[i].Member[j].Property] then
               UEObj[i].Member[j].Property=temp[UEObj[i].Member[j].Property]
             elseif type(UEObj[i].Member[j].Property)==type({}) then
               for p=1,#UEObj[i].Member[j].Property do
                 if temp[UEObj[i].Member[j].Property[p].Property] then
                   UEObj[i].Member[j].Property[p].Property=temp[UEObj[i].Member[j].Property[p].Property]
                 elseif UEObj[i].Member[j].Property[p].Property then print(string.format('%X no object?',UEObj[i].Member[j].Property[p].Property))
                 elseif UEObj[i].Member[j].Property[p].Type=='StructProperty' or UEObj[i].Member[j].Property[p].Type=='ObjectProperty' then print(string.format('%s %s no property?',UEObj[i].Member[j].Property[p].Type,UEObj[i].Member[j].Property[p].FullName))
                 end
               end
             end
           end
         end
       end
     end
   else
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Outer then
         if temp[UEObj[i].Outer]then
           if temp[UEObj[i].Property] then
             UEObj[i].Property=temp[UEObj[i].Property]
           elseif type(UEObj[i].Property)==type({}) then
             for p=1,#UEObj[i].Property do
               if temp[UEObj[i].Property[p].Property] then
                 UEObj[i].Property[p].Property=temp[UEObj[i].Property[p].Property]
               else print(string.format('%X no object?',UEObj[i].Property[p].Property))
               end
             end
           end
           if not temp[UEObj[i].Outer].Member then temp[UEObj[i].Outer].Member={}end
           temp[UEObj[i].Outer].Member[#temp[UEObj[i].Outer].Member+1]=UEObj[i]
         else print(UEObj[i].FullName..' missing outer') end
       end
     end
   end
 end
 temp=nil
 enumUEObjIsUpdateOnly=false
 enumUEObjIsRunning=false
 if not isSilent then print(string.format('\nA Total of %u objects had been enumerated in %u seconds',#UEObj,os.time()-starttime))end
end



function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function UEfindInstancesOfClass(fullnameOrAddress)
  local class,address=UObject.Class
  if type(fullnameOrAddress)==type('')then address=StaticFindObjectAlgo(fullnameOrAddress)
  else address=fullnameOrAddress end
  local fname=readInteger(address+UObject.FNameIndex)
  local result=groupscan(string.format('%u:%u 4:%u',targetIs64Bit() and 8 or 4,address,fname))
  for i,v in ipairs(result) do result[i]=tonumber(v,16)-class end
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
if force~=nil
then state = not force
end
compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
getMainForm().Splitter1.Visible = state
getMainForm().Panel4.Visible = state
getMainForm().Panel5.Visible = state
end

function addCompactMenu()
if compactmenualreadyexists
then return end
local parent = getMainForm().Menu.Items
compactmenuitem = createMenuItem(parent)
parent.add(compactmenuitem)
compactmenuitem.Caption = 'Compact View Mode'
compactmenuitem.OnClick = cycleFullCompact
compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
local starttime=os.time()
ue4versioncheck()

if targetIs64Bit() then

 local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
 if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
 if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
 if not address then error('GUObjectArray aob not found...')end
 findAddress('GUObjectArray',1,address)

 ue4config()

 if UE4ver&gt;=23 then
   address=findAddress('FNamePool',0,'4C 8D 05 * * * * EB 16 48 8D 0D * * * * E8banana',process,nil,0,true)[1]
   if not address then address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]end
   if address then findAddress('FNamePool',1,address)
   else error('FNamePool aob not found...')end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
  if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
 end
 local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
 if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
 if not address then error('GEngine aob not found...')end
 findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)

else
 ue4config()
 if UE4ver&gt;2 then
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
  findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
 else
  findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
  findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
 end
end
print('AOBScan done : '..os.time()-starttime)
ue4parsetable()
--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

FNameStringAlgo(1,true)

print('Table parsing done : '..os.time()-starttime)

if UE4ver&gt;2 then

-- createThread(function()
   SaveAndRemoveStruct()

   createThread(ue4createstruct('/Script/Engine.GameEngine','GameEngine',1))
   createThread(ue4createstruct('/Script/Engine.GameViewportClient','GameViewportClient',0))
   createThread(ue4createstruct('/Script/Engine.GameInstance','GameInstance',0))
   createThread(ue4createstruct('/Script/Engine.LocalPlayer','LocalPlayer',1))
   createThread(ue4createstruct('/Script/Engine.PlayerController','PlayerController',2))
   createThread(ue4createstruct('/Script/Engine.CharacterMovementComponent','MovementComponent',0))
   createThread(ue4createstruct('/Script/Engine.CapsuleComponent','CapsuleComponent',3))
   createThread(ue4createstruct('/Script/Engine.Character','GPlayer',0))
   createThread(ue4createstruct('/Script/Engine.World','World',0))

 local RunningStructCounter=0
 while(true)do
   if #RunningStruct==0 then break
   else sleep(1)end
   RunningStructCounter=RunningStructCounter+1
   if RunningStructCounter&gt;180000 then break end
 end


   LoadStruct()
-- end)

end

print('All done : '..os.time()-starttime..'\n')
if not ue_SymbolLookupCallbackID then
  ue_SymbolLookupCallbackID=registerSymbolLookupCallback(ue_SymbolLookupCallback,slNotSymbol)
end
--registerFuncAlgo()
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbolLookupCallback(ue_SymbolLookupCallbackID)
ue_SymbolLookupCallbackID=nil
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26124</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end

UEObjt=createThread(function()
  while(true)do
    if not UEObj and not enumUEObjIsRunning then enumUEObj(1)
    elseif not enumUEObjIsRunning then enumUEObj(1,1)end
    sleep(30000)
  end
end)
 
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil

UEObjt:terminate()
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26125</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local Offset,ObjectId,nextmember,member,enumMul,Property=UObject.Offset,UObject.ObjectId,UObject.nextmember,UObject.member,UObject.enumMul,UObject.Property

function ue4dump(file,address,size,i,start,stop)
 local k=0
 local addy= targetIs64Bit() and 8 or 4
 local en= targetIs64Bit() and 0x40 or 0x2C
 local pointer,datatable,pointers,propname,offset,list,str,strid,name,objid
 for j=start,stop do

    if UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
       local objid=readInteger(pointer+ObjectId)
       if objid then
          if objid&lt;size then
             str=string.format('%016X',pointer)
             strid=string.format('%08u',objid)
             name=GetFullNameSuperAlgo(pointer,true)
             if name then
                 typ=name:sub(1,string.find(name,' ')-1)
                 if string.find(typ,'Property') then
                     if (typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') ) and Property then
                       name=hasProperty(pointer)
                     end
                     strid=string.format('%8X',readInteger(pointer+Offset))
                 end

                 file:write(string.format('[%s] %s %s\n',strid,str,name))


                 if (typ=='UserDefinedEnum' or typ=='Enum') and enumMul then
                   list=pointer+en
                   for i=0,readInteger(list+8)-1 do
                     pointers=readPointer(list)+i*enumMul
                     offset=readBytes(pointers+addy,1)
                     if offset==0 then offset=i end
                     propname=FNameStringAlgo(pointers)
                     strid=string.format('%8X',offset)
                     str=string.format('%016X',pointers)
                     file:write(string.format('[%s] %s %s\n',strid,str,propname))
                   end
                 elseif ( typ=='MapProperty' or string.find(typ,'ArrayProperty') ) and Property then
                   for n=0,1 do
                     pointers=readPointer(pointer+n*8+Property)
                     propname=hasProperty(pointers)
                     if propname then
                       offset=readInteger(pointers+Offset)
                       strid=string.format('%8X',offset)
                       str=string.format('%016X',pointers)
                       file:write(string.format('[%s] %s %s\n',strid,str,propname))
                     end
                   end
                 end

                 if UE4ver&gt;=25 then
                     local pointers= readPointer(pointer+member)
                     while(true)do
	                     propname=GetFullNameSafeAlgo(pointers)
	                     if not propname then break end
	                     offset=readInteger(pointers+Offset)
	                     strid=string.format('%8X',offset)
                         str=string.format('%016X',pointers)

                         typ=propname:sub(1,string.find(propname,' ')-1)
                         if typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') then
                           propname=hasProperty(pointers)
                         end

	                     file:write(string.format('[%s] %s %s\n',strid,str,propname))


                         if typ=='MapProperty' or string.find(typ,'ArrayProperty') then
                           for n=0,2 do
                             pointer=readPointer(pointers+n*8+Property)
                             propname=hasProperty(pointer)
                             if propname then
                               offset=readInteger(pointer+Offset)
                               strid=string.format('%8X',offset)
                               str=string.format('%016X',pointer)
                               file:write(string.format('[%s] %s %s\n',strid,str,propname))
                             end
                           end
                         end

	                     pointers=readPointer(pointers+nextmember)
                     end
                 end
                 k=k+1
             end
          end
       end
    end
 end
    totalobject=totalobject+k
--print(i..':'..k)
end


 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] ObjectsDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
--local re={rei1,rei2,rei3,rei4,rei5}
 totalobject=0
--allobject=createStringlist()

 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(ue4dump(file,GUObjectDict[i],size,i,start,stop-1))
  end
 end


 file:close()
 print(string.format('\nA Total of %u objects had been dumped in %u seconds',totalobject,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26126</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26127</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26128</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26129</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26130</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26131</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26132</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26133</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26134</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26135</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26136</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26137</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26138</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26139</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26140</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



createThread(function()
print('------------------')
local isUnicode=true
local strlist,result,result2,result3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          print(strlist[i]..'&lt;-'..result[j])
          if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
            result2=pointerscan(getAddressSafe(result[j]))
            for k=1,#result2 do
              print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
              result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
              for l=1,#result3 do print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l]) end
            end
          end
        end
      end
    end
  end
end
print('done')
end)
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26141</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26142</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26143</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26144</ID>
          <Description>"Dumper V6"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26145</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}

 --if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A
    UObject.funct= 0xD8
    UObject.Property= 0x78

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
    UObject.funct= 0xC0
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
    UObject.funct= 0xB0
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70-(sub*8)

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
  end

----------------------------
---------UE3 struct---------
--1.25
--[[
 elseif UE4ver&gt;=1 then

    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58

]]
--0.10246
 else
 --[[
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70]]

 end

---------------------------
end


ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 --if true then return 0 end
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then return 0 end
 return tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local number,str,datatable
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end


 if not FName then return nil end

 if isMassEffect then
   local i=(FName&gt;&gt;0x1D)&amp;7
   FName=FName&amp;0x1FFFFFFF
   --[[
   datatable={}
   for m=1,100 do
     datatable[m]=FNameDict[1+i][FName+m+stringoffset]
   end
   str= byteTableToString(datatable)]]
   str=readString(readPointer(getAddress('FNamePool')+i*8)+FName+stringoffset)
   return str
 end

 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end

 local CFName=FName

 if readPointer(FNameString) then
   if not FNameStringStub then FNameStringStub=createExecuteCodeExStub(0,FNameString,0,0)end
   if not FNameStringRE then FNameStringRE=createRemoteExecutor()end

   if not mem then mem=allocateMemory(0x100)end
   writeQword(mem+0x50+UObject.FNameIndex,FName)
   FNameStringRE.executeStub(FNameStringStub,{mem+0x50,mem})
   str=readPointer(mem)
   if str then str=readString(str,readInteger(mem+0x8)*2,true) end
   --deAlloc(mem)

 elseif UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)+1
  FName=(FName&amp;0xFFFF)*2
  if i&gt;#FNameDict or FName&gt;#FNameDict[i] then return nil end
  datatable={}
  for m=1,2 do
    datatable[m]=FNameDict[i][FName+m]
  end

  local le = byteTableToWord(datatable)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and FNameDict[i][FName+1]&amp;1==1 or false
  --print(FName)
  if CFName==3 and not stringoffset then
    for k=2,0x20,2 do
      datatable={}
      for m=1,le do
        datatable[m]=FNameDict[i][FName+k+m]
      end
      if byteTableToString(datatable)=='ByteProperty' then stringoffset=k break end
      --print(k)
    end
  end

  if not stringoffset then return end

  if widechar then
    datatable={}
    for m=1,le*2 do
      datatable[m]=FNameDict[i][FName+stringoffset+m]
    end
    str=byteTableToWideString(datatable)
  else
    datatable={}
    for m=1,le do
      datatable[m]=FNameDict[i][FName+stringoffset+m]
    end
    str=byteTableToString(datatable)
  end
 else
  local i

  if FNamePool2 then FName= FName &lt;0x25A and readInteger(FName*4+FNamePool) or FName

  --[[
  elseif UEver&gt;2 then
   i=(FName&gt;&gt;0xE)+1
   FName=(FName&amp;0x3FFF)*(8-sub)
  else i=1 FName=FName*(8-sub) end]]
  else
    i=UEver&gt;7 and (FName&gt;&gt;0xE)+1 or 1
    FName= (UEver&gt;7 and (FName&amp;0x3FFF) or FName) *  (8-sub)
  end

  if FNameDict and (i&gt;#FNameDict or ( FNameDict[i] and FName&gt;#FNameDict[i]) ) then return nil end

  local pointer
  if FNamePool2 then

    pointer=readPointer(FNamePool2)+FName

  elseif targetIs64Bit() then
    datatable={}
    for m=1,8 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToQword(datatable)
  else
    datatable={}
    for m=1,4 do
      datatable[m]=FNameDict[i][FName+m]
    end
    pointer=byteTableToDword(datatable)
  end

  if not readPointer(pointer) then return nil end
  local pointers,pointers2=pointer
  if stringoffset2 then pointer=readPointer(pointer+stringoffset2)end
  pointers2=pointer

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if CFName==1 and (not stringoffset or not stringoffsetid) then

     for k=0,0x30,4 do
        str=readString(pointer+k,13)
        if str=='ByteProperty' then stringoffset=k break end
      end

      if not stringoffset then
        for k=0,0x30,4 do
          str=readString(pointer+k,13*2,true)
          if str=='ByteProperty' then stringoffset=k forcewidechar=true break end
        end
      end

      pointer=pointers

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  if not stringoffset then return end
  --print(string.format('%X',pointer))

  pointer=pointers

  local widechar=stringoffsetid and (readInteger(pointer+stringoffsetid)&amp;1==1 or false) or false

  pointer=pointers2

  if stringoffset2 and not readPointer(pointer) then pointer=pointers+stringoffset2 end

  widechar= forcewidechar and true or widechar

  str= readString(pointer+stringoffset,200,widechar)

  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
  --print(stringoffset)


 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 --print(str)
 return str
end

function GetNameAlgo(object)
 if not object then return nil end
 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local fnameoffset=UObject.FNameIndex
 local typeoffset=UObject.Class
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 local str1=FNameStringAlgo(readInteger(pointer+fnameoffset),true)
 --if readInteger(pointer+fnameoffset+4)~=0 then return nil end

 local str2=FNameStringAlgo(object+fnameoffset)
 if not str2 then str2=FNameStringAlgo(object+fnameoffset-8)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end
 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameSafeAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameSafeAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafesAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end


function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local str= GetFullNameAlgo(object)
 if str then return str end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafesAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop,isNoIndex)
  local acclen=0
  for i=start,stop do
    local name=FNameStringAlgo(i+acclen,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i+acclen return end
        if isNoIndex then acclen=acclen+name:len()end
      end
    end
  end
end


function FindStringFName(namestr,isNoIndex)
  local size
  if FNamePool2 then size=readInteger(FNamePool2+8)

  elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=i*num
    stop=(i+1)*num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1,isNoIndex))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1,str2
  str1=GetFullNameSafeAlgo(object)
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    str2=GetFullNameSafeAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress,i
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]
sub=targetIs64Bit() and 0 or 4

function ue4parsetableFNamePool()
  BasicEnumObject_running=nil
  ObjectTable={}
  ObjectList={}
  FullNameList={}
  FNameList={}
  if readPointer(FNameString) or string.find(process,'StateOfDecay2')then return end
  local pool=getAddressSafe('FNamePool')
  if pool then
    local pointer,pointers
    if not readPointer(readPointer(pool)) then pointer=pool+0x10
    else
      pointer=pool
      if readPointer(readPointer(readPointer(pointer)))then
        if readPointer(readPointer(readPointer(readPointer(pointer))))then
          pointer=readPointer(pointer)
        end
      end
    end
    if not readPointer(pointer)then pointer=readPointer(pool2+0x10)end
    FNameDict={}
    local j=0
    for i=0,500 do
      pointers=readPointer(pointer+i*(8-sub))
      if readPointer(pointers) then
        FNameDict[i+1]=readBytes(pointers,getregionsize(pointers)-1,true)
      else j=j+1 end
      if j&gt;5 then break end
    --[[
     local pointer
     if UE4ver&gt;=23 then pointer=readPointer(pool+i*(8-sub)+0x10)
     elseif UE4ver&gt;2 then  pointer=readPointer(readPointer(pool)+i*(8-sub))
     else pointer=readPointer(pool+i*(8-sub)) end
     if pointer and pointer~=0 then
       local size=getregionsize(pointer)
       if not size or size==0 then break end
       FNameDict[i+1]=readBytes(pointer,size-1,true)
     else break
     end]]

    end
  end
end

function ue4parsetable()
 local size=targetIs64Bit() and 8 or 4
 ue4parsetableFNamePool()
 local pool2=getAddressSafe('GUObjectArray')
 if pool2 then
  GUObjectDict={}
  if NOGUObjectsize then GUObjectsize=0xFFFFFFFF GUObjectDict[1]=readBytes(pool2,getregionsize(pool2)-1,true) return end


  local pointer,pointers=readPointer(pool2)
  GUObjectsize=readInteger(pool2+size)
  if not readPointer(pointer)then GUObjectsize=readInteger(pool2+0x10+size*2) pointer=readPointer(pool2+0x10)end
  if not readPointer(readPointer(pointer)) then pointer=pointer+0x10 end


  --if GetFullNameSafeAlgo(readPointer(pointer)) then pointer=pool2 end
  if not readPointer(readPointer(readPointer(readPointer(readPointer(pointer))))) then pointer=pool2 end

  --[[
  local pointerss=readPointer(pointer)
  for i=size,0x50,4 do
    if readPointer(pointerss+i) and readPointer(readPointer(readPointer(pointerss+i))) then UObjectMul=i break end
  end
]]
  local j=0
  for i=0,500 do
    pointers=readPointer(pointer+i*(8-sub))
    if readPointer(pointers) then
      GUObjectDict[#GUObjectDict+1]=readBytes(pointers,getregionsize(pointers)-1,true)
    else j=j+1 end
    if j&gt;5 then break end
  end
--[[
  if not UObject then UObject={}end

  if not UObject.FNameIndex then
    local datatable
    for i=size,0x50,4 do
      datatable={}
      for m=1,size do datatable[m]=GUObjectDict[1][m+i]end
      pointer = targetIs64Bit() and byteTableToQword(datatable) or byteTableToDword(datatable)
      if readPointer(pointer) and readPointer(readPointer(readPointer(pointer))) then UObjectMul=i break end
    end
    for i=0,3 do
      datatable={}
      for m=1,size do datatable[m]=GUObjectDict[1][m+i*UObjectMul]end
      pointer = targetIs64Bit() and byteTableToQword(datatable) or byteTableToDword(datatable)
      if readPointer(pointer) and checkvalue(pointer+size,0x100,'Object',1) then
        UObject.FNameIndex=checkvalue(pointer+size,0x50,'Object',1)-pointer
        UObject.ObjectId=checkvalue(pointer+size,0x100,i,4)-pointer
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Class',1) then UObject.Class=j break end
        end
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Core',1) then UObject.Outer=j break end
        end
        break
      end
    end
  end
]]
 end
end


function ue4parsetablecheck()
 if not FNameDict or not GUObjectDict then ue4parsetable()
 else
 local pointer,pointei,datatable,m
 if targetIs64Bit() then
   datatable={}
   for m=1,8 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToQword(datatable)
 else
   datatable={}
   for m=1,4 do datatable[m]=GUObjectDict[1][m]end
   pointer=byteTableToDword(datatable)
 end
 if UE4ver&gt;=20 then pointei=readPointer('[[GUObjectArray+10]]')
 elseif UE4ver&gt;11 then pointei=readPointer('[GUObjectArray+10]')
 elseif UE4ver&gt;2 then pointei=readPointer('[[GUObjectArray]+10]')
 else pointei=readPointer('[GUObjectArray]') end
 --print(string.format('%X',pointei))
 --print(string.format('%X',pointer))
 if pointei ~= pointer then ue4parsetable() end
 local GUObjectsizes
 if UE4ver&gt;=20 then GUObjectsizes=readInteger(getAddress('GUObjectArray+24')-(sub*2))
 elseif UE4ver&gt;11 then GUObjectsizes=readInteger('GUObjectArray+1C')
 else GUObjectsizes=readInteger(getAddress('GUObjectArray+8')-(sub*2)) end
 if GUObjectsizes~=GUObjectsize then ue4parsetable() end
 end
end

function UE4AutoConfig()

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1) or 4
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))

end

function UE3AutoConfig()

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)

UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x200)..'~'..tostring(classsize),4)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))

end


function FindObject(threadlist,ObjectId,size,i,start,stop,fullname)
  local pointer,datatable
  for j=start,stop do

    if UObjectMul then
      if targetIs64Bit() then
        datatable={}
        for m=1,8 do
          if not GUObjectDict[i][j*UObjectMul+m] then break end
          datatable[m]=GUObjectDict[i][j*UObjectMul+m]
        end
        pointer=byteTableToQword(datatable)
      else
        datatable={}
        for m=1,4 do
          if not GUObjectDict[i][j*0x4+m] then break end
          datatable[m]=GUObjectDict[i][j*0x4+m]
        end
        pointer=byteTableToDword(datatable)
      end
    elseif UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameSafeAlgo(pointer)
        if name and string.find(name,' ') then
          name=string.sub(name,string.find(name,' ')+1,name:len())
          name=name:lower()
          if not FullNameList[name]then FullNameList[name]=pointer end
          if FullNameList[fullname] then
            ObjectResult=FullNameList[fullname]
            for k,v in ipairs(threadlist) do v.terminate() end
            return
          end
        end
      end
    end
  end
end

function StaticFindObjectAlgo(fullname)
 ue4parsetablecheck()
 fullname=fullname:lower()
 if FullNameList[fullname] then return FullNameList[fullname]end
 local threadlist={}
 local k=1
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;10 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local ObjectId=UObject.ObjectId
 ObjectResult=nil
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess) do
    start=stop
    stop=stop+num
    if ObjectResult then break end
    threadlist[k]=createThread(FindObject(threadlist,ObjectId,size,i,start,stop-1,fullname))
    k=k+1
  end
 end
 local result=ObjectResult
 ObjectResult=nil
 return result
end

function BasicObject(ObjectId,size,i,start,stop)
  local pointer,datatablen,name,ObjectData,objid
  Threadlist[#Threadlist+1]=i
  for j=start,stop do
    if UObjectMul then
      if targetIs64Bit() then
        datatable={}
        for m=1,8 do
          if not GUObjectDict[i][j*UObjectMul+m] then break end
          datatable[m]=GUObjectDict[i][j*UObjectMul+m]
        end
        pointer=byteTableToQword(datatable)
      else
        datatable={}
        for m=1,4 do
          if not GUObjectDict[i][j*0x4+m] then break end
          datatable[m]=GUObjectDict[i][j*0x4+m]
        end
        pointer=byteTableToDword(datatable)
      end
    elseif UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end
    if pointer and pointer~=0 then
      objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size and not Temporary[pointer] then
        name=GetFullNameSafeAlgo(pointer)
        if name and string.find(name,' ') then
          ObjectData={}
          ObjectData.ObjId=objid
          ObjectData.Address=pointer
          ObjectData.Type=string.sub(name,1,string.find(name,' ')-1)
          ObjectData.FullName=string.sub(name,string.find(name,' ')+1,name:len())
          ObjectData.Super=UObject.super and readPointer(pointer+UObject.super) or nil
          if not readPointer(ObjectData.Super) then ObjectData.Super=nil end
          ObjectTable[#ObjectTable+1]=ObjectData
          Temporary[pointer]=ObjectData
        end
      end
    end
  end
  Threadlist[#Threadlist]=nil
end


function BasicEnumObject()
  if BasicEnumObject_running then return end
  BasicEnumObject_running=true
  ObjectTable={}
  ue4parsetablecheck()
  local count=0x200
  local size=GUObjectsize
  local sizess= targetIs64Bit() and (UE4ver&gt;10 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
  local ObjectId=UObject.ObjectId
  local num,start,stop
  Temporary={}
  Threadlist={}
  local LastStop
  for i=1,#GUObjectDict do
    num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      --print(start..'~'..stop)
      createThread(BasicObject(ObjectId,size,i,start,stop-1))
      if i==#GUObjectDict and j==math.floor(#GUObjectDict[i]/sizess) then LastStop=stop end
    end
  end
  for i=0,10000 do
    if #Threadlist==0 then break end
    sleep(1)
  end
  for i=1,#ObjectTable do
    if Temporary[ObjectTable[i].Super] then
      if not Temporary[ObjectTable[i].Super].Uper then Temporary[ObjectTable[i].Super].Uper={}end
      Temporary[ObjectTable[i].Super].Uper[#Temporary[ObjectTable[i].Super].Uper+1]=ObjectTable[i]
      ObjectTable[i].Super=Temporary[ObjectTable[i].Super]
    end
  end
  BasicEnumObject_running=nil
  Temporary=nil
  Threadlist=nil


  --print('done')
end



function registerFunc(ObjectId,size,i,start,stop)
  local funct=UObject.funct
  for j=start,stop do
    local pointer

    if UObjectMul then
      if targetIs64Bit() then
        datatable={}
        for m=1,8 do
          if not GUObjectDict[i][j*UObjectMul+m] then break end
          datatable[m]=GUObjectDict[i][j*UObjectMul+m]
        end
        pointer=byteTableToQword(datatable)
      else
        datatable={}
        for m=1,4 do
          if not GUObjectDict[i][j*0x4+m] then break end
          datatable[m]=GUObjectDict[i][j*0x4+m]
        end
        pointer=byteTableToDword(datatable)
      end
    elseif UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
      local objid=readInteger(pointer+ObjectId)
      if objid and objid&lt;size then
        local name=GetFullNameSafeAlgo(pointer)
        if name and string.find(name,' ') then
          local typ=string.sub(name,1,string.find(name,' ')-1)
          if typ=='Function' then
            local fullname=string.sub(name,string.find(name,' ')+1,name:len())
            local func=readPointer(pointer+funct)
            if func and func~=0 then extralist.addSymbol('UE',fullname,func,1)end
          end
        end
      end
    end
  end
end

function registerFuncAlgo()
 local funct=UObject.funct
 ue4parsetablecheck()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 if not enumUEObjIsRunning and UEObj then
   for i,v in ipairs(UEObj) do
     if v.Type=='Function' then
       local func=readPointer(v.Address+funct)
       if func and func~=0 then extralist.addSymbol('UE',v.FullName,func,1)end
     end
   end
 else
   local k=1
   local count=0x200
   local size=GUObjectsize
   local sizess= UE4ver&gt;2 and (targetIs64Bit() and 0x18*count or 0x10*count) or 0x4*count
   local ObjectId=UObject.ObjectId
   for i=1,#GUObjectDict do
    local num,start,stop=count,0,0
    for j=0,math.floor(#GUObjectDict[i]/sizess) do
      start=stop
      stop=stop+num
      if ObjectResult then break end
      createThread(registerFunc(ObjectId,size,i,start,stop-1))
      k=k+1
    end
   end
 end
end

function isStructExist(name)
  for i=1,#StructList do
    if StructList[i].Name==name then return StructList[i] end
  end
  return nil
end

function SaveAndRemoveStruct()
  StructList={}
  local count=getStructureCount()
  for i=count-1,0,-1 do
    local struct=getStructure(i)
    StructList[i+1]=struct
    struct:removeFromGlobalStructureList()
  end
end

function DeleteStruct(Struct)
  local count=#StructList
  for i=1,count do
    if Struct==StructList[i] then
      Struct:Destroy()
      StructList[i]=nil
    end
    if not StructList[i] and StructList[i+1] then
      StructList[i]=StructList[i+1]
      StructList[i+1]=nil
    end
  end
end

function LoadStruct()
  for i=1,#StructList do
    StructList[i]:addToGlobalStructureList()
  end
end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function ue4determineversion()
 local address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]
 if address then findAddress('FNamePool',1,address) UE4ver=25 ue4parsetable() ue4config()
  local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
  if not address or address==0 then error('StaticFindObject not functioning as expected...')end
  UE4ver=nil
  local pointer=readPointer(address+UObject.member)
  if pointer then pointer=readPointer(pointer) if pointer then UE4ver=25 end end
  if not UE4ver then UE4ver=23 end
 else
  address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1]
  if address then findAddress('FNamePool',1,address)
  else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
  local address=readPointer('[[GUObjectArray+10]]+18')
  if address&gt;0x10000 then
   UE4ver=22
   ue4parsetable()
   ue4config()
   FNameStringAlgo(1,true)
   local address=getAddressSafe(StaticFindObjectAlgo('/Script/Engine.GameEngine'))
   if not address or address==0 then error('StaticFindObject not functioning as expected...')end
   UE4ver=nil
   local pointer=readPointer(address+UObject.member)
   if pointer then pointer=readPointer(pointer) if pointer then UE4ver=22 end end
   if not UE4ver then UE4ver=20 end
  else UE4ver=18 end
 end
end

function checkvalue(address,size,value,typ)
  local cvalue,tempvalue,value2=readBytes(address,size,true)

  if type(value)==type('') and string.find(value,'~') then
    value2=tonumber(value:sub(string.find(value,'~')+1,value:len()))
    value=tonumber(value:sub(1,string.find(value,'~')-1))
  end

  if not cvalue then return false end
  if typ==1 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      --print(FNameStringAlgo(tempvalue,true))
      local str=FNameStringAlgo(tempvalue,true)

      if str and string.find(str,value) then return address+i-1 end
    end

  elseif typ==2 then
    for i=1,#cvalue,2 do
      datatable={}
      for m=1,2 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToWord(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==4 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==8 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,8 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToQword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  end
  return nil
end

function fillstruct4bytes(Struct)
  if not getElementByOffset(Struct,0) then local e=Struct.addElement() e.Offset=0 e.Vartype=vtDword end
  Struct.beginUpdate()
  local count=Struct.Count-1
  local list,k,element1,element2,size,bytesize={},1
  for i=0,count do
    element1=Struct.Element[i]
    element2=Struct.Element[i+1]
    if element2 then
      bytesize=element1.Bytesize
      if bytesize&lt;4 then bytesize=4 end
      size=element2.Offset-element1.Offset-bytesize
      if size&gt;0 then
        if size%4&gt;0 then size=4-size%4+size end
        local start=element1.Offset
        if start%4&gt;0 then start=4-start%4+start
        else start=start+4 end
        size=size/4
        for j=0,size-1 do
          if (start+j*4)&gt;=(element1.Offset+bytesize) then
            list[k]=start+j*4
            k=k+1
          end
        end
      end
    end
  end
  for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
  Struct.endUpdate()
end

function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName,Instance)
  if not FullNameOrAddress then return
  elseif type(FullNameOrAddress)==type({})then
    RunningStructCounter=0
    SaveAndRemoveStruct()
    for i=1,#FullNameOrAddress do
      createThread(ue4createstruct(FullNameOrAddress[i],StructName[i],isGlobal,isfullname,Structu,AddedOffset,AddedName,Instance))
    end

    while(true)do
      if not RunningStruct or #RunningStruct==0 then break
      else sleep(1)end
      RunningStructCounter=RunningStructCounter+1
      if RunningStructCounter&gt;180000 then break end
    end
    RunningStructCounter=nil
    LoadStruct()
    return
  end
  if StructName and isGlobal then local Struct=isStructExist(StructName) if Struct then return end end--DeleteStruct(Struct)end end

  local member,Offset,Property,bitmask,nextmember,super,propsize=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super,UObject.propsize
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress
  local isUE425=UE4ver&gt;=25
  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end

  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end

  if not AddedName then AddedName='' end
  local RunningStructName=name
  if not AddedOffset then
    if not RunningStruct then RunningStruct={} end
    RunningStruct[#RunningStruct+1]=RunningStructName

    AddedOffset=0 Struct.beginUpdate()
  else
    local FullName=GetFullNameSafeAlgo(Object)
    FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())

    if not LocalStruct then LocalStruct={}end
    if LocalStruct[FullName] then copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    else
      local copy=createStructure(FullName)
      ue4createstruct(Object,nil,nil,isfullname,copy)
      LocalStruct[FullName]=copy
      copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    end
    return
  end
  --if not RunningStructCounter and AddedName=='' then SaveAndRemoveStruct() end

  --print(string.format('%X',Object))
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    print(GetFullNameSafeAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=GetFullNameSafeAlgo(pointer)
      if PropName and string.find(PropName,':') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then
            ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
            if not getElementByOffset(Struct,Off) then e=Struct.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if Instance and PropName=='RowStruct' then
              local spointer=readPointer(Instance+Off)
              local sname,sstruct=GetFullNameSafeAlgo(spointer)
              if sname then
                print(sname)
                if string.find(sname,'.') then sname=sname:sub(string.find(sname,'.')+1,sname:len())end

                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[sname] then sstruct=ArrayStruct[PropName]
                else
                  sstruct=createStructure(sname)
                  ArrayStruct[sname]=sstruct
                  ue4createstruct(spointer,nil,nil,isfullname,sstruct)
                end

                f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name='Table' f.Vartype=vtPointer
                local ssstruct=createStructure('DataTable')
                f.setChildStruct(ssstruct)

                for r=0,10 do
                  f=ssstruct.addElement() f.Offset=r*0x18 f.Name=string.format('[%u] FName',r)  f.Vartype=vtQword
                  f=ssstruct.addElement() f.Offset=r*0x18+8 f.Name=string.format('[%u] Data',r) f.Vartype=vtPointer
                  f.setChildStruct(sstruct)
                end
                fillstruct4bytes(ssstruct)

                f=Struct.addElement() f.Offset=e.Offset+0x10-sub*2 f.Name='Size' f.Vartype=vtDword
              end
            end
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' or Typ=='MapProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              local isMap= Typ=='MapProperty'

              Prop=readPointer(pointer+Property)
              PropName=GetFullNameSafeAlgo(Prop)
              if not PropName then PropName=GetFullNameSafeAlgo(Prop)end
              if PropName then
                Typ=PropName:sub(1,string.find(PropName,' ')-1)
                PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end
                if Typ=='StructProperty' then
                  Prop=readPointer(Prop+Property)
                  PropName=GetNameAlgo(Prop)
                  if PropName then
                    PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())..'[]'
                    --print(Typ..' '..PropName)
                  end
                else PropName=PropName..'[]' end
                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[PropName] then e.setChildStruct(ArrayStruct[PropName])
                else
                  local stru=createStructure(PropName)
                  ArrayStruct[PropName]=stru
                  e.setChildStruct(stru)

                  stru.beginUpdate()
                  local ppsize=0
                  if isMap then
                    for j=0,1 do
                      Prop=readPointer(pointer+Property+j*(8-sub))
                      PropName=GetFullNameSafeAlgo(Prop)
                      if PropName then
                        ppsize=(readInteger(Prop+propsize)&lt;4 and 4 or readInteger(Prop+propsize))+ppsize
                      end
                    end
                    ppsize=ppsize+0x8
                    --print(ppsize)
                  end

                  for j=0,1 do
                    Prop=readPointer(pointer+Property+j*(8-sub))
                    PropName=GetFullNameSafeAlgo(Prop)
                    if PropName then
                      Typ=PropName:sub(1,string.find(PropName,' ')-1)
                      --if Typ=='StructProperty' then print(PropName)end
                      PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                      if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end

                      local psize=isMap and ppsize or readInteger(Prop+propsize)
                      local Offs=isMap and readInteger(Prop+Offset) or 0
                      local Propt
                      if Typ=='StructProperty' then
                        Propt=readPointer(Prop+Property)
                      end
                      for p=0,10 do
                        Off=p*psize+Offs
                        local ItemName=string.format('[%u] ',p)
                        if Typ=='StructProperty' then
                          ue4createstruct(Propt,nil,nil,isfullname,stru,Off,ItemName)
                          --if not getElementByOffset(stru,Off) then e=stru.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
                        else
                          local g=stru.addElement()
                          g.Offset=Off
                          g.Name=ItemName..PropName
                          if not ue4type[Typ] then g.Vartype=vtDword
                          else g.Vartype=ue4type[Typ]end
                        end
                      end
                    end
                  end
                  stru.endUpdate()
                  fillstruct4bytes(stru)
                end
              end
            elseif Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end

  if AddedName~='' then return end


  Struct.endUpdate()
  fillstruct4bytes(Struct)
  if isGlobal then StructList[#StructList+1]=Struct end

  local count=#RunningStruct
  for i=1,count do
    if RunningStruct[i]==RunningStructName then RunningStruct[i]=nil end
    if not RunningStruct[i] and RunningStruct[i+1] then RunningStruct[i]=RunningStruct[i+1] RunningStruct[i+1]=nil end
  end
  if not RunningStructCounter then LoadStruct() end

end

function getElementByOffset(struct,offset)
  for i=0,struct.Count-1 do
    if struct.Element[i].Offset==offset then return i end
  end
  return nil
end

function copyStruct(original,copy,AddedOffset,AddedName)
  if not copy then copy=createStructure(original.Name..'_copy')end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  copy.beginUpdate()
  for i=0,original.Count-1 do
    local e=copy.addElement()
    e.Offset=original.Element[i].Offset+AddedOffset
    if original.Element[i].Name=='' then e.Name=original.Element[i].Name
    else e.Name=AddedName..original.Element[i].Name end
    e.Vartype=original.Element[i].Vartype
    e.ChildStruct=original.Element[i].ChildStruct
    e.ChildStructStart=original.Element[i].ChildStructStart
    e.Bytesize=original.Element[i].Bytesize
  end
  copy.endUpdate()
  return copy
end

function ue4createstructfast(fullnameortable,StructName,isGlobal,isfullname,structu,AddedOffset,AddedName,depth,callernum)
  if not callernum then callernum=0 end
  if not depth then depth=10 end
  local depths=0
  callernum=callernum+1
  if callernum&gt;10 then return end
  if StructName and isGlobal then local struct=isStructExist(StructName) if struct then DeleteStruct(struct) end end
  if not UEObj then enumUEObj() end
  local tabl=fullnameortable
  if type(fullnameortable)==type('') then
    for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
  end
  --[[
  if not tabl or type(tabl)~=type({})  then
    enumUEObj()
    if type(fullnameortable)==type('') then
      for i,v in ipairs(UEObj) do if v.FullName==fullnameortable then tabl=v break end end
    end
  end
  ]]
  if not tabl or type(tabl)~=type({})  then
    print(tostring(fullnameortable)..' not found...')
    return
  end
  local name=StructName
  if not name then name=tabl.Name end
  local struct=structu
  if not struct then struct=createStructure(name)end
  if not AddedName then AddedName='' end
  local RunningStructName=name
  if not AddedOffset then
    if not RunningStruct then RunningStruct={} end
    RunningStruct[#RunningStruct+1]=RunningStructName

    AddedOffset=0 struct.beginUpdate()
  elseif tabl and tabl.FullName then
    if not LocalStruct then LocalStruct={}end
    if LocalStruct[tabl.FullName] then copyStruct(LocalStruct[tabl.FullName],struct,AddedOffset,AddedName)
    else
      local copy=createStructure(tabl.FullName)
      ue4createstructfast(tabl,nil,nil,isfullname,copy)
      LocalStruct[tabl.FullName]=copy
      copyStruct(LocalStruct[tabl.FullName],struct,AddedOffset,AddedName)
    end
    return
  end

  --print(tostring(tabl))
  local isUserDefinedStruct=string.find(tabl.Type,'UserDefinedStruct')
  local e,typ,propname
  while(true)do
    if not tabl then break end
    if type(tabl)==type(1) or tabl.Name=='Object' then break end
    print(tostring(tabl.Type)..' '..tostring(tabl.FullName))
    if tabl.Member then
      for i=1,#tabl.Member do
        if tabl.Member[i].Type~='Function' then
          if isfullname then e.Name=string.format('%s %s%s',tabl.Member[i].Type,AddedName,tabl.Member[i].FullName)
          else
            propname=AddedName..tabl.Member[i].Name
            if isUserDefinedStruct then propname=propname:sub(1,string.find(propname,'_')-1) end
          end
          if tabl.Member[i].Type=='StructProperty' then
            ue4createstructfast(tabl.Member[i].Property,nil,nil,isfullname,struct,tabl.Member[i].Offset+AddedOffset,propname..'.',depth,callernum)
            if not getElementByOffset(struct,tabl.Member[i].Offset+AddedOffset) then e=struct.addElement() e.Offset=tabl.Member[i].Offset+AddedOffset e.Name=propname e.Vartype=vtDword end
          else
            e=struct.addElement()
            e.Offset=tabl.Member[i].Offset+AddedOffset
            typ=tabl.Member[i].Type
            e.Name=propname
            e.Vartype=ue4type[typ]
            if e.Vartype==nil then e.Vartype=vtDword end
            if typ=='ArrayProperty' or typ=='MapProperty' then
              local isMap= Typ=='MapProperty'
              local Typ=tabl.Member[i].Property[1].Type
              if Typ=='StructProperty' then propname=tabl.Member[i].Property[1].Property.Name..'[]'
              else propname=tabl.Member[i].Property[1].Name..'[]' end
              if not ArrayStruct then ArrayStruct={} end
              if ArrayStruct[propname] then e.setChildStruct(ArrayStruct[propname])
              else
                local stru=createStructure(propname)
                stru.beginUpdate()
                local ppsize=0
                if isMap then
                  for p=1,#tabl.Member[i].Property do
                    ppsize=(tabl.Member[i].Property[p].Size&lt;4 and 4 or tabl.Member[i].Property[p].Size)+ppsize
                  end
                  ppsize=ppsize+0x8
                end
                for p=1,#tabl.Member[i].Property do
                  local PropName=tabl.Member[i].Property[p].Name
                  local Typ=tabl.Member[i].Property[p].Type
                  local psize=isMap and ppsize or tabl.Member[i].Property[p].Size
                  local Offs=isMap and tabl.Member[i].Property[p].Offset or 0
                  for l=0,10 do
                    Off=l*psize+Offs
                    local ItemName=string.format('[%u] ',l)
                    if Typ=='StructProperty' then
                      ue4createstructfast(tabl.Member[i].Property[p].Property,nil,nil,isfullname,stru,Off,ItemName,depth,callernum)
                      --if not getElementByOffset(stru,Off) then g=stru.addElement() g.Offset=Off g.Name=ItemName..PropName g.Vartype=vtDword end
                    else
                      g=stru.addElement()
                      g.Offset=Off
                      g.Name=ItemName..PropName
                      if not ue4type[Typ] then g.Vartype=vtDword
                      else g.Vartype=ue4type[Typ]end
                    end
                  end
                end
                stru.endUpdate()
                if stru.Count&gt;1 then
                  fillstruct4bytes(stru)
                  e.setChildStruct(stru)
                  ArrayStruct[propname]=stru
                else stru:Destroy()end
              end

              local f=struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
            elseif typ=='BoolProperty' then e.ChildStructStart=tabl.Member[i].BitField end
          end
        end
      end
    end
    depths=depths+1
    if depths&gt;depth then break end
    tabl=tabl.Parent
  end
  if AddedName~='' then return end
  struct.endUpdate()

  fillstruct4bytes(struct)
  if isGlobal then StructList[#StructList+1]=struct end

  local count=#RunningStruct
  for i=1,count do
    if RunningStruct[i]==RunningStructName then RunningStruct[i]=nil end
    if not RunningStruct[i] and RunningStruct[i+1] then RunningStruct[i]=RunningStruct[i+1] RunningStruct[i+1]=nil end
  end
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameSafeAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname,class
  address,name,fullname,class=ue_findRealStartOfObject(Instance)

  if class then
   -- print('banana3')
    --if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then ue4createstructfast(fullname,nil,nil,nil,Struct) end
    SaveAndRemoveStruct()
    ue4createstruct(class,nil,nil,nil,Struct,nil,nil,Instance)
    --LoadStruct()
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_SymbolLookupCallback(symbol)
  --print('banana1')
  local str='Function '
  if string.find(symbol,str) then
    symbol=symbol:sub(string.find(symbol,str)+str:len(),symbol:len())
    local pointer=StaticFindObjectAlgo(symbol)
    if pointer then return readPointer(pointer+UObject.funct)end
  end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameSafeAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName,pointer
    end
  end

  if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then
    for i=1,#UEObj do
      if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
         if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
           local name
           return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName,UEObj[i].Class.Address
         end
      end
    end
  end

  return address
end


function enumUEObjT(file,size,i,start,stop)
 local datatable,Address,FName,Name,FullName,typ,typ1,isProperty,l,pointer,stri,num,isPropertyc,EObj,k=0
 local Class,ObjectId,super,Offset,nextmember,member,propsize,bitmask,Property,Outer=UObject.Class,UObject.ObjectId,UObject.super,UObject.Offset,UObject.nextmember,UObject.member,UObject.propsize,UObject.bitmask,UObject.Property,UObject.Outer
 local UEver=UE4ver
 local pointersize= targetIs64Bit() and 8 or 4

 for j=start,stop do

    if UObjectMul then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*UObjectMul+m] then break end
        datatable[m]=GUObjectDict[i][j*UObjectMul+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      Address=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      Address=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      Address=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      Address=byteTableToDword(datatable)
    end

    if Address and Address~=0 then
       objid=readInteger(Address+ObjectId)
       if objid then
          if objid&lt;size then
             FullName=GetFullNameSafeAlgo(Address)

             if FullName then
               isProperty=false
               typ1=FullName:sub(1,string.find(FullName,' ')-1)
               FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
               if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len()) isProperty=true
               elseif string.find(FullName,'%.') then Name=FullName:sub(string.find(FullName,'%.')+1,FullName:len())
               else Name=FullName end
               if UEObjIndex[FullName] and UEObj[UEObjIndex[FullName]] then UEObj[UEObjIndex[FullName]].Address=Address
               else
                 EObj={}
                 EObj.Address=Address
                 EObj.Id=objid
                 EObj.Class=temp[readPointer(Address+Class)]
                 EObj.Type=typ1
                 EObj.FullName=FullName
                 EObj.Name=Name
                 if isProperty then
                   isProperty=readPointer(Address+Outer)
                   if isProperty and isProperty~=0 then
                     EObj.Outer=isProperty
                     EObj.Size=readInteger(Address+propsize)
                     EObj.Offset=readInteger(Address+Offset)
                     if typ1=='BoolProperty' then EObj.BitField=readBytes(Address+bitmask,1)
                     elseif typ1=='StructProperty' or typ1=='ObjectProperty' then EObj.Property=readPointer(Address+Property)
                     elseif typ1=='MapProperty' or typ1=='ArrayProperty' then
                       EObj.Property={}
                       local count= typ1=='MapProperty' and 1 or 0
                       for p=0,count do
                         local prop=readPointer(Address+Property+p*8)
                         FullName=GetFullNameSafeAlgo(prop)

                         if FullName then
                           typ=FullName:sub(1,string.find(FullName,' ')-1)
                           FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                           if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                           else Name=FullName end
                           if string.find(Name,'%:') then Name=Name:sub(string.find(Name,'%:')+1,Name:len())end
                           local Prop={}
                           Prop.Address=prop
                           Prop.Type=typ
                           Prop.FullName=FullName
                           Prop.Name=Name
                           Prop.Size=readInteger(prop+propsize)
                           Prop.Offset=readInteger(prop+Offset)
                           if typ=='BoolProperty' then Prop.BitField=readBytes(prop+bitmask,1)
                           elseif typ=='StructProperty' or typ=='ObjectProperty' then Prop.Property=readPointer(prop+Property)end
                           EObj.Property[p+1]=Prop
                         end
                       end
                     end
                   else print(FullName..' nil outer')
                   end
                 end

                 Parent=readPointer(Address+super)
                 if Parent and Parent~=0 then EObj.Parent=Parent end
                 temp[Address]=EObj
                 if UEver&gt;=25 then
                   k=1
                   EObj.MemberSize=readInteger(Address+member+pointersize)
                   Address=readPointer(Address+member)
                   EObj.Member={}

                   while(true)do
                     if UEver&gt;=25 then FullName=GetFullNameSafeAlgo(Address)
                     else FullName=GetFullNameSafeAlgo(Address) end
                     if not FullName then break end

                     typ=FullName:sub(1,string.find(FullName,' ')-1)
                     FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                     if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                     else Name=FullName end
                     EObj.Member[k]={}
                     EObj.Member[k].Address=Address
                     EObj.Member[k].Type=typ
                     EObj.Member[k].FullName=FullName
                     EObj.Member[k].Name=Name
                     EObj.Member[k].Size=readInteger(Address+propsize)
                     EObj.Member[k].Offset=readInteger(Address+Offset)
                     if typ=='BoolProperty' then EObj.Member[k].BitField=readBytes(Address+bitmask,1)
                     elseif typ=='StructProperty' or typ=='ObjectProperty' then EObj.Member[k].Property=readPointer(Address+Property)
                     elseif typ=='MapProperty' or typ=='ArrayProperty' then
                       EObj.Member[k].Property={}
                       for p=0,1 do
                         local prop=readPointer(Address+Property+p*8)
                         FullName=GetFullNameSafeAlgo(prop)

                         if FullName then
                           typ=FullName:sub(1,string.find(FullName,' ')-1)
                           FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
                           if string.find(FullName,'%:') then Name=FullName:sub(string.find(FullName,'%:')+1,FullName:len())
                           else Name=FullName end
                           if string.find(Name,'%:') then Name=Name:sub(string.find(Name,'%:')+1,Name:len())end
                           local Prop={}
                           Prop.Address=prop
                           Prop.Type=typ
                           Prop.FullName=FullName
                           Prop.Name=Name
                           Prop.Size=readInteger(prop+propsize)
                           Prop.Offset=readInteger(prop+Offset)
                           if typ=='BoolProperty' then Prop.BitField=readBytes(prop+bitmask,1)
                           elseif typ=='StructProperty' or typ=='ObjectProperty' then local propt=readPointer(prop+Property) if propt then Prop.Property=propt end end
                           EObj.Member[k].Property[p+1]=Prop
                         end
                       end
                       if #EObj.Member[k].Property==0 then EObj.Member[k].Property=nil end
                     end
                     Address=readPointer(Address+nextmember)
                     k=k+1
                   end
                   if #EObj.Member==0 then EObj.Member=nil end
                 end
                 UEObj[#UEObj+1]=EObj
                 UEObjIndex[EObj.FullName]=#UEObj+1
               end
             end
          end
       end
    end
 end
--print(i..':'..k)
end

function enumUEObj(isSilent,isUpdateOnly)
 if isUpdateOnly then enumUEObjIsUpdateOnly=true end
 enumUEObjIsRunning=true
 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;11 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 if not isUpdateOnly then
   UEObj={}
   UEObjIndex={}
 end
 temp={}
 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(enumUEObjT(file,size,i,start,stop-1))
  end
 end
 if not isUpdateOnly then
   if UE4ver&gt;=25 then
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Member then
         for j=1,#UEObj[i].Member do
           if UEObj[i].Member[j].Property then
             if temp[UEObj[i].Member[j].Property] then
               UEObj[i].Member[j].Property=temp[UEObj[i].Member[j].Property]
             elseif type(UEObj[i].Member[j].Property)==type({}) then
               for p=1,#UEObj[i].Member[j].Property do
                 if temp[UEObj[i].Member[j].Property[p].Property] then
                   UEObj[i].Member[j].Property[p].Property=temp[UEObj[i].Member[j].Property[p].Property]
                 elseif UEObj[i].Member[j].Property[p].Property then print(string.format('%X no object?',UEObj[i].Member[j].Property[p].Property))
                 elseif UEObj[i].Member[j].Property[p].Type=='StructProperty' or UEObj[i].Member[j].Property[p].Type=='ObjectProperty' then print(string.format('%s %s no property?',UEObj[i].Member[j].Property[p].Type,UEObj[i].Member[j].Property[p].FullName))
                 end
               end
             end
           end
         end
       end
     end
   else
     for i=1,#UEObj do
       if UEObj[i].Parent then
         if temp[UEObj[i].Parent] then
           UEObj[i].Parent=temp[UEObj[i].Parent]
         end
       end
       if UEObj[i].Outer then
         if temp[UEObj[i].Outer]then
           if temp[UEObj[i].Property] then
             UEObj[i].Property=temp[UEObj[i].Property]
           elseif type(UEObj[i].Property)==type({}) then
             for p=1,#UEObj[i].Property do
               if temp[UEObj[i].Property[p].Property] then
                 UEObj[i].Property[p].Property=temp[UEObj[i].Property[p].Property]
               else print(string.format('%X no object?',UEObj[i].Property[p].Property))
               end
             end
           end
           if not temp[UEObj[i].Outer].Member then temp[UEObj[i].Outer].Member={}end
           temp[UEObj[i].Outer].Member[#temp[UEObj[i].Outer].Member+1]=UEObj[i]
         else print(UEObj[i].FullName..' missing outer') end
       end
     end
   end
 end
 temp=nil
 enumUEObjIsUpdateOnly=false
 enumUEObjIsRunning=false
 if not isSilent then print(string.format('\nA Total of %u objects had been enumerated in %u seconds',#UEObj,os.time()-starttime))end
end



function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

function findLastCall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'ret',size)
  if not result then print(address..' cant find ret?') return nil end
  result=result-getAddress(address)
  result=findOpcodes(address,'call ',result)
  local ext, opc, byt, add=splitDisassembledString(disassemble(result[#result]))
  opc=opc:gsub('call ','')
  return opc
end

function followjmp(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'jmp ',size)
  if not result then print(address..' cant find jmp?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('jmp ','')
  return opc
end

function followcall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'call ',size)
  if not result then print(address..' cant find call?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('call ','')
  return opc
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function UEfindInstancesOfClass(fullnameOrAddress)
  local class,Name,address,Typ=UObject.Class
  local results,j={},1
  if type(fullnameOrAddress)==type('')then address=StaticFindObjectAlgo(fullnameOrAddress)
  else address=fullnameOrAddress end
  local result,result2=pointerscan(address)
  for i=1,#result do

    Name=GetFullNameSafeAlgo(getAddress(result[i])-class)
    if not Name then Name=GetFullNameSafeAlgo(getAddress(result[i])-UObject.super)end

    if Name and Name~='None' then
      Typ=Name:sub(1,string.find(Name,' ')-1)
      if string.find(Typ,'Class') then
        result2=pointerscan(getAddress(result[i])-UObject.super)
        for k=1,#result2 do
          Name=GetFullNameSafeAlgo(getAddress(result2[k])-class)
          if not Name then Name=GetFullNameSafeAlgo(getAddress(result2[k])-UObject.super)end
          if Name and Name~='None' then
            results[j]={}
            results[j].Name=Name
            results[j].Address=math.floor(getAddress(result2[k])-class)
            j=j+1
          end
        end
      else
        results[j]={}
        results[j].Name=Name
        results[j].Address=math.floor(getAddress(result[i])-class)
        j=j+1
      end
    end
  end
  --for i,v in ipairs(result) do result[i]=tonumber(v,16)-class end
  return results
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
if force~=nil
then state = not force
end
compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
getMainForm().Splitter1.Visible = state
getMainForm().Panel4.Visible = state
getMainForm().Panel5.Visible = state
end

function addCompactMenu()
if compactmenualreadyexists
then return end
local parent = getMainForm().Menu.Items
compactmenuitem = createMenuItem(parent)
parent.add(compactmenuitem)
compactmenuitem.Caption = 'Compact View Mode'
compactmenuitem.OnClick = cycleFullCompact
compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
if string.find(process,'MassEffect') then
  isMassEffect=true
  --findAddress('GUObjectArray',1,'4C * * * * * * 49 3B * 0F 84 * * * * 48 89 * * * 48 89banana',process)
  --print('------------------')
  local result2,result=findAddress('FNamePool',0,'C0 CA 45 80 00 00 00 00 00 00 00 00 4E 6F 6E 65 00banana',process,nil,0,true)
  for i=1,#result2 do
    result=pointerscan(getAddress(result2[i]),process)
    for j=1,#result do
      stringoffset=0xC
      unregisterSymbol('FNamePool') registerSymbol('FNamePool',result[j],true)
    end
  end

  else isMassEffect=nil
end
local starttime=os.time()

if not UE4ver then UE4ver=ue4versioncheck() end

if not getAddressSafe('GUObjectArray') and not getAddressSafe('FNamePool')  then

  if targetIs64Bit() then

    local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
    if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
    if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
    if not address then findAddress('GUObjectArray','1,-0x68','4C 8B 44 24 60 8B 44 24 78 * * * 48 8Dbanana',process)
    else findAddress('GUObjectArray',1,address)end

    if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
      if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
      elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
      else UE4ver=20 end
    end

    ue4config()

    if UE4ver&gt;=23 then
      address=findAddress('FNamePool',0,'4C 8D 05 * * * * EB 16 48 8D 0D * * * * E8banana',process,nil,0,true)[1]
      if not address then address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]end
      if address then findAddress('FNamePool',1,address)
      else error('FNamePool aob not found...')end
    elseif string.find(process,'StateOfDecay2')then
      findAddress('FNamePool',1,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      findAddress('FNamePool2',3,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      FNamePool=getAddress('FNamePool')
      FNamePool2=getAddress('FNamePool2')
    else
      address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
      if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
      if address then findAddress('FNamePool',1,address)
      else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
    end

  else
    ue4config()
    if UE4ver&gt;2 then
      findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
      findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
    else
      findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
      findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
    end
  end

end

if targetIs64Bit() then
  if UE4ver&gt;7 then
    local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
    if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
    if not address then error('GEngine aob not found...')end
    findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)
  end
else
  if UE4ver&gt;2 then
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  else
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  end
end

print('AOBScan done : '..os.time()-starttime)

ue4parsetable()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

print('Table parsing done : '..os.time()-starttime)

if UE4ver&gt;7 then UE4AutoConfig() else UE3AutoConfig() end

--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

if UE4ver&gt;7 then

   ue4createstruct({
   '/Script/Engine.GameEngine',
   '/Script/Engine.GameViewportClient',
   '/Script/Engine.GameInstance',
   '/Script/Engine.LocalPlayer',
   '/Script/Engine.PlayerController',
   '/Script/Engine.CharacterMovementComponent',
   '/Script/Engine.CapsuleComponent',
   '/Script/Engine.Character',
   '/Script/Engine.World'
   },{
   'GameEngine',
   'GameViewportClient',
   'GameInstance',
   'LocalPlayer',
   'PlayerController',
   'MovementComponent',
   'CapsuleComponent',
   'GPlayer',
   'World'
   },1)

end
createThread(BasicEnumObject())
print('All done : '..os.time()-starttime..'\n')
if not ue_SymbolLookupCallbackID then
  ue_SymbolLookupCallbackID=registerSymbolLookupCallback(ue_SymbolLookupCallback,slNotSymbol)
end
--registerFuncAlgo()
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbolLookupCallback(ue_SymbolLookupCallbackID)
ue_SymbolLookupCallbackID=nil
--[[
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')]]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26146</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end
--[[
UEObjt=createThread(function()
  while(true)do
    if not UEObj and not enumUEObjIsRunning then enumUEObj(1)
    elseif not enumUEObjIsRunning then enumUEObj(1,1)end
    sleep(30000)
  end
end)
 ]]
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil

--UEObjt:terminate()
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26147</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local Offset,ObjectId,nextmember,member,Property=UObject.Offset,UObject.ObjectId,UObject.nextmember,UObject.member,UObject.Property
local enumoffset,enummul,enumname,enumindex=UObject.enumoffset,UObject.enummul,UObject.enumname,UObject.enumindex
function ue4dump(file,size,i,start,stop)
 --print(start..' ~ '..stop)
 local k=0
 local pointer,datatable,pointers,propname,offset,list,str,strid,name,objid
 for j=start,stop do

    if UObjectMul then
      if targetIs64Bit() then
        datatable={}
        for m=1,8 do
          if not GUObjectDict[i][j*UObjectMul+m] then break end
          datatable[m]=GUObjectDict[i][j*UObjectMul+m]
        end
        pointer=byteTableToQword(datatable)
      else
        datatable={}
        for m=1,4 do
          if not GUObjectDict[i][j*0x4+m] then break end
          datatable[m]=GUObjectDict[i][j*0x4+m]
        end
        pointer=byteTableToDword(datatable)
      end
    elseif UE4ver&lt;11 and targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x8+m] then break end
        datatable[m]=GUObjectDict[i][j*0x8+m]
      end
      pointer=byteTableToQword(datatable)
    elseif UE4ver&lt;11 then
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x4+m] then break end
        datatable[m]=GUObjectDict[i][j*0x4+m]
      end
      pointer=byteTableToDword(datatable)
    elseif targetIs64Bit() then
      datatable={}
      for m=1,8 do
        if not GUObjectDict[i][j*0x18+m] then break end
        datatable[m]=GUObjectDict[i][j*0x18+m]
      end
      pointer=byteTableToQword(datatable)
    else
      datatable={}
      for m=1,4 do
        if not GUObjectDict[i][j*0x10+m] then break end
        datatable[m]=GUObjectDict[i][j*0x10+m]
      end
      pointer=byteTableToDword(datatable)
    end

    if pointer and pointer~=0 then
       local objid=readInteger(pointer+ObjectId)
       if objid and readPointer(readPointer(pointer)) then
          --if objid&lt;size then
             str=string.format('%016X',pointer)
             strid=string.format('%08u',objid)
             if UObject.super then name=GetFullNameSuperAlgo(pointer,true)
             else name=GetFullNameSafeAlgo(pointer,true)end
             if name then
                 typ=name:sub(1,string.find(name,' ')-1)
                 if string.find(typ,'Property') then
                     if (typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') ) and Property then
                       name=hasProperty(pointer)
                     end
                     strid=string.format('%8X',readInteger(pointer+Offset))
                 end

                 file:write(string.format('[%s] %s %s\n',strid,str,name))


                 if (typ=='UserDefinedEnum' or typ=='Enum') and enummul then
                   list=pointer+enumoffset
                   for i=0,readInteger(list+8-sub)-1 do
                     pointers=readPointer(list)+i*enummul
                     offset=readBytes(pointers+enumindex,1)
                     if offset==0 then offset=i end
                     propname=FNameStringAlgo(pointers+enumname)
                     strid=string.format('%8X',offset)
                     str=string.format('%016X',pointers)
                     file:write(string.format('[%s] %s %s\n',strid,str,propname))
                   end
                 elseif ( typ=='MapProperty' or string.find(typ,'ArrayProperty') ) and Property then
                   for n=0,1 do
                     pointers=readPointer(pointer+n*8+Property)
                     propname=hasProperty(pointers)
                     if propname then
                       offset=readInteger(pointers+Offset)
                       strid=string.format('%8X',offset)
                       str=string.format('%016X',pointers)
                       file:write(string.format('[%s] %s %s\n',strid,str,propname))
                     end
                   end
                 end

                 if UE4ver&gt;=25 then
                     local pointers= readPointer(pointer+member)
                     while(true)do
	                     propname=GetFullNameSafeAlgo(pointers)
	                     if not propname then break end
	                     offset=readInteger(pointers+Offset)
	                     strid=string.format('%8X',offset)
                         str=string.format('%016X',pointers)

                         typ=propname:sub(1,string.find(propname,' ')-1)
                         if typ=='StructProperty' or string.find(typ,'ObjectProperty') or string.find(typ,'ArrayProperty') then
                           propname=hasProperty(pointers)
                         end

	                     file:write(string.format('[%s] %s %s\n',strid,str,propname))


                         if typ=='MapProperty' or string.find(typ,'ArrayProperty') then
                           for n=0,2 do
                             pointer=readPointer(pointers+n*8+Property)
                             propname=hasProperty(pointer)
                             if propname then
                               offset=readInteger(pointer+Offset)
                               strid=string.format('%8X',offset)
                               str=string.format('%016X',pointer)
                               file:write(string.format('[%s] %s %s\n',strid,str,propname))
                             end
                           end
                         end

	                     pointers=readPointer(pointers+nextmember)
                     end
                 end
                 k=k+1
             else file:write(string.format('[%s] %s Invalid Object\n',strid,str)) end
          --end
       end
    end
 end
    totalobject=totalobject+k
--print(i..':'..k)
end


 local sub=targetIs64Bit() and 0 or 4
 ue4parsetablecheck()
 local count=0x200
 local size=GUObjectsize
 local sizess= targetIs64Bit() and (UE4ver&gt;10 and 0x18*count or 0x8*count) or (UE4ver&gt;11 and 0x10*count or 0x4*count)
 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] ObjectsDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
--local re={rei1,rei2,rei3,rei4,rei5}
 totalobject=0
--allobject=createStringlist()

 for i=1,#GUObjectDict do
  local num,start,stop=count,0,0
  for j=0,math.floor(#GUObjectDict[i]/sizess+0.5) do
   start=stop
   stop=stop+num
   createThread(ue4dump(file,size,i,start,stop-1))
  end
 end


 file:close()
 print(string.format('\nA Total of %u objects had been dumped in %u seconds',totalobject,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26148</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if readPointer(FNameString) or string.find(process,'StateOfDecay2')then size=0xFFFFFFFF
 elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26149</ID>
                  <Description>"Construct Console"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function AAscript(script)
  local success,erro=autoAssembleCheck(script)
  if not success then
    print('\n'..erro..'\n')
    local scriptstr=createStringlist()scriptstr.Text=script
    for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    error('autoAssemble failed')
  end
  autoAssemble(script)
end

AAscript("aobscanmodule(StaticConstructObject,$process,4C ?? ?? ?? ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D ?? ?? ?? ?? ?? ?? 48 81 ?? ?? ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? 48 89)\nregistersymbol(StaticConstructObject)")
local StaticConstructObject=getAddress('StaticConstructObject')
local Console=executeCodeEx
(
  0,nil,
  getAddress(StaticConstructObject),
  getAddress('[[GEngine]+GameEngine.ConsoleClass]'),
  getAddress('[[GEngine]+GameEngine.GameViewport]'),
  0,0,0,0,0,0,0
)
writePointer('[[GEngine]+GameEngine.GameViewport]+GameViewportClient.ViewportConsole',Console)


[DISABLE]
--"NewObject with empty name can't be used to create default subobjects"


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26150</ID>
                  <Description>"Get GEngine "</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
unregisterSymbol('GEngine')
--[[
local result=UEfindInstancesOfClass('/Script/Engine.GameEngine')
for i=1,#result do
  print(string.format('%X:%s',result[i].Address,result[i].Name))
  if string.find(result[i].Name,'e_') then registerSymbol('GEngine',pointerscan(result[i].Address,process)[1]) end
end
]]


--[[

BasicEnumObject()
for i=1,#ObjectTable do
  if string.find(ObjectTable[i].Type,'GameEngine') and not string.find(ObjectTable[i].FullName,'Default') then
    print(string.format('%X:%s',ObjectTable[i].Address,GetFullNameSafeAlgo(ObjectTable[i].Address)))
    registerSymbol('GEngine',pointerscan(ObjectTable[i].Address,process)[1])  break
  end
  if i==#ObjectTable then print('GameEngine instance not found...')end

end
 ]]

function FindObjectName(name)
  for i=1,#ObjectTable do
    if string.find(ObjectTable[i].FullName,name) then return ObjectTable[i]end
  end
end

function FindObjectType(name,exception)
  for i=1,#ObjectTable do
    if string.find(ObjectTable[i].Type,name) and not string.find(ObjectTable[i].FullName,exception) then return ObjectTable[i]end
  end
end
--ue4parsetable()
--BasicEnumObject()
local Object=FindObjectName('GameEngine')
for i=0,4 do
  if Object.Uper and Object.Uper[1] then Object=Object.Uper[1] else break end
end
Object=Object.FullName:sub(string.find(Object.FullName,'%.')+1,Object.FullName:len())

Object=FindObjectType(Object,'Default')
print(string.format('%X : %s %s',Object.Address,Object.Type,Object.FullName))




registerSymbol('GEngine',pointerscan(Object.Address,process)[1],true)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26151</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26152</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26153</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26154</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26155</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26156</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26157</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26158</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26159</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26160</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26161</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26162</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26163</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26164</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end


print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26165</ID>
                  <Description>"FNamePool scanner V2"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'),nil,nil,getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00')+0x50)
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            --if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            --end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26166</ID>
                  <Description>"FNamePool scanner V3"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



print('------------------')
local isUnicode=true
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  print(strlist[i])
  result=pointerscan(getAddress(strlist[i])-0x50,nil,nil,getAddress(strlist[i]))
  for j=1,#result do
    if string.sub(result[j],result[j]:len()-3,result[j]:len()-2)=='00' then
      print(result[j])
      pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
      pointer1=readPointer(pointer1)
      pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
      pointer2=readPointer(pointer2)
      pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
      pointer3=readPointer(pointer3)
      if pointer1 and pointer2 and pointer3 then
         print(strlist[i]..'&lt;-'..result[j])
         result2=pointerscan(getAddressSafe(string.sub(result[j],1,result[j]:len()-2)..'00'))
         for k=1,#result2 do
           print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
           if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end

         end
      end
    end
  end
end
::done::
print('done')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26167</ID>
                  <Description>"FNamePool scanner V4"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end



print('------------------')
local isUnicode=false
local size= targetIs64Bit() and 8 or 4
local result2,result,result3,result4,pointer1,pointer2,pointer3,tempstringoffset,str,tempfnamepooloffset=stringscan('ByteProperty',nil,nil,isUnicode)
for i=1,#result2 do
--print(result2[i])
  result=pointerscan(getAddress(result2[i]..'-50'),nil,nil,getAddress(result2[i]))

  for j=1,#result do
    tempstringoffset=getAddress(result2[i])-readPointer(getAddress(result[j]))

    for k=size,0x50,4 do
      str=readString(readPointer(getAddress(result[j])+k)+tempstringoffset,0x30,isUnicode)
      if str and str=='IntProperty' then
        stringoffset=tempstringoffset
        print(result2[i]..'&lt;-'..result[j])

        result3=pointerscan(getAddress(result[j]..'-50')-k,nil,nil,getAddress(result[j]))
        for m=1,#result3 do
          --print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])
          stringoffset2=((getAddress(result[j])-readPointer(result3[m])+size)/2)-size
          --print(string.format('%X',((getAddress(result[j])-readPointer(result3[m])+size)/2)-size))
          stringmul=k
          --[[
          pointer1=readPointer(result3[m]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result3[m]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result3[m]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])
          end]]
          result4=pointerscan(getAddress(result3[m])-0x100,process,nil,getAddress(result3[m]))
          for n=1,#result4 do
            print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m]..'&lt;-'..result4[n])
            unregisterSymbol('FNamePool') registerSymbol('FNamePool',result4[n],true)
            goto done
          end
        end
      end
    end
  end
end
::done::
print('done')



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26168</ID>
                  <Description>"UE4 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              UObject.ObjectId=checkvalue(pointer2,0x50,1,4)-pointer2
              UObject.Class=checkvalue(pointer2,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2,0x50,pointer,size)-pointer2

              local str
              if UE4ver&lt;9 and targetIs64Bit() then
                str=string.format('8:0x%X 8:0x%X',pointer,pointer2)
              elseif UE4ver&lt;9 then
                str=string.format('4:0x%X 4:0x%X',pointer,pointer2)
              elseif targetIs64Bit() then
                str=string.format('8:0x%X 8:* 8:* 8:0x%X',pointer,pointer2)
              else
                str=string.format('4:0x%X 4:* 4:* 4:* 4:0x%X',pointer,pointer2)
              end
              print(str)
              result2=groupscan(str)
              for n=1,#result2 do
                local result3
                if not Aligned or getAddress(result2[n])%size==0 then
                  print(string.format('%X&lt;-%s',pointer2,result2[n]))
                  --result3=pointerscan(getAddress(result2[n]:sub(1,result2[n]:len()-2)..'00'))
                end
                if not result3 or #result3&lt;=0 then result3=pointerscan(getAddress(result2[n]))end
                for o=1,#result3 do
                  local result4
                  if not Aligned or getAddress(result3[o])%size==0 then

                    --if not inModule(result3[o]) then
                      print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))

                    --end

                    if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                      unregisterSymbol('GUObjectArray')
                      registerSymbol('GUObjectArray',result3[o]..'-10',true)
                      goto done
                    end

                    result4=pointerscan(getAddress(result3[o]))


                  end
                  if not result4 then result4={}end
                  for q=1,#result4 do
                    if not Aligned or getAddress(result4[q])%size==0 then
                      print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))

                      if inModule(result4[q]) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result4[q]..'-10',true)
                        goto done
                      end

                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26169</ID>
                  <Description>"UE4 Object scanner V2"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              UObject.ObjectId=checkvalue(pointer2,0x50,1,4)-pointer2
              UObject.Class=checkvalue(pointer2,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2,0x50,pointer,size)-pointer2

              local str

              for p=4,0,-1 do
                str=string.format('%u:0x%X',size,pointer)
                for q=1,p do
                  str=str..' 4:*'
                end
                str=str..string.format(' %u:0x%X',size,pointer2)
                UObjectMul=(4*p)+size

                print(str)


                result2=groupscan(str)
                for n=1,#result2 do
                  local result3
                  if result2[n]:sub(result2[n]:len()-1,result2[n]:len())=='00' then
                    print(string.format('%X&lt;-%s',pointer2,result2[n]))
                    result3=pointerscan(getAddress(result2[n]))
                  end
                  if not result3  then result3={}end
                  for o=1,#result3 do
                    local result4
                    if not Aligned or getAddress(result3[o])%size==0 then
                      --if not inModule(result3[o]) then
                        print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))
                      --end
                      if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result3[o]..'-10',true)
                        result4=pointerscan(getAddress(result3[o]..'-10'),process)
                        if result4[1] then
                          print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[1]))
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[1],true)
                        end
                        goto done
                      end
                      result4=pointerscan(getAddress(result3[o]))
                    end
                    if not result4 then result4={}end
                    for q=1,#result4 do
                      if not Aligned or getAddress(result4[q])%size==0 then
                        print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))
                        if inModule(result4[q]) then
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[q]..'-10',true)

                          goto done
                        end
                      end
                    end
                  end
                end
              end

            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26170</ID>
                  <Description>"UE4 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]
if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1) or 4
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26171</ID>
                  <Description>"UE3 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
UE4ver=ue4versioncheck()
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object',isMassEffect)
if not UObject then  UObject = {} end
print(Object)
local size,pointer,pointer1,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  pointer=getAddress(result[i])-0x50
  for j=0,0x100,4 do
    pointer1=checkvalue(readPointer(pointer+j),0x100,'Class',1)
    if pointer1 then
      for k=0,0x100,4 do
        pointer2=checkvalue(readPointer(pointer+k),0x100,'Core',1)
        if pointer2 then
          pointer1=pointer1-readPointer(pointer+j)
          pointer2=pointer2-readPointer(pointer+k)
          if pointer1==pointer2 then
            pointer=getAddress(result[i])-pointer1
            print(string.format('%X',pointer))
            for l=1,3 do
              pointer3=checkvalue(pointer+size,0x100,l,4)
              if pointer3 then print(l)
                UObject.ObjectId=pointer3-pointer
                UObject.FNameIndex=pointer1
                UObject.Class=pointer1+j-0x50
                UObject.Outer=pointer1+k-0x50

                result2=pointerscan(pointer)
                for m=1,#result2 do
                  local val=0
                  for o=1,100 do
                    val=o
                    if not readPointer(readPointer(readPointer(getAddress(result2[m])+o*size))) then break end
                  end

                  if val==100 then
                    print(string.format('%X',getAddressSafe(result2[m])-(size*l)))
                    result=pointerscan(getAddressSafe(result2[m])-(size*l),process)
                    unregisterSymbol('GUObjectArray')
                    registerSymbol('GUObjectArray',getAddressSafe(result2[m])-(size*l),true)
                    NOGUObjectsize=true

                    for n=1,#result do
                      print(result2[m]..'&lt;-'..result[n])
                      if inModule(result[n]) and getAddress(result[n])%4==0 then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result[n],true)
                        NOGUObjectsize=nil
                        goto done
                      end
                    end
                  end
                  if m==#result2 then goto done end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
--[[
if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end
]]

ue4parsetable()
print('done\n')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26172</ID>
                  <Description>"UE3 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)

UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x200)..'~'..tostring(classsize),4)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26173</ID>
                  <Description>"to Single Line Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

if syntaxcheck then return end
[ENABLE]

memrec.Child[0].Address=toStr(memrec.Child[0]) memrec.Child[0].OffsetCount=0
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26174</ID>
                  <Description>"to Structural Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

function toStructural(rec)
  local str,str2,list=toStr(rec),'',{}
  if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
  else str2=str end
  rec.Address=str2
  while(true)do
    if not str:find(']') then break end
    str=str:sub(str:find(']')+2,str:len())
    if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
    else str2=str end
    list[#list+1]=str2
  end
  rec.OffsetCount=#list+1
  for i=#list,1,-1 do
    rec.OffsetText[#list-i]=list[i]
  end
end

if syntaxcheck then return end
[ENABLE]

toStructural(memrec.Child[0])
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26175</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26176</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26177</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26178</ID>
          <Description>"Dumper V6.6"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26179</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}

 --if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;2 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A
    UObject.funct= 0xD8
    UObject.Property= 0x78
    UObject.enumoffset = 0x40
    UObject.enummul = 0x10
    UObject.enumname = 0x0
    UObject.enumindex = 0x8

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
    UObject.funct= 0xC0
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
    UObject.funct= 0xB0
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70-(sub*8)

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
  end

----------------------------
---------UE3 struct---------
--1.25
--[[
 elseif UE4ver&gt;=1 then

    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58

]]
--0.10246
 else
 --[[
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70]]

 end

---------------------------
end


ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 --if true then return 0 end
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then return 0 end
 return tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local size=targetIs64Bit() and 8 or 4
 local number,str,pointer
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end


 if not FName then return nil end

 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end

 local CFName=FName

 if readPointer(FNameString) then
   if not FNameStringStub then FNameStringStub=createExecuteCodeExStub(0,FNameString,0,0)end
   if not FNameStringRE then FNameStringRE=createRemoteExecutor()end

   if not mem then mem=allocateMemory(0x100)end
   writeQword(mem+0x50+UObject.FNameIndex,FName)
   FNameStringRE.executeStub(FNameStringStub,{mem+0x50,mem})
   str=readPointer(mem)
   if str then str=readString(str,readInteger(mem+0x8)*2,true) end
   --deAlloc(mem)

 elseif UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)
  FName=(FName&amp;0xFFFF)*2
  pointer=readPointer(FNamePool+i*size)

  local le =  readSmallInteger(pointer+FName)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and readBytes(pointer+FName,1)==1 or false
  --print(FName)
  le=(widechar and le*2 or le)-1
  if CFName==3 and not stringoffset then
    for k=2,0x20,2 do
      if readString(pointer+FName+k,le,widechar)=='ByteProperty' then stringoffset=k break end
      --print(k)
    end
  end

  if not stringoffset then return end

  str=readString(pointer+FName+stringoffset,le,widechar)
 else
  local i

  if isMassEffect then
    i=(FName&gt;&gt;0x1D)&amp;7
    FName=FName&amp;0x1FFFFFFF
  elseif FNamePool2 then FName= FName &lt;0x25A and readInteger(FName*4+FNamePool) or FName
  else
    i=UEver&gt;7 and (FName&gt;&gt;0xE) or 0
    FName= (UEver&gt;7 and (FName&amp;0x3FFF) or FName) *  (8-sub)
  end

  --print(i)
  --print(FName)


  local pointer
  if FNamePool2 then
    pointer=readPointer(FNamePool2)+FName
  else
    pointer=readPointer(FNamePool+i*size)
    if not readPointer(pointer) then return nil end
    pointer=readPointer(pointer+FName)
  end

  --print(string.format('%X',pointer))

  if not readPointer(pointer) then return nil end
  local pointers,pointers2=pointer
  if stringoffset2 then pointer=readPointer(pointer+stringoffset2)end
  pointers2=pointer

  --print(string.format('%X',pointer))

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if CFName==1 and (not stringoffset or not stringoffsetid) then

     for k=0,0x30,4 do
        str=readString(pointer+k,13)
        if str=='ByteProperty' then stringoffset=k break end
      end

      if not stringoffset then
        for k=0,0x30,4 do
          str=readString(pointer+k,13*2,true)
          if str=='ByteProperty' then stringoffset=k forcewidechar=true break end
        end
      end

      pointer=pointers

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  if not stringoffset then return end
  --print(string.format('%X',pointer))

  pointer=pointers

  local widechar=stringoffsetid and (readInteger(pointer+stringoffsetid)&amp;1==1 or false) or false

  pointer=pointers2

  if stringoffset2 and not readPointer(pointer) then pointer=pointers+stringoffset2 end

  widechar= forcewidechar and true or widechar

  str= readString(pointer+stringoffset,200,widechar)

  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
  --print(stringoffset)


 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 --print(str)
 return str
end

function GetNameAlgo(object)
 if not object then return nil end

 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local pointer,size,str1,str2=readPointer(object+UObject.Class),targetIs64Bit() and 8 or 4
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 str1=FNameStringAlgo(readInteger(pointer+UObject.FNameIndex),true)

 --print(str1)
 --if readInteger(pointer+fnameoffset+4)~=0 then return nil end

 str2=FNameStringAlgo(readInteger(object+UObject.FNameIndex),true)
 --print(str2)
 if not str2 then str2=FNameStringAlgo(readInteger(object+UObject.FNameIndex-8),true)end
 --if str2=='None' then str2=FNameStringAlgo(readInteger(pointer+UObject.Outer+size),true)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end


 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameSafeAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameSafeAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafesAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end


function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local str= GetFullNameAlgo(object)
 if str then return str end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafesAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop,isNoIndex)
  local acclen=0
  for i=start,stop do
    local name=FNameStringAlgo(i+acclen,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i+acclen return end
        if isNoIndex then acclen=acclen+name:len()end
      end
    end
  end
end


function FindStringFName(namestr,isNoIndex)
  local size=targetIs64Bit() and 8 or 4
  if FNamePool2 then size=readInteger(FNamePool2+8)

  elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/size) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=i*num
    stop=(i+1)*num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1,isNoIndex))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function hasProperty(object)
  local str1,str2
  str1=GetFullNameSafeAlgo(object)
  if not str1 then return nil end
  local pointer =readPointer(object+UObject.Property)
  if pointer then
    str2=GetFullNameSafeAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function printInheritC(class)
  for i=0,10 do
    if not class or class==0 then break end
    print(GetFullNameSuperAlgo(class))
    class=readPointer(class+UObject.super)
  end
end

function printInheritI(instance)
  instance=readPointer(instance+UObject.Class)
  printInheritC(instance)
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress,i
  end
 end
end
--[[
function parsefrombig(tab,index,size)
 local datatable={}
 if not tab then return nil end
 for i=1,size do
  datatable[i]=tab[index+i]
 end
 return datatable
end
]]
sub=targetIs64Bit() and 0 or 4

function ue4parsetableFNamePool()
  ObjectList={}
  FNameList={}
  if readPointer(FNameString) or string.find(process,'StateOfDecay2')then return end
  local pool=getAddressSafe('FNamePool')
  if pool then
    local pointer,pointers
    if not readPointer(readPointer(pool)) then pointer=pool+0x10
    else
      pointer=pool
      if readPointer(readPointer(readPointer(pointer)))then
        if readPointer(readPointer(readPointer(readPointer(pointer))))then
          pointer=readPointer(pointer)
        end
      end
    end
    if not readPointer(pointer)then pointer=readPointer(pool2+0x10)end
    FNamePool=pointer
    FNameDict={}
    local j=0
    for i=0,500 do
      pointers=readPointer(pointer+i*(8-sub))
      if readPointer(pointers) then
        FNameDict[i+1]=readBytes(pointers,getregionsize(pointers)-1,true)
      else j=j+1 end
      if j&gt;5 then break end
    end
  end
end

function ue4parsetables()
 local size=targetIs64Bit() and 8 or 4
 ue4parsetableFNamePool()
 local pool2=getAddressSafe('GUObjectArray')
 if pool2 then
  if NOGUObjectsize then
    GUObjectsize=0xFFFFFFFF
    if not readPointer(readPointer(GUObjectAddress))then
      GUObjectAddress=allocateMemory(0x100) writePointer(GUObjectAddress,pool2)
    end
    return
  end


  local pointer,pointers=readPointer(pool2)
  GUObjectsize=readInteger(pool2+size)
  if not readPointer(pointer)then GUObjectsize=readInteger(pool2+0x10+size*2+4) GUObjectsize= GUObjectsize==0xFFFFFFFF and readInteger(pool2+0x10+size+4)or GUObjectsize  pointer=readPointer(pool2+0x10)end
  if not readPointer(readPointer(pointer)) then pointer=pointer+0x10 end
  --if GetFullNameSafeAlgo(readPointer(pointer)) then pointer=pool2 end
  if not readPointer(readPointer(readPointer(readPointer(readPointer(pointer))))) then pointer=pool2 end
  if not readPointer(readPointer(pointer)) then pointer=pointer+0x10 end
  GUObjectAddress=pointer
 end
end

function ue4parsetable()
  ue4parsetables()
  local size=targetIs64Bit() and 8 or 4

  local pointerss=readPointer(GUObjectAddress)
  for i=size,0x50,4 do
    if readPointer(pointerss+i) and readPointer(readPointer(readPointer(pointerss+i))) then UObjectMul=i print(string.format('%X',i))break end
  end

  if not UObject.FNameIndex then
    for i=0,3 do
      pointer = readPointer(pointerss+i*UObjectMul)
      if readPointer(pointer) and checkvalue(pointer+size,0x100,'Object',1) then
        UObject.FNameIndex=checkvalue(pointer+size,0x50,'Object',1)-pointer
        UObject.ObjectId=checkvalue(pointer+size,0x100,i,4)-pointer
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Class',1) then UObject.Class=j break end
        end
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Core',1) then UObject.Outer=j break end
        end
        break
      end
    end
  end
  return true
end


function ue4parsetablecheck()
  if not readPointer(GUObjectAddress) or not readPointer(FNamePool) then return ue4parsetable() end
  local pointer
  pointer=readPointer(readPointer(GUObjectAddress))
  if not ObjectTable or not ObjectTable[1] or (ObjectTable[1].Address ~= pointer) then return ue4parsetable() end

  local Address,FullName
  for i=1,#ObjectTable do
    if ObjectTable[i] and i&gt;#ObjectTable-0x10 then FullName=ObjectTable[i].Type..' '..ObjectTable[i].FullName Address=ObjectTable[i].Address  break end
  end

  if not GetFullNameSafeAlgo(Address) or FullName~=GetFullNameSafeAlgo(Address) then return ue4parsetable()end

 return false
end

function UE4AutoConfig()

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1) or 4
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))

end

function UE3AutoConfig()


if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))
print(string.format('%s = %X',Name,pointer))
UObject.propsize=checkvalue(pointer+UObject.Outer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
if classsize==0 then classsize=UObject.Outer+0x200 end
print((classsize-0x200)..' ~ '..(classsize+0x1000))
UObject.Offset=checkvalue(pointer+UObject.propsize,0x50,tostring(classsize-0x200)..'~'..tostring(classsize+0x1000),2)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))


end

function FindObject(pointer,start,stop,fullname)
  for j=start,stop do
    SaveObject(readPointer(pointer+j*UObjectMul))
    if FullNameList[fullname] then break end
  end
end

function StaticFindObjectAlgo(fullname)
  fullname=fullname:lower()
  if ue4parsetablecheck() then
    FullNameList={}
    ObjectLists={}
    ObjectTable={}
    HighestObjectID=0
  end
  if FullNameList[fullname] then return FullNameList[fullname].Address end

  local count=0x200
  local sizess= UObjectMul*count
  local ObjectId=UObject.ObjectId
  local num,start,stop
  totalobjects=0
  local size,pointer=targetIs64Bit() and 8 or 4

  for i=0,0x1000,size do
    pointer=readPointer(GUObjectAddress+i)
    if not readPointer(pointer) then break end
    size=getregionsize(pointer)
    num,start,stop=count,0,0
    for j=0,math.floor(size/sizess) do
      start=stop
      stop=stop+num
      --print(start..'~'..stop)

      createThread(FindObject(pointer,start,stop-1,fullname))
      if FullNameList[fullname] then return FullNameList[fullname].Address end
    end
  end
  return nil
end

function BasicObject(pointer,start,stop)
  Threadlist[#Threadlist+1]=i
  for j=start,stop do
    SaveObject(readPointer(pointer+j*UObjectMul))
  end
  Threadlist[#Threadlist]=nil
end

function BasicEnumObject()
  --ue4parsetablecheck()
  ObjectLists={}
  ObjectTable={}
  Threadlist={}
  FullNameList={}
  HighestObjectID=0
  local starttime=os.time()
  local count=0x200
  local sizess= UObjectMul*count
  local ObjectId=UObject.ObjectId
  local num,start,stop
  totalobjects=0
  local size,pointer=targetIs64Bit() and 8 or 4

  for i=0,0x1000,size do
    pointer=readPointer(GUObjectAddress+i)
    if not readPointer(pointer) then break end
    size=getregionsize(pointer)
    num,start,stop=count,0,0
    for j=0,math.floor(size/sizess) do
      start=stop
      stop=stop+num
      --print(start..'~'..stop)
      createThread(BasicObject(pointer,start,stop-1))
    end
  end
  for i=0,10000 do
    if #Threadlist==0 then break end
    sleep(1)
  end

  print(string.format('\nA Total of %u objects has been found in %u seconds',totalobjects,os.time()-starttime))
end

function registerFuncAlgo()
 if not extralist then
   extralist=createSymbolList()
   extralist.register()
 end
 local sizes,pointer=HighestObjectID+10
 for i=1,sizes do
   if string.find(ObjectTable[i].Type,'Function') then
     pointer=readPointer(ObjectTable[i].Address+UObject.funct)
     if readPointer(pointer) then extralist.addSymbol('UE',ObjectTable[i].FullName,pointer,1)end
   end
 end
end

function GetName1(pointer)
  if not readPointer(pointer+UObject.Class) then return nil end
  local typ=readQword(readPointer(pointer+UObject.Class)+UObject.FNameIndex)
  if not typ then return nil end
  local name=readQword(pointer+UObject.FNameIndex)
  typ=FNameStringAlgo(typ,true)
  name=FNameStringAlgo(name,true)
  return typ,name,readPointer(pointer+UObject.Outer)
end

function GetName2(pointer)
  if not readPointer(pointer) then return nil end
  local typ=readQword(readPointer(pointer+8))
  if not typ then return nil end
  local name=readQword(pointer+0x28)
  typ=FNameStringAlgo(typ,true)
  name=FNameStringAlgo(name,true)
  return typ,name,readPointer(pointer+0x10)
end

function SaveObject(pointer)
   if not readPointer(pointer)then return nil end
   if ObjectLists[pointer] then return ObjectLists[pointer] end
   local objid=readInteger(pointer+UObject.ObjectId)
   if not objid then return nil end

   local typ,name,outer
   if UE4ver&lt;25 then typ,name,outer=GetName1(pointer)
   else typ,name,outer=GetName2(pointer)
     if not typ or string.find(typ,'None') or not name or string.find(name,'None') then
       typ,name,outer=GetName1(pointer)
     end
   end

   if not typ or string.find(typ,'None') or not name or string.find(name,'None') then return nil end

   local ObjectData,size,pointers={},targetIs64Bit() and 8 or 4

   ObjectData.Outer= outer~=0 and outer or nil
   ObjectData.Name=name
   ObjectData.Type=typ
   ObjectData.Address=pointer

   if not ObjectData.Name then
     --print(ObjectData.Address)
     ObjectData.Name='InvalidName'
   end
   if ObjectTable[objid+1] and ( not string.find(typ,'Property') or UE4ver&lt;25 ) then return ObjectTable[objid+1] end

   ObjectData.ObjectId=objid

   if not readPointer(objid) and objid&lt;0xFFFFFFF and ( not string.find(typ,'Property') or UE4ver&lt;25 ) then
     ObjectTable[objid+1]=ObjectData
     if HighestObjectID&lt;objid then HighestObjectID=objid end
   end

   ObjectLists[pointer]=ObjectData

   SaveObject(ObjectData.Outer)
   local dataNew,str,dataOld=ObjectData,ObjectData.Name

   for x=0,10 do
     if not dataNew.Outer or not ObjectLists[dataNew.Outer] then break end
     dataOld=dataNew
     dataNew=ObjectLists[dataNew.Outer]
     if (string.find(dataOld.Type,'Property') or string.find(dataOld.Type,'Function'))
     and (not string.find(dataNew.Type,'Property') and not string.find(dataNew.Type,'Function'))
     then
       str=dataNew.Name..':'..str
     else
       str=dataNew.Name..'.'..str
     end
   end
   ObjectData.FullName=str
   FullNameList[str:lower()]=ObjectData

   totalobjects=totalobjects+1

   if not UObject.super or not UObject.member or not UObject.nextmember or not UObject.Offset
   or not UObject.propsize or not UObject.bitmask or not UObject.Property then
   return ObjectData end

   local super=readPointer(pointer+UObject.super)
   ObjectData.Super= super~=0 and super or nil
   if ObjectData.Super then ObjectData.Super=SaveObject(ObjectData.Super)end
   if ObjectData.Super then
     if not ObjectData.Super.Uper then ObjectData.Super.Uper={}end
     ObjectData.Super.Uper[#ObjectData.Super.Uper+1]=ObjectData
   end

   if string.find(typ,'Property')then
     ObjectData.Offset=readSmallInteger(pointer+UObject.Offset)
     ObjectData.Propsize=readSmallInteger(pointer+UObject.propsize)
     if string.find(typ,'StructProperty') or string.find(typ,'ObjectProperty') then
       ObjectData.Property={SaveObject(readPointer(pointer+UObject.Property))}
       if not ObjectData.Property[1] then ObjectData.Property=nil end
     elseif string.find(typ,'MapProperty') or string.find(typ,'ArrayProperty') then
       ObjectData.Property={SaveObject(readPointer(pointer+UObject.Property)),SaveObject(readPointer(pointer+UObject.Property+size))}
       if not ObjectData.Property[1] then ObjectData.Property=nil end
     elseif string.find(typ,'BoolProperty')then ObjectData.Bit=readBytes(pointer+UObject.bitmask,1) end
   else
     local member=SaveObject(readPointer(pointer+UObject.member))
     if member and (string.find(member.Type,'Function') or string.find(member.Type,'Property')) then
       ObjectData.Member={member}
       for i=0,300 do
         member=SaveObject(readPointer(member.Address+UObject.nextmember))
         if not member then break end
         if not string.find(member.Type,'Function') then
           ObjectData.Member[#ObjectData.Member+1]=member
         end
       end
     end
   end

   return ObjectData
end

function isStructExist(name)
  for i=1,#StructList do
    if StructList[i].Name==name then return StructList[i] end
  end
  return nil
end

function SaveAndRemoveStruct()
  StructList={}
  local count=getStructureCount()
  for i=count-1,0,-1 do
    local struct=getStructure(i)
    StructList[i+1]=struct
    struct:removeFromGlobalStructureList()
  end
end

function DeleteStruct(Struct)
  local count=#StructList
  for i=1,count do
    if Struct==StructList[i] then
      Struct:Destroy()
      StructList[i]=nil
    end
    if not StructList[i] and StructList[i+1] then
      StructList[i]=StructList[i+1]
      StructList[i+1]=nil
    end
  end
end

function LoadStruct()
  for i=1,#StructList do
    StructList[i]:addToGlobalStructureList()
  end
end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function checkvalue(address,size,value,typ)
  local cvalue,tempvalue,value2=readBytes(address,size,true)

  if type(value)==type('') and string.find(value,'~') then
    value2=tonumber(value:sub(string.find(value,'~')+1,value:len()))
    value=tonumber(value:sub(1,string.find(value,'~')-1))
  end

  if not cvalue then return false end
  if typ==1 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      --print(FNameStringAlgo(tempvalue,true))
      local str=FNameStringAlgo(tempvalue,true)

      if str and string.find(str,value) then return address+i-1 end
    end

  elseif typ==2 then
    for i=1,#cvalue,2 do
      datatable={}
      for m=1,2 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToWord(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==4 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==8 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,8 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToQword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  end
  return nil
end

function fillstruct4bytes(Struct)
  if not getElementByOffset(Struct,0) then local e=Struct.addElement() e.Offset=0 e.Vartype=vtDword end
  Struct.beginUpdate()
  local count=Struct.Count-1
  local list,k,element1,element2,size,bytesize={},1
  for i=0,count do
    element1=Struct.Element[i]
    element2=Struct.Element[i+1]
    if element2 then
      bytesize=element1.Bytesize
      if bytesize&lt;4 then bytesize=4 end
      size=element2.Offset-element1.Offset-bytesize
      if size&gt;0 then
        if size%4&gt;0 then size=4-size%4+size end
        local start=element1.Offset
        if start%4&gt;0 then start=4-start%4+start
        else start=start+4 end
        size=size/4
        for j=0,size-1 do
          if (start+j*4)&gt;=(element1.Offset+bytesize) then
            list[k]=start+j*4
            k=k+1
          end
        end
      end
    end
  end
  for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
  Struct.endUpdate()
end

function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName,Instance)
  if not FullNameOrAddress then return
  elseif type(FullNameOrAddress)==type({})then
    RunningStructCounter=0
    SaveAndRemoveStruct()
    for i=1,#FullNameOrAddress do
      createThread(ue4createstruct(FullNameOrAddress[i],StructName[i],isGlobal,isfullname,Structu,AddedOffset,AddedName,Instance))
    end

    while(true)do
      if not RunningStruct or #RunningStruct==0 then break
      else sleep(1)end
      RunningStructCounter=RunningStructCounter+1
      if RunningStructCounter&gt;180000 then break end
    end
    RunningStructCounter=nil
    LoadStruct()
    return
  end
  if StructName and isGlobal then local Struct=isStructExist(StructName) if Struct then return end end--DeleteStruct(Struct)end end

  local member,Offset,Property,bitmask,nextmember,super,propsize=UObject.member,UObject.Offset,UObject.Property,UObject.bitmask,UObject.nextmember,UObject.super,UObject.propsize
  local Object,Name,Class,PropName,Typ,Off,pointer,e,f=FullNameOrAddress

  if type(FullNameOrAddress)==type('') then Object=StaticFindObjectAlgo(FullNameOrAddress) end
  if not Object then print(FullNameOrAddress..' not found...') return end
  Name=GetNameAlgo(Object)
  if not Name or not string.find(Name,' ') then print(FullNameOrAddress..' invalid Object?') return end
  if not StructName then
    Class=Name:sub(1,string.find(Name,' ')-1)
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
  else Name=StructName end

  local Struct=Structu
  if not Struct then Struct=createStructure(Name)end

  if not AddedName then AddedName='' end
  local RunningStructName=name
  if not AddedOffset then
    if not RunningStruct then RunningStruct={} end
    RunningStruct[#RunningStruct+1]=RunningStructName

    AddedOffset=0 Struct.beginUpdate()
  else
    local FullName=GetFullNameSafeAlgo(Object)
    FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())

    if not LocalStruct then LocalStruct={}end
    if LocalStruct[FullName] then copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    else
      local copy=createStructure(FullName)
      ue4createstruct(Object,nil,nil,isfullname,copy)
      LocalStruct[FullName]=copy
      copyStruct(LocalStruct[FullName],Struct,AddedOffset,AddedName)
    end
    return
  end
  --if not RunningStructCounter and AddedName=='' then SaveAndRemoveStruct() end

  --print(string.format('%X',Object))
  while(true)do
    if not Object or Object==0 then break end
    Name=GetNameAlgo(Object)
    if not Name then break end
    Name=Name:sub(string.find(Name,' ')+1,Name:len())
    if Name=='Object' then break end
    print(GetFullNameSafeAlgo(Object))
    pointer=readPointer(Object+UObject.member)
    while(true)do
      if not pointer or pointer==0 then break end
      PropName=GetFullNameSafeAlgo(pointer)
      if PropName and string.find(PropName,':') then
        Typ=PropName:sub(1,string.find(PropName,' ')-1)
        if not string.find(Typ,'Function')then
          if not isfullname then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
          else PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())end
          PropName=AddedName..PropName
          Off=readInteger(pointer+Offset)+AddedOffset
          if Class=='UserDefinedStruct' and string.find(PropName,'_') then PropName=PropName:sub(1,string.find(PropName,'_')-1)end
          if Typ=='StructProperty' then
            ue4createstruct(readPointer(pointer+Property),nil,nil,isfullname,Struct,Off,PropName..'.')
            if not getElementByOffset(Struct,Off) then e=Struct.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
          else
            e=Struct.addElement()
            e.Offset=Off
            e.Name=PropName
            if Instance and PropName=='RowStruct' then
              local spointer=readPointer(Instance+Off)
              local sname,sstruct=GetFullNameSafeAlgo(spointer)
              if sname then
                print(sname)
                if string.find(sname,'.') then sname=sname:sub(string.find(sname,'.')+1,sname:len())end

                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[sname] then sstruct=ArrayStruct[PropName]
                else
                  sstruct=createStructure(sname)
                  ArrayStruct[sname]=sstruct
                  ue4createstruct(spointer,nil,nil,isfullname,sstruct)
                end

                f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name='Table' f.Vartype=vtPointer
                local ssstruct=createStructure('DataTable')
                f.setChildStruct(ssstruct)

                for r=0,10 do
                  f=ssstruct.addElement() f.Offset=r*0x18 f.Name=string.format('[%u] FName',r)  f.Vartype=vtQword
                  f=ssstruct.addElement() f.Offset=r*0x18+8 f.Name=string.format('[%u] Data',r) f.Vartype=vtPointer
                  f.setChildStruct(sstruct)
                end
                fillstruct4bytes(ssstruct)

                f=Struct.addElement() f.Offset=e.Offset+0x10-sub*2 f.Name='Size' f.Vartype=vtDword
              end
            end
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ]end
            if Typ=='ArrayProperty' or Typ=='MapProperty' then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              local isMap= Typ=='MapProperty'

              Prop=readPointer(pointer+Property)
              PropName=GetFullNameSafeAlgo(Prop)
              if not PropName then PropName=GetFullNameSafeAlgo(Prop)end
              if PropName then
                Typ=PropName:sub(1,string.find(PropName,' ')-1)
                PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end
                if Typ=='StructProperty' then
                  Prop=readPointer(Prop+Property)
                  PropName=GetNameAlgo(Prop)
                  if PropName then
                    PropName=PropName:sub(string.find(PropName,' ')+1,PropName:len())..'[]'
                    --print(Typ..' '..PropName)
                  end
                else PropName=PropName..'[]' end
                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[PropName] then e.setChildStruct(ArrayStruct[PropName])
                else
                  local stru=createStructure(PropName)
                  ArrayStruct[PropName]=stru
                  e.setChildStruct(stru)

                  stru.beginUpdate()
                  local ppsize=0
                  if isMap then
                    for j=0,1 do
                      Prop=readPointer(pointer+Property+j*(8-sub))
                      PropName=GetFullNameSafeAlgo(Prop)
                      if PropName then
                        ppsize=(readInteger(Prop+propsize)&lt;4 and 4 or readInteger(Prop+propsize))+ppsize
                      end
                    end
                    ppsize=ppsize+0x8
                    --print(ppsize)
                  end

                  for j=0,1 do
                    Prop=readPointer(pointer+Property+j*(8-sub))
                    PropName=GetFullNameSafeAlgo(Prop)
                    if PropName and string.find(PropName,':') then
                      Typ=PropName:sub(1,string.find(PropName,' ')-1)
                      --if Typ=='StructProperty' then print(PropName)end
                      PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())
                      if string.find(PropName,':') then PropName=PropName:sub(string.find(PropName,':')+1,PropName:len())end

                      local psize=isMap and ppsize or readInteger(Prop+propsize)
                      local Offs=isMap and readInteger(Prop+Offset) or 0
                      local Propt
                      if Typ=='StructProperty' then
                        Propt=readPointer(Prop+Property)
                      end
                      for p=0,10 do
                        Off=p*psize+Offs
                        local ItemName=string.format('[%u] ',p)
                        if Typ=='StructProperty' then
                          ue4createstruct(Propt,nil,nil,isfullname,stru,Off,ItemName)
                          --if not getElementByOffset(stru,Off) then e=stru.addElement() e.Offset=Off e.Name=PropName e.Vartype=vtDword end
                        else
                          local g=stru.addElement()
                          g.Offset=Off
                          g.Name=ItemName..PropName
                          if not ue4type[Typ] then g.Vartype=vtDword
                          else g.Vartype=ue4type[Typ]end
                        end
                      end
                    end
                  end
                  stru.endUpdate()
                  fillstruct4bytes(stru)
                end
              end
            elseif Typ=='BoolProperty' then e.ChildStructStart=readBytes(pointer+bitmask,1)end
          end
        end
      end
      pointer=readPointer(pointer+nextmember)
    end
    Object=readPointer(Object+super)
  end

  if AddedName~='' then return end


  Struct.endUpdate()
  fillstruct4bytes(Struct)
  if isGlobal then StructList[#StructList+1]=Struct end

  local count=#RunningStruct
  for i=1,count do
    if RunningStruct[i]==RunningStructName then RunningStruct[i]=nil end
    if not RunningStruct[i] and RunningStruct[i+1] then RunningStruct[i]=RunningStruct[i+1] RunningStruct[i+1]=nil end
  end
  if not RunningStructCounter then LoadStruct() end

end


function getElementByOffset(struct,offset)
  for i=0,struct.Count-1 do
    if struct.Element[i].Offset==offset then return i end
  end
  return nil
end

function copyStruct(original,copy,AddedOffset,AddedName)
  if not copy then copy=createStructure(original.Name..'_copy')end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  copy.beginUpdate()
  for i=0,original.Count-1 do
    local e=copy.addElement()
    e.Offset=original.Element[i].Offset+AddedOffset
    if original.Element[i].Name=='' then e.Name=original.Element[i].Name
    else e.Name=AddedName..original.Element[i].Name end
    e.Vartype=original.Element[i].Vartype
    e.ChildStruct=original.Element[i].ChildStruct
    e.ChildStructStart=original.Element[i].ChildStructStart
    e.Bytesize=original.Element[i].Bytesize
  end
  copy.endUpdate()
  return copy
end

function uecreatestruct(instance,name,depth,isfullname)
  local pointer=readPointer(instance+UObject.Class)
  local classname=GetFullNameSafeAlgo(pointer)
  if not classname then print('instance is invalid') return end
  if classname:find(' ') then classname=classname:sub(classname:find(' ')+1) end

  print(string.format("createThread(ue4createstruct(\'%s\',\'%s\',0))",classname,name))
  ue4createstruct(pointer,name,depth,isfullname)
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname,class
  address,name,fullname,class=ue_findRealStartOfObject(Instance)

  if class then
   -- print('banana3')
    --if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then ue4createstructfast(fullname,nil,nil,nil,Struct) end
    SaveAndRemoveStruct()
    ue4createstruct(class,nil,nil,nil,Struct,nil,nil,Instance)
    --LoadStruct()
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_SymbolLookupCallback(symbol)
  --print('banana1')
  local str='Function '
  if string.find(symbol,str) then
    symbol=symbol:sub(string.find(symbol,str)+str:len(),symbol:len())
    local pointer=StaticFindObjectAlgo(symbol)
    if pointer then return readPointer(pointer+UObject.funct)end
  end
  return nil
end

function ue_findRealStartOfObject(address)
  local pointer=readPointer(address+UObject.Class)
  if pointer then
    local FullName=GetFullNameSafeAlgo(pointer)
    if FullName then
      local Name=GetNameAlgo(pointer)
      FullName=FullName:sub(string.find(FullName,' ')+1,FullName:len())
      Name=Name:sub(string.find(Name,' ')+1,Name:len())
      return address,Name,FullName,pointer
    end
  end

  if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then
    for i=1,#UEObj do
      if UEObj[i].MemberSize and UEObj[i].Class and UEObj[i].Class.MemberSize and UEObj[i].Class.MemberSize&gt;0 and not string.find(UEObj[i].Class.FullName,'/Script/CoreUObject.') then
         if address&gt;=UEObj[i].Address and address&lt;UEObj[i].Address+UEObj[i].Class.MemberSize then
           local name
           return UEObj[i].Address,UEObj[i].Class.Name,UEObj[i].Class.FullName,UEObj[i].Class.Address
         end
      end
    end
  end

  return address
end


function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

function findLastCall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'ret',size)
  if not result then print(address..' cant find ret?') return nil end
  result=result-getAddress(address)
  result=findOpcodes(address,'call ',result)
  local ext, opc, byt, add=splitDisassembledString(disassemble(result[#result]))
  opc=opc:gsub('call ','')
  return opc
end

function followjmp(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'jmp ',size)
  if not result then print(address..' cant find jmp?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('jmp ','')
  return opc
end

function followcall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'call ',size)
  if not result then print(address..' cant find call?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('call ','')
  return opc
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function startstop(modulename,stopaddress)
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  return modulename,stopaddress
end

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
  local state = not(compactmenuitem.Caption == 'Compact View Mode')
  if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
  getMainForm().Splitter1.Visible = state
  getMainForm().Panel4.Visible = state
  getMainForm().Panel5.Visible = state
end

function addCompactMenu()
  if compactmenualreadyexists then return end
  local parent = getMainForm().Menu.Items
  compactmenuitem = createMenuItem(parent)
  parent.add(compactmenuitem)
  compactmenuitem.Caption = 'Compact View Mode'
  compactmenuitem.OnClick = cycleFullCompact
  compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
if string.find(process,'MassEffect') then
  isMassEffect=true
  --findAddress('GUObjectArray',1,'4C * * * * * * 49 3B * 0F 84 * * * * 48 89 * * * 48 89banana',process)
  --print('------------------')
  local result2,result=findAddress('FNamePool',0,'C0 CA 45 80 00 00 00 00 00 00 00 00 4E 6F 6E 65 00banana',process,nil,0,true)
  for i=1,#result2 do
    result=pointerscan(getAddress(result2[i]),process)
    for j=1,#result do
      stringoffset=0xC
      unregisterSymbol('FNamePool') registerSymbol('FNamePool',result[j],true)
    end
  end

  else isMassEffect=nil
end
local starttime=os.time()

if not UE4ver then UE4ver=ue4versioncheck() end

if not getAddressSafe('GUObjectArray') and not getAddressSafe('FNamePool')  then

  if targetIs64Bit() then

    local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
    if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
    if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
    if not address then findAddress('GUObjectArray','1,-0x68','4C 8B 44 24 60 8B 44 24 78 * * * 48 8Dbanana',process)
    else findAddress('GUObjectArray',1,address)end

    if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
      if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
      elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
      else UE4ver=20 end
    end

    ue4config()

    if UE4ver&gt;=23 then
      address=findAddress('FNamePool',0,'4C 8D 05 * * * * EB 16 48 8D 0D * * * * E8banana',process,nil,0,true)[1]
      if not address then address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]end
      if address then findAddress('FNamePool',1,address)
      else error('FNamePool aob not found...')end
    elseif string.find(process,'StateOfDecay2')then
      findAddress('FNamePool',1,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      findAddress('FNamePool2',3,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      FNamePool=getAddress('FNamePool')
      FNamePool2=getAddress('FNamePool2')
    else
      address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
      if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
      if address then findAddress('FNamePool',1,address)
      else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
    end

  else
    ue4config()
    if UE4ver&gt;2 then
      findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
      findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
    else
      findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
      findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
    end
  end

end

if targetIs64Bit() then
  if UE4ver&gt;7 then
    local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
    if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
    if not address then error('GEngine aob not found...')end
    findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)
  end
else
  if UE4ver&gt;2 then
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  else
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  end
end

print('AOBScan done : '..os.time()-starttime)

ue4parsetable()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

print('Table parsing done : '..os.time()-starttime)


if not UObject.super or not UObject.member or not UObject.nextmember or not UObject.Offset
or not UObject.propsize or not UObject.bitmask or not UObject.Property or not UObject.funct
or not UObject.enumoffset or  not UObject.enummul or not UObject.enumname or not UObject.enumindex
then if UE4ver&gt;7 then UE4AutoConfig() else UE3AutoConfig() end end




--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

if UE4ver&gt;7 then

   ue4createstruct({
   '/Script/Engine.GameEngine',
   '/Script/Engine.GameViewportClient',
   '/Script/Engine.GameInstance',
   '/Script/Engine.LocalPlayer',
   '/Script/Engine.PlayerController',
   '/Script/Engine.CharacterMovementComponent',
   '/Script/Engine.CapsuleComponent',
   '/Script/Engine.Character',
   '/Script/Engine.World'
   },{
   'GameEngine',
   'GameViewportClient',
   'GameInstance',
   'LocalPlayer',
   'PlayerController',
   'MovementComponent',
   'CapsuleComponent',
   'GPlayer',
   'World'
   },1)

end
print('All done : '..os.time()-starttime..'\n')
if not ue_SymbolLookupCallbackID then
  ue_SymbolLookupCallbackID=registerSymbolLookupCallback(ue_SymbolLookupCallback,slNotSymbol)
end
--registerFuncAlgo()
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbolLookupCallback(ue_SymbolLookupCallbackID)
ue_SymbolLookupCallbackID=nil
--[[
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')]]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26180</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end
--[[
UEObjt=createThread(function()
  while(true)do
    if not UEObj and not enumUEObjIsRunning then enumUEObj(1)
    elseif not enumUEObjIsRunning then enumUEObj(1,1)end
    sleep(30000)
  end
end)
 ]]
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil

--UEObjt:terminate()
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26181</ID>
                  <Description>"Basic UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

local starttime=os.time()
if ue4parsetablecheck() or #ObjectTable&lt;0x30000 then BasicEnumObject() end

totalobject=0
local Path = 'C:\\test\\'
local filename= string.format('[%s] ObjectsDump.txt',process)
local file,err = io.open(Path..filename, 'w')
assert(file,err)
print(Path..filename)
file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
local size,sizes,pointer,datatable,pointers,propname,offset,list,str,strid,name,objid=targetIs64Bit() and 8 or 4,HighestObjectID+10
for i=1,sizes do
  if ObjectTable[i] then
    totalobject=totalobject+1
    str=string.format('%016X',ObjectTable[i].Address)
    strid=string.format('%08u',ObjectTable[i].ObjectId)
    name=ObjectTable[i].Type..' '..ObjectTable[i].FullName
    if ObjectTable[i].Offset then
      strid=string.format('%8X',ObjectTable[i].Offset)
    end
    if ObjectTable[i].Property and #ObjectTable[i].Property==1 then
      name=string.format('%s ~ %s %s',name,ObjectTable[i].Property[1].Type,ObjectTable[i].Property[1].FullName)
    end

    file:write(string.format('[%s] %s %s\n',strid,str,name))

    if ObjectTable[i].Property and #ObjectTable[i].Property==2 then
      for j=1,2 do
        name=string.format('%s %s',ObjectTable[i].Property[j].Type,ObjectTable[i].Property[j].FullName)
        if ObjectTable[i].Property[j].Property and ObjectTable[i].Property[j].Property[1] then
          name=string.format('%s ~ %s %s',name,ObjectTable[i].Property[j].Property[1].Type,ObjectTable[i].Property[j].Property[1].FullName)
        end
        file:write(string.format('[%8X] %016X %s\n',readInteger(ObjectTable[i].Property[j].Address+UObject.Offset),ObjectTable[i].Property[j].Address,name))
      end
    end

    if UObject.enumoffset and UObject.enummul and UObject.enumindex and UObject.enumname then
    if ObjectTable[i].Type=='UserDefinedEnum' or ObjectTable[i].Type=='Enum' then
      list=ObjectTable[i].Address+UObject.enumoffset
      for k=0,readInteger(list+size)-1 do
        pointers=readPointer(list)+k*UObject.enummul
        offset=readBytes(pointers+UObject.enumindex,1)
        if not offset then break end
        if offset==0 then offset=k end
        propname=FNameStringAlgo(pointers+UObject.enumname)
        strid=string.format('%8X',offset)
        str=string.format('%016X',pointers)
        file:write(string.format('[%s] %s %s\n',strid,str,propname))
      end
    end
    end

    if ObjectTable[i].Member and UE4ver&gt;=25 then
      for m=1,#ObjectTable[i].Member do
        if not string.find(ObjectTable[i].Member[m].Type,'Function')then

        totalobject=totalobject+1


        str=string.format('%016X',ObjectTable[i].Member[m].Address)
        strid=string.format('%08u',ObjectTable[i].Member[m].ObjectId)
        name=ObjectTable[i].Member[m].Type..' '..ObjectTable[i].Member[m].FullName
        if ObjectTable[i].Member[m].Offset then
          strid=string.format('%8X',ObjectTable[i].Member[m].Offset)
        end
        if ObjectTable[i].Member[m].Property and #ObjectTable[i].Member[m].Property==1 then
          name=string.format('%s ~ %s %s',name,ObjectTable[i].Member[m].Property[1].Type,ObjectTable[i].Member[m].Property[1].FullName)
        end

        file:write(string.format('[%s] %s %s\n',strid,str,name))

        if ObjectTable[i].Member[m].Property and #ObjectTable[i].Member[m].Property==2 then
        for j=1,2 do
          name=string.format('%s %s',ObjectTable[i].Member[m].Property[j].Type,ObjectTable[i].Member[m].Property[j].FullName)
          if ObjectTable[i].Member[m].Property[j].Property and ObjectTable[i].Member[m].Property[j].Property[1] then
            name=string.format('%s ~ %s %s',name,ObjectTable[i].Member[m].Property[j].Property[1].Type,ObjectTable[i].Member[m].Property[j].Property[1].FullName)
          end
          file:write(string.format('[%8X] %016X %s\n',readInteger(ObjectTable[i].Member[m].Property[j].Address+UObject.Offset),ObjectTable[i].Member[m].Property[j].Address,name))
        end
        end
    end



      end
    end

  end
end
file:close()
print(string.format('\nA Total of %u objects has been dumped in %u seconds',totalobject,os.time()-starttime))

shellExecute(Path..filename)

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26182</ID>
                  <Description>"Basic UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if readPointer(FNameString) or string.find(process,'StateOfDecay2')then size=0xFFFFFFFF
 elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 local starttime=os.time()
 local Path = 'C:\\test\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %u seconds',totalname,os.time()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26183</ID>
                  <Description>"Construct Console"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function AAscript(script)
  local success,erro=autoAssembleCheck(script)
  if not success then
    print('\n'..erro..'\n')
    local scriptstr=createStringlist()scriptstr.Text=script
    for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    error('autoAssemble failed')
  end
  autoAssemble(script)
end

AAscript("aobscanmodule(StaticConstructObject,$process,4C ?? ?? ?? ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D ?? ?? ?? ?? ?? ?? 48 81 ?? ?? ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? 48 89)\nregistersymbol(StaticConstructObject)")
local StaticConstructObject=getAddress('StaticConstructObject')
local Console=executeCodeEx
(
  0,nil,
  getAddress(StaticConstructObject),
  getAddress('[[GEngine]+GameEngine.ConsoleClass]'),
  getAddress('[[GEngine]+GameEngine.GameViewport]'),
  0,0,0,0,0,0,0
)
writePointer('[[GEngine]+GameEngine.GameViewport]+GameViewportClient.ViewportConsole',Console)


[DISABLE]
--"NewObject with empty name can't be used to create default subobjects"


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26184</ID>
                  <Description>"Get GEngine "</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
unregisterSymbol('GEngine')
--[[
local result=UEfindInstancesOfClass('/Script/Engine.GameEngine')
for i=1,#result do
  print(string.format('%X:%s',result[i].Address,result[i].Name))
  if string.find(result[i].Name,'e_') then registerSymbol('GEngine',pointerscan(result[i].Address,process)[1]) end
end
]]


--[[

BasicEnumObject()
for i=1,#ObjectTable do
  if string.find(ObjectTable[i].Type,'GameEngine') and not string.find(ObjectTable[i].FullName,'Default') then
    print(string.format('%X:%s',ObjectTable[i].Address,GetFullNameSafeAlgo(ObjectTable[i].Address)))
    registerSymbol('GEngine',pointerscan(ObjectTable[i].Address,process)[1])  break
  end
  if i==#ObjectTable then print('GameEngine instance not found...')end

end
 ]]

function FindObjectName(name)
  for i=1,#ObjectTable do
    if string.find(ObjectTable[i].FullName,name) then return ObjectTable[i]end
  end
end

function FindObjectType(name,exception)
  for i=1,#ObjectTable do
    if string.find(ObjectTable[i].Type,name) and not string.find(ObjectTable[i].FullName,exception) then return ObjectTable[i]end
  end
end
--ue4parsetable()
--BasicEnumObject()
local Object=FindObjectName('GameEngine')
for i=0,4 do
  if Object.Uper and Object.Uper[1] then Object=Object.Uper[1] else break end
end
Object=Object.FullName:sub(string.find(Object.FullName,'%.')+1,Object.FullName:len())

Object=FindObjectType(Object,'Default')
print(string.format('%X : %s %s',Object.Address,Object.Type,Object.FullName))




registerSymbol('GEngine',pointerscan(Object.Address,process)[1],true)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26185</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  local value=readInteger(address+getAddress('CapsuleComponent.RelativeLocation.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | ChildStructStart('PlayerController','bActorEnableCollision')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26186</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26187</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe('[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+PlayerController.bCanBeDamaged')
if address then
local bCanBeDamaged=readBytes(address,1) | ChildStructStart('PlayerController','bCanBeDamaged')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26188</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
if not jumpdefault then jumpdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')end
if not AirControldefault then AirControldefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(1000)
jump.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.JumpZVelocity')
local address2=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxAcceleration')
local address3=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.AirControl')
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26189</ID>
                  <Description>"WalkSpeed Multiplier                             Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
walkmultiplier=1
if syntaxcheck then return end
if not walkdefault then walkdefault=readFloat('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')end
[ENABLE]
walkpmuti=createHotkey(function() walkmultiplier=walkmultiplier+0.5 end,VK_NUMPAD3)
walk = createTimer()
walk.setInterval(1000)
walk.OnTimer = function()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault*walkmultiplier)end
end
[DISABLE]
walk.destroy()
walkpmuti.destroy()
local address=getAddressSafe('[[[[[[[GEngine]+GameEngine.GameInstance]+GameInstance.LocalPlayers]]+LocalPlayer.PlayerController]+PlayerController.Character]+GPlayer.CharacterMovement]+MovementComponent.MaxWalkSpeed')
if address then writeFloat(address,walkdefault)end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26190</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>GameEngine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26191</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>PlayerController.Character</Offset>
                    <Offset>LocalPlayer.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>GameEngine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26192</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+GPlayer.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26193</ID>
                          <Description>"JumpZVelocity"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26194</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26195</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26196</ID>
                          <Description>"MaxAcceleration"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+MovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26197</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26198</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26199</ID>
                  <Description>"FNamePool scanner V2 (Generic)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'),nil,nil,getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00')+0x50)
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            --if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            --end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26200</ID>
                  <Description>"FNamePool scanner V3 (Unicode)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=true
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  print(strlist[i])
  result=pointerscan(getAddress(strlist[i])-0x50,nil,nil,getAddress(strlist[i]))
  for j=1,#result do
    if string.sub(result[j],result[j]:len()-3,result[j]:len()-2)=='00' then
      print(result[j])
      pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
      pointer1=readPointer(pointer1)
      pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
      pointer2=readPointer(pointer2)
      pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
      pointer3=readPointer(pointer3)
      if pointer1 and pointer2 and pointer3 then
         print(strlist[i]..'&lt;-'..result[j])
         result2=pointerscan(getAddressSafe(string.sub(result[j],1,result[j]:len()-2)..'00'))
         for k=1,#result2 do
           print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
           if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end

         end
      end
    end
  end
end
::done::
print('done')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26201</ID>
                  <Description>"FNamePool scanner V4 (BatmanAk)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local size= targetIs64Bit() and 8 or 4
local result2,result,result3,result4,pointer1,pointer2,pointer3,tempstringoffset,str,tempfnamepooloffset=stringscan('ByteProperty',nil,nil,isUnicode)
for i=1,#result2 do
--print(result2[i])
  result=pointerscan(getAddress(result2[i]..'-50'),nil,nil,getAddress(result2[i]))

  for j=1,#result do
    tempstringoffset=getAddress(result2[i])-readPointer(getAddress(result[j]))

    for k=size,0x50,4 do
      str=readString(readPointer(getAddress(result[j])+k)+tempstringoffset,0x30,isUnicode)
      if str and str=='IntProperty' then
        stringoffset=tempstringoffset
        print(result2[i]..'&lt;-'..result[j])

        result3=pointerscan(getAddress(result[j]..'-50')-k,nil,nil,getAddress(result[j]))
        for m=1,#result3 do


          pointer1=readPointer(result3[m]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result3[m]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result3[m]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])

            --print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])
            stringoffset2=0xc--((getAddress(result[j])-readPointer(result3[m])+size)/2)-size
          --print(string.format('%X',((getAddress(result[j])-readPointer(result3[m])+size)/2)-size))
            stringmul=k

            result4=pointerscan(getAddress(result3[m])-0x50,process,nil,getAddress(result3[m])+0x50)
            for n=1,#result4 do
              print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m]..'&lt;-'..result4[n])
              unregisterSymbol('FNamePool') registerSymbol('FNamePool',result4[n],true)
            end
          end
        end
      end
    end
  end
end
::done::
print('done')



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26202</ID>
                  <Description>"UE4 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              if checkvalue(pointer2+size,0x50,1,4)then UObject.ObjectId=checkvalue(pointer2+size,0x50,1,4)-pointer2
              else UObject.ObjectId=checkvalue(pointer2,0x50,1,4)-pointer2 end
              UObject.Class=checkvalue(pointer2+size,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2+size,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2+size,0x50,pointer,size)-pointer2

              local str
              if UE4ver&lt;9 and targetIs64Bit() then
                str=string.format('8:0x%X 8:0x%X',pointer,pointer2)
              elseif UE4ver&lt;9 then
                str=string.format('4:0x%X 4:0x%X',pointer,pointer2)
              elseif targetIs64Bit() then
                str=string.format('8:0x%X 8:* 8:* 8:0x%X',pointer,pointer2)
              else
                str=string.format('4:0x%X 4:* 4:* 4:* 4:0x%X',pointer,pointer2)
              end
              print(str)
              result2=groupscan(str)
              for n=1,#result2 do
                local result3
                if not Aligned or getAddress(result2[n])%size==0 then
                  print(string.format('%X&lt;-%s',pointer2,result2[n]))
                  --result3=pointerscan(getAddress(result2[n]:sub(1,result2[n]:len()-2)..'00'))
                end
                if not result3 or #result3&lt;=0 then result3=pointerscan(getAddress(result2[n]))end
                for o=1,#result3 do
                  local result4
                  if not Aligned or getAddress(result3[o])%size==0 then

                    --if not inModule(result3[o]) then
                      print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))

                    --end

                    if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                      unregisterSymbol('GUObjectArray')
                      registerSymbol('GUObjectArray',result3[o]..'-10',true)
                      goto done
                    end

                    result4=pointerscan(getAddress(result3[o]))


                  end
                  if not result4 then result4={}end
                  for q=1,#result4 do
                    if not Aligned or getAddress(result4[q])%size==0 then
                      print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))

                      if inModule(result4[q]) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result4[q]..'-10',true)
                        goto done
                      end

                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26203</ID>
                  <Description>"UE4 Object scanner V2"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              UObject.ObjectId=checkvalue(pointer2+size,0x50,1,4)-pointer2
              UObject.Class=checkvalue(pointer2+size,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2+size,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2+size,0x50,pointer,size)-pointer2

              local str

              for p=4,0,-1 do
                str=string.format('%u:0x%X',size,pointer)
                for q=1,p do
                  str=str..' 4:*'
                end
                str=str..string.format(' %u:0x%X',size,pointer2)
                UObjectMul=(4*p)+size

                print(str)


                result2=groupscan(str)
                for n=1,#result2 do
                  local result3
                  if result2[n]:sub(result2[n]:len()-1,result2[n]:len())=='00' then
                    print(string.format('%X&lt;-%s',pointer2,result2[n]))
                    result3=pointerscan(getAddress(result2[n]))
                  end
                  if not result3  then result3={}end
                  for o=1,#result3 do
                    local result4
                    if not Aligned or getAddress(result3[o])%size==0 then
                      --if not inModule(result3[o]) then
                        print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))
                      --end
                      if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result3[o]..'-10',true)
                        result4=pointerscan(getAddress(result3[o]..'-10'),process)
                        if result4[1] then
                          print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[1]))
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[1],true)
                        end
                        goto done
                      end
                      result4=pointerscan(getAddress(result3[o]))
                    end
                    if not result4 then result4={}end
                    for q=1,#result4 do
                      if not Aligned or getAddress(result4[q])%size==0 then
                        print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))
                        if inModule(result4[q]) then
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[q]..'-10',true)

                          goto done
                        end
                      end
                    end
                  end
                end
              end

            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26204</ID>
                  <Description>"UE4 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]
if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1) or 4
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26205</ID>
                  <Description>"UE3 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
UE4ver=ue4versioncheck()
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object',isMassEffect)
if not UObject then  UObject = {} end
print(Object)
local size,pointer,pointer1,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  pointer=getAddress(result[i])-0x50
  for j=0,0x200,4 do
    pointer1=checkvalue(readPointer(pointer+j),0x200,'Class',1)
    if pointer1 then
      for k=0,0x200,4 do
        pointer2=checkvalue(readPointer(pointer+k),0x200,'Core',1)
        if pointer2 then
          print(result[i])
          pointer1=pointer1-readPointer(pointer+j)
          pointer2=pointer2-readPointer(pointer+k)
          if pointer1==pointer2 then
            pointer=getAddress(result[i])-pointer1
            print(string.format('%X',pointer))
            for l=1,3 do
              pointer3=checkvalue(pointer+size,0x100,l,4)
              if pointer3 then print(l)
                UObject.ObjectId=pointer3-pointer
                UObject.FNameIndex=pointer1
                UObject.Class=pointer1+j-0x50
                UObject.Outer=pointer1+k-0x50

                result2=pointerscan(pointer)
                for m=1,#result2 do
                  local val=0
                  for o=1,100 do
                    val=o
                    if not readPointer(readPointer(readPointer(getAddress(result2[m])+o*size))) then break end
                  end

                  if val==100 then
                    print(string.format('%X',getAddressSafe(result2[m])-(size*l)))
                    result=pointerscan(getAddressSafe(result2[m])-(size*l),process)
                    unregisterSymbol('GUObjectArray')
                    registerSymbol('GUObjectArray',getAddressSafe(result2[m])-(size*l),true)
                    NOGUObjectsize=true

                    for n=1,#result do
                      print(result2[m]..'&lt;-'..result[n])
                      if inModule(result[n]) and getAddress(result[n])%4==0 then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result[n],true)
                        NOGUObjectsize=nil
                        goto done
                      end
                    end
                  end
                  if m==#result2 then goto done end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
--[[
if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end
]]

ue4parsetable()
print('done\n')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26206</ID>
                  <Description>"UE3 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))
print(string.format('%s = %X',Name,pointer))
UObject.propsize=checkvalue(pointer+UObject.Outer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
if classsize==0 then classsize=UObject.Outer+0x200 end
print((classsize-0x200)..' ~ '..(classsize+0x1000))
UObject.Offset=checkvalue(pointer+UObject.propsize,0x50,tostring(classsize-0x200)..'~'..tostring(classsize+0x1000),2)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26207</ID>
                  <Description>"to Single Line Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

if syntaxcheck then return end
[ENABLE]

memrec.Child[0].Address=toStr(memrec.Child[0]) memrec.Child[0].OffsetCount=0
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26208</ID>
                  <Description>"to Structural Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

function toStructural(rec)
  local str,str2,list=toStr(rec),'',{}
  if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
  else str2=str end
  rec.Address=str2
  while(true)do
    if not str:find(']') then break end
    str=str:sub(str:find(']')+2,str:len())
    if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
    else str2=str end
    list[#list+1]=str2
  end
  rec.OffsetCount=#list+1
  for i=#list,1,-1 do
    rec.OffsetText[#list-i]=list[i]
  end
end

if syntaxcheck then return end
[ENABLE]

toStructural(memrec.Child[0])
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26209</ID>
                  <Description>"Auto Assemble script"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function GetFullName(object)
  if not GetFullNameMem then GetFullNameMem=allocateMemory(0x100)end
  executeCodeEx(0, nil, getAddress('GetFullName'), object, GetFullNameMem)
  local str=readPointer(GetFullNameMem)
  if str then str=readString(str,readInteger(GetFullNameMem+0x8)*2,true) end
  return str
end


if syntaxcheck then return end
[ENABLE]


 
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26210</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26211</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26212</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26214</ID>
          <Description>"Dumper V6.7"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>26215</ID>
              <Description>"Unreal Engine"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{$lua}
function ue4config()
 local sub=targetIs64Bit() and 0 or 4
 UObject = {}

 --if UE4ver&lt;=2 and targetIs64Bit() then ue4determineversion() end
-----------------------------
----------UE4 struct---------
 if UE4ver&gt;7 then

    UObject.ObjectId= 0xC-sub
    UObject.Class = 0x10-sub
    UObject.FNameIndex = 0x18-(sub*2)
    UObject.Outer = 0x20-(sub*2)

  if UE4ver&gt;=25 then
    UObject.super= 0x40
    UObject.member= 0x50
    UObject.nextmember= 0x20
    UObject.Offset= 0x4C
    UObject.propsize=0x3C
    UObject.bitmask= 0x7A
    UObject.funct= 0xD8
    UObject.Property= 0x78
    UObject.enumoffset = 0x40
    UObject.enummul = 0x10
    UObject.enumname = 0x0
    UObject.enumindex = 0x8

  elseif UE4ver&gt;=22 then
    UObject.super= 0x40
    UObject.member= 0x48
    UObject.funct= 0xC0
  else
    UObject.super= 0x30 -(sub*4)
    UObject.member= 0x38 -(sub*5)
    UObject.funct= 0xB0
  end

  if UE4ver&lt;25 then
    UObject.nextmember=0x28-(sub*3)
    UObject.Offset= 0x44-(sub*4)
    UObject.propsize= 0x34-(sub*3/2)
    UObject.bitmask= 0x72-(sub*8)

    UObject.Property= 0x70-(sub*8)

  end

  if UE4ver&lt;11 then
    UObject.Offset= 0x4C
  end

----------------------------
---------UE3 struct---------
--1.25
--[[
 elseif UE4ver&gt;=1 then

    UObject.ObjectId= 0x4
    UObject.Outer = 0x14
    UObject.FNameIndex = 0x18
    UObject.Class = 0x20
    UObject.Offset= 0x48
    UObject.super= 0x34
    UObject.member= 0x38
    UObject.nextmember=0x28
    UObject.propsize= 0x30
    UObject.bitmask= 0x60
    UObject.Property= 0x58

]]
--0.10246
 else
 --[[
    UObject.ObjectId= 0x20
    UObject.Outer = 0x28
    UObject.FNameIndex = 0x2C
    UObject.Class = 0x34

    UObject.Offset= 0x60

    UObject.super= 0x48
    UObject.member= 0x4C

    UObject.nextmember=0x3C
    UObject.propsize= 0x44
    UObject.bitmask= 0x70]]

 end

---------------------------
end


ue4type={
		['BoolProperty']=vtByte,
		['ByteProperty']=vtByte,
		['FloatProperty']=vtSingle,
        ['StructProperty']=vtDword,
		['IntProperty']=vtDword,
        ['NameProperty']=vtQword,
        ['Int64Property']=vtQword,
		['TextProperty']=vtPointer,
        ['StrProperty']=vtPointer,
        ['ArrayProperty']=vtPointer,
        ['MapProperty']=vtPointer,
        ['ClassProperty']=vtPointer,
		['ObjectProperty']=vtPointer}

function ue4versioncheck()
 --if true then return 0 end
 local fileversion,info =getFileVersion(enumModules()[1].PathToFile)
 if not info then return 0 end
 return tonumber(info.minor..'.'..info.release)
end

function FNameStringAlgo(FName,IndexOnly)
 if not FName then return nil end
 local UEver=UE4ver
 local sub=targetIs64Bit() and 0 or 4
 local size=targetIs64Bit() and 8 or 4
 local number,str,pointer
 if not IndexOnly then
   number=UEver&gt;2 and readInteger(FName+4) or 0
   FName=readInteger(FName)
 else number=FName&gt;&gt;32 FName=FName&amp;0xFFFFFFFF
 end


 if not FName then return nil end

 if isMassEffect then
   local i=(FName&gt;&gt;0x1D)&amp;7
   FName=FName&amp;0x1FFFFFFF
   str=readString(readPointer(getAddress('FNamePool')+i*8)+FName+stringoffset)
   return str
 end

 if FNameList[FName] then
   if number&gt;0 then return FNameList[FName]..'_'..number-1 end
   return FNameList[FName]
 end

 local CFName=FName

 if readPointer(FNameString) then
   if not FNameStringStub then FNameStringStub=createExecuteCodeExStub(0,FNameString,0,0)end
   if not FNameStringRE then FNameStringRE=createRemoteExecutor()end

   if not mem then mem=allocateMemory(0x100)end
   writeQword(mem+0x50+UObject.FNameIndex,FName)
   FNameStringRE.executeStub(FNameStringStub,{mem+0x50,mem})
   str=readPointer(mem)
   if str then str=readString(str,readInteger(mem+0x8)*2,true) end
   --deAlloc(mem)

 elseif UEver&gt;=23 then
  local i=(FName&gt;&gt;0x10)
  FName=(FName&amp;0xFFFF)*2
  pointer=readPointer(FNamePool+i*size)

  local le =  readSmallInteger(pointer+FName)
  if not le then return nil end
  le=le&gt;&gt;6
  if le&gt;200 then return nil end
  local widechar=true and readBytes(pointer+FName,1)==1 or false
  --print(FName)
  le=(widechar and le*2 or le)-1
  if CFName==3 and not stringoffset then
    for k=2,0x20,2 do
      if readString(pointer+FName+k,le,widechar)=='ByteProperty' then stringoffset=k break end
      --print(k)
    end
  end

  if not stringoffset then return end

  str=readString(pointer+FName+stringoffset,le,widechar)
 else
  local i

  if FNamePool2 then FName= FName &lt;0x25A and readInteger(FName*4+FNamePool) or FName
  else
    i=UEver&gt;7 and (FName&gt;&gt;0xE) or 0
    FName= (UEver&gt;7 and (FName&amp;0x3FFF) or FName) *  (8-sub)
  end

  --print(i)
  --print(FName)


  local pointer
  if FNamePool2 then
    pointer=readPointer(FNamePool2)+FName
  else
    pointer=readPointer(FNamePool+i*size)
    if not readPointer(pointer) then return nil end
    pointer=readPointer(pointer+FName)
  end

  --print(string.format('%X',pointer))

  if not readPointer(pointer) then return nil end
  local pointers,pointers2=pointer
  if stringoffset2 then pointer=readPointer(pointer+stringoffset2)end
  pointers2=pointer

  --print(string.format('%X',pointer))

  --local offset=UE4ver&gt;=22 and 0xC-sub or 0x10-(sub*2)
  if CFName==1 and (not stringoffset or not stringoffsetid) then

     for k=0,0x30,4 do
        str=readString(pointer+k,13)
        if str=='ByteProperty' then stringoffset=k break end
      end

      if not stringoffset then
        for k=0,0x30,4 do
          str=readString(pointer+k,13*2,true)
          if str=='ByteProperty' then stringoffset=k forcewidechar=true break end
        end
      end

      pointer=pointers

     for j=0, stringoffset-4,4 do
       if readInteger(pointer+j)==2 then stringoffsetid=j end
     end
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
  --print(string.format('%X',offset))

  else
  if not stringoffset then return end
  --print(string.format('%X',pointer))

  pointer=pointers

  local widechar=stringoffsetid and (readInteger(pointer+stringoffsetid)&amp;1==1 or false) or false

  pointer=pointers2

  if stringoffset2 and not readPointer(pointer) then pointer=pointers+stringoffset2 end

  widechar= forcewidechar and true or widechar

  str= readString(pointer+stringoffset,200,widechar)

  if not str then str= readString(pointer+stringoffset,100,widechar) end
  if not str then str= readString(pointer+stringoffset,50,widechar) end
  if not str then str= readString(pointer+stringoffset,30,widechar) end
  if not str then
   local le=0
  --print(string.format('%X',FName))
  --print(string.format('%X',pointer))
   while(true)do
    if le&gt;50 then break end
    if readBytes(pointer+stringoffset+le)==0 then break end
    le=le+1
   end
   str= readString(pointer+stringoffset,le)
  end
  --print(stringoffset)


 end end
 if not str then return nil end
 if number&gt;0 then return str..'_'..number-1 end
 --print(str)
 FNameList[CFName]=str
 --print(str)
 return str
end

function GetNameAlgo(object)
 if not object then return nil end

 if ObjectList[object] then --print(ObjectList[object])
   return ObjectList[object]
 end
 local pointer,size,str1,str2=readPointer(object+UObject.Class),targetIs64Bit() and 8 or 4
 if not pointer then return nil end
 --print(string.format('%X',fnameoffset))
 --print(string.format('%X',object+fnameoffset))
 str1=FNameStringAlgo(readInteger(pointer+UObject.FNameIndex),true)

 --print(str1)
 --if readInteger(pointer+fnameoffset+4)~=0 then return nil end

 str2=FNameStringAlgo(readInteger(object+UObject.FNameIndex),true)
 --print(str2)
 if not str2 then str2=FNameStringAlgo(readInteger(object+UObject.FNameIndex-8),true)end
 --if str2=='None' then str2=FNameStringAlgo(readInteger(pointer+UObject.Outer+size),true)end
 if not str1 or str1=='None' or not str2 or str2=='None' then return nil end


 str1=str1..' '..str2
 --print(ObjectList[object])
 ObjectList[object]=str1
 return str1
end

function GetFullNameAlgo(object)
 if not object then return nil end
 --if ObjectList[object] then return ObjectList[object] end
 local pathoffset=UObject.Outer
 local fnameoffset=UObject.FNameIndex
 local str=GetNameAlgo(object)
 if not str then return nil end
 local number=readInteger(object+fnameoffset+4)
 local typ=str:sub(1,string.find(str,' ')-1)
 local isProperty=string.find(typ,'Property')
 if not isProperty then isProperty=string.find(typ,'Function') end
 local pointer=readPointer(object+pathoffset)
 while(true)do
  if not pointer or pointer==0 then break end
  local stri=GetNameAlgo(pointer)
  if not stri then break end
  typ=stri:sub(1,string.find(stri,' ')-1)
  local isPropertyc=string.find(typ,'Property')
  if not isPropertyc then isPropertyc=string.find(typ,'Function') end
  stri=string.sub(str,1,string.find(str,' '))..stri:sub(string.find(stri,' ')+1,stri:len())
  local num=readInteger(pointer+fnameoffset+4)

  if number~=num and num==0 or  not isPropertyc and isProperty then stri=stri..':'
  else stri=stri..'.' end
  number=num
  isProperty=isPropertyc

  str=stri..string.sub(str,string.find(str,' ')+1,str:len())
  pointer=readPointer(pointer+pathoffset)

  if string.find(str,'%./') then
    stri=string.sub(str,1,string.find(str,' '))
    str=stri..str:sub(string.find(str,'%./')+1,str:len())
  break end

 end
 if not str then return nil end
 --ObjectList[object]=str
 return str
end

function GetFullNameSuperAlgo(object)
  local super=UObject.super
  local str1 = GetFullNameSafeAlgo(object)
  if not str1 then return nil end
  local pointer = readPointer(object+super)
  if pointer then
    local str2 = GetFullNameSafeAlgo(pointer)
    if str2 then return str1..' ~ '..str2 end
  end
  return str1
end

function GetFullNameSafesAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 local str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end


function GetFullNameSafeAlgo(object)
 --if ObjectList[object] then return ObjectList[object] end
 local str= GetFullNameAlgo(object)
 if str then return str end
 local fnameoffset=0x28
 local typeoffset=0x8
 local pathoffset=0x10
 if not object then return nil end
 local pointer=readPointer(object+typeoffset)
 if not pointer then return nil end
 local str1=FNameStringAlgo(pointer)
 local str2=FNameStringAlgo(object+fnameoffset)
 local pointer=readPointer(object+pathoffset)
 if not pointer then return nil end
 local str3=GetFullNameAlgo(pointer)
 if not str3 then str3=GetFullNameSafesAlgo(pointer)end

 if not str1 or str1=='None' or not str2 or str2=='None' or not str3 then return nil end
 --print(str3)
 --if string.find(str3,'%./') then string.sub
 str=str1..string.sub(str3,string.find(str3,' '),str3:len())..':'..str2
 --ObjectList[object]=str
 return str
end

function FindString(namestr,start,stop,isNoIndex)
  local acclen=0
  for i=start,stop do
    local name=FNameStringAlgo(i+acclen,true)
    if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
      --print(name)
      if name and name:len()&lt;200 and name:len()&gt;2 and not string.find(name,'%c')  then
        if namestr==name then FNameResult=i+acclen return end
        if isNoIndex then acclen=acclen+name:len()end
      end
    end
  end
end


function FindStringFName(namestr,isNoIndex)
  local size
  if FNamePool2 then size=readInteger(FNamePool2+8)

  elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
  elseif UE4ver&gt;7 then size=(#FNameDict&lt;&lt;0xE)-1
  else size=math.floor(#FNameDict[1]/4) end
  local count=0x200
  size=math.floor((size/count)+0.5)
  ue4parsetablecheck()
  FNameResult=nil
  local result
  local num,start,stop=count,0,0
  for i=0,size do
    start=i*num
    stop=(i+1)*num
    if FNameResult then break end
    createThread(FindString(namestr,start,stop-1,isNoIndex))
  end
  result=FNameResult
  FNameResult=nil
  return result
end

function getregionsize(address)
local allregion=enumMemoryRegions()
 for i=#allregion,1,-1 do
  if allregion[i].BaseAddress&lt;=address then
   local BaseAddress=allregion[i].BaseAddress
   local RegionSize=allregion[i].RegionSize
   local curSize=BaseAddress+RegionSize-address
   return curSize,RegionSize,BaseAddress,i
  end
 end
end

sub=targetIs64Bit() and 0 or 4

function ue4parsetableFNamePool()
  ObjectList={}
  FNameList={}
  if readPointer(FNameString) or string.find(process,'StateOfDecay2')then return end
  local pool=getAddressSafe('FNamePool')
  if pool then
    local pointer,pointers
    if not readPointer(readPointer(pool)) then pointer=pool+0x10
    else
      pointer=pool
      if readPointer(readPointer(readPointer(pointer)))then
        if readPointer(readPointer(readPointer(readPointer(pointer))))then
          pointer=readPointer(pointer)
        end
      end
    end
    if not readPointer(pointer)then pointer=readPointer(pool2+0x10)end
    FNamePool=pointer
    FNameDict={}
    local j=0
    for i=0,500 do
      pointers=readPointer(pointer+i*(8-sub))
      if readPointer(pointers) then
        FNameDict[i+1]=readBytes(pointers,getregionsize(pointers)-1,true)
      else j=j+1 end
      if j&gt;5 then break end
    end
  end
end

function ue4parsetables()
 local size=targetIs64Bit() and 8 or 4
 ue4parsetableFNamePool()
 local pool2=getAddressSafe('GUObjectArray')
 if pool2 then
  if NOGUObjectsize then
    GUObjectsize=0xFFFFFFFF
    if not readPointer(readPointer(GUObjectAddress))then
      GUObjectAddress=allocateMemory(0x100) writePointer(GUObjectAddress,pool2)
    end
    return
  end


  local pointer,pointers=readPointer(pool2)
  GUObjectsize=readInteger(pool2+size)
  if not readPointer(pointer)then GUObjectsize=readInteger(pool2+0x10+size*2+4) GUObjectsize= GUObjectsize==0xFFFFFFFF and readInteger(pool2+0x10+size+4)or GUObjectsize  pointer=readPointer(pool2+0x10)end
  if not readPointer(readPointer(pointer)) then pointer=pointer+0x10 end
  --if GetFullNameSafeAlgo(readPointer(pointer)) then pointer=pool2 end
  if not readPointer(readPointer(readPointer(readPointer(readPointer(pointer))))) then pointer=pool2 end
  if not readPointer(readPointer(pointer)) then pointer=pointer+0x10 end
  GUObjectAddress=pointer
 end
end

function ue4parsetable()
  ue4parsetables()
  local size=targetIs64Bit() and 8 or 4

  local pointerss=readPointer(GUObjectAddress)
  for i=size,0x50,4 do
    if readPointer(pointerss+i) and readPointer(readPointer(readPointer(pointerss+i))) then UObjectMul=i print(string.format('%X',i))break end
  end

  if not UObject.FNameIndex then
    for i=0,3 do
      pointer = readPointer(pointerss+i*UObjectMul)
      if readPointer(pointer) and checkvalue(pointer+size,0x100,'Object',1) then
        UObject.FNameIndex=checkvalue(pointer+size,0x50,'Object',1)-pointer
        UObject.ObjectId=checkvalue(pointer+size,0x100,i,4)-pointer
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Class',1) then UObject.Class=j break end
        end
        for j=size,0x100,4 do
          if checkvalue(readPointer(pointer+j),0x100,'Core',1) then UObject.Outer=j break end
        end
        break
      end
    end
  end
  return true
end


function ue4parsetablecheck()
  if not readPointer(GUObjectAddress) or not readPointer(FNamePool) then return ue4parsetable() end
  local pointer
  pointer=readPointer(readPointer(GUObjectAddress))
  if not ObjectTable or not ObjectTable[1] or (ObjectTable[1].Address ~= pointer) then return ue4parsetable() end
--[[
  local Address,FullName
  for i=1,#ObjectTable do
    if ObjectTable[i] and i&gt;#ObjectTable-0x10 then FullName=ObjectTable[i].Type..' '..ObjectTable[i].FullName Address=ObjectTable[i].Address  break end
  end

  if not GetFullNameSafeAlgo(Address) or FullName~=GetFullNameSafeAlgo(Address) then return ue4parsetable()end
]]
 return false
end

function UE4AutoConfig()

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and (checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1))&gt;0 and (checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1)) or size
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))

end

function UE3AutoConfig()


if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))
print(string.format('%s = %X',Name,pointer))
UObject.propsize=checkvalue(pointer+UObject.Outer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
if classsize==0 then classsize=UObject.Outer+0x200 end
print((classsize-0x200)..' ~ '..(classsize+0x1000))
UObject.Offset=checkvalue(pointer+UObject.propsize,0x50,tostring(classsize-0x200)..'~'..tostring(classsize+0x1000),2)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))


end

function FindObject(pointer,start,stop,fullname)
  for j=start,stop do
    SaveObject(readPointer(pointer+j*UObjectMul))
    if FullNameList[fullname] then break end
  end
end

function StaticFindObjectAlgo(fullname)
  fullname=fullname:lower()
  if ue4parsetablecheck() then
    FullNameList={}
    ObjectLists={}
    ObjectTable={}
    HighestObjectID=0
  end
  if FullNameList[fullname] then return FullNameList[fullname].Address end

  local count=0x200
  local sizess= UObjectMul*count
  local ObjectId=UObject.ObjectId
  local num,start,stop
  totalobjects=0
  local size,pointer=targetIs64Bit() and 8 or 4

  for i=0,0x1000,size do
    pointer=readPointer(GUObjectAddress+i)
    if not readPointer(pointer) then break end
    size=getregionsize(pointer)
    num,start,stop=count,0,0
    for j=0,math.floor(size/sizess) do
      start=stop
      stop=stop+num
      --print(start..'~'..stop)

      createThread(FindObject(pointer,start,stop-1,fullname))
      if FullNameList[fullname] then return FullNameList[fullname].Address end
    end
  end
  return nil
end

function BasicObject(pointer,start,stop)
  Threadlist[#Threadlist+1]=i
  for j=start,stop do
    SaveObject(readPointer(pointer+j*UObjectMul))
  end
  Threadlist[#Threadlist]=nil
end

function BasicEnumObject()
  --ue4parsetablecheck()
  ObjectLists={}
  ObjectTable={}
  Threadlist={}
  FullNameList={}
  HighestObjectID=0
  starttime=os.clock()
  local count=0x200
  local sizess= UObjectMul*count
  local ObjectId=UObject.ObjectId
  local num,start,stop
  totalobjects=0
  local size,pointer=targetIs64Bit() and 8 or 4

  for i=0,0x1000,size do
    pointer=readPointer(GUObjectAddress+i)
    if not readPointer(pointer) then break end
    size=getregionsize(pointer)
    num,start,stop=count,0,0
    for j=0,math.floor(size/sizess) do
      start=stop
      stop=stop+num
      --print(start..'~'..stop)
      createThread(BasicObject(pointer,start,stop-1))
    end
  end
  for i=0,10000 do
    if #Threadlist==0 then break end
    sleep(1)
  end
  BasicEnumObjectCooldown=true
  createTimer(180000, function()BasicEnumObjectCooldown=nil end)
  print(string.format('\nA Total of %u objects has been found in %.3f seconds',totalobjects,os.clock()-starttime))
end

function registerFuncAlgo()
 if not UE_function then
   UE_function=createSymbolList()
   UE_function.register()
 end
 local sizes,pointer=HighestObjectID+10
 for i=1,sizes do
   if ObjectTable[i] and string.find(ObjectTable[i].Type,'Function') then
     pointer=readPointer(ObjectTable[i].Address+UObject.funct)
     if readPointer(pointer) then UE_function.addSymbol('UE_function',ObjectTable[i].FullName,pointer,1)end
   end
 end
end

function registerMemberAlgo()
  UEMember={}
  UEMemberClassFullName={}
  local size,Super=HighestObjectID+10
  for i=1,size do
    if ObjectTable[i] and ObjectTable[i].Member then
      Super=ObjectTable[i]
      Class={''}
      for k=0,5 do
        Class[#Class+1]=Super.Name..'.'
        if not Super.Super then break end
        Super=Super.Super
      end
      registerMember(ObjectTable[i].Address,ObjectTable[i].FullName)
    end
  end
  Class=nil
end


function registerMember(ObjectData,FullName,AddedName,AddedOffset)
  ObjectData=ObjectLists[ObjectData]
  local Name,Offset
  if not AddedName then AddedName='' end
  if not AddedOffset then AddedOffset=0 end
  if ObjectData.Member then
    for j=1,#ObjectData.Member do
      if ObjectData.Member[j].Offset then
        Offset=AddedOffset+ObjectData.Member[j].Offset
        Name=ObjectData.Member[j].Name
        if string.find(ObjectData.Type,'UserDefinedStruct') and string.find(Name,'_') then Name=Name:sub(1,string.find(Name,'_')-1)end
        Name=AddedName..Name
        for i=1,#Class do
          if not UEMember[(Class[i]..Name):lower()] then
            UEMember[(Class[i]..Name):lower()]=Offset
            UEMemberClassFullName[(Class[i]..Name):lower()]=FullName
          end
          if ObjectData.Member[j].Bit and not UEMember[(Class[i]..Name..'.Bit'):lower()] then
            UEMember[(Class[i]..Name..'.Bit'):lower()]=ObjectData.Member[j].Bit
            UEMemberClassFullName[(Class[i]..Name..'.Bit'):lower()]=FullName
          end
        end
        if string.find(ObjectData.Member[j].Type,'StructProperty') and ObjectData.Member[j].Property then registerMember(ObjectData.Member[j].Property[1].Address,FullName,Name..'.',Offset)end
      end
    end
  end
end


function GetName1(pointer)
  local class=readPointer(pointer+UObject.Class)
  if not class then return nil end
  local typ=readQword(class+UObject.FNameIndex)
  if not typ then return nil end
  local name=readQword(pointer+UObject.FNameIndex)
  typ=FNameStringAlgo(typ,true)
  name=FNameStringAlgo(name,true)
  return typ,name,readPointer(pointer+UObject.Outer),class
end

function GetName2(pointer)
  if not readPointer(pointer) then return nil end
  local typ=readQword(readPointer(pointer+8))
  if not typ then return nil end
  local name=readQword(pointer+0x28)
  typ=FNameStringAlgo(typ,true)
  name=FNameStringAlgo(name,true)
  return typ,name,readPointer(pointer+0x10)
end

function SaveObject(pointer)
   if not readPointer(pointer)then return nil end
   if ObjectLists[pointer] then return ObjectLists[pointer] end
   local objid=readInteger(pointer+UObject.ObjectId)
   if not objid then return nil end

   local typ,name,outer,class
   if UE4ver&lt;25 then typ,name,outer,class=GetName1(pointer)
   else typ,name,outer=GetName2(pointer)
     if not typ or string.find(typ,'None') or not name or string.find(name,'None') then
       typ,name,outer,class=GetName1(pointer)
     end
   end

   if not typ or string.find(typ,'None') or not name or string.find(name,'None') then return nil end

   local ObjectData,size,pointers={},targetIs64Bit() and 8 or 4

   ObjectData.Outer= outer~=0 and outer or nil
   ObjectData.Name=name
   ObjectData.Type=typ
   ObjectData.Address=pointer

   if not ObjectData.Name then
     --print(ObjectData.Address)
     ObjectData.Name='InvalidName'
   end
   if ObjectTable[objid+1] and ( not string.find(typ,'Property') or UE4ver&lt;25 ) then return ObjectTable[objid+1] end

   ObjectData.ObjectId=objid

   if not readPointer(objid) and objid&lt;0xFFFFFFF and ( not string.find(typ,'Property') or UE4ver&lt;25 ) then
     ObjectTable[objid+1]=ObjectData
     if HighestObjectID&lt;objid then HighestObjectID=objid end
   end

   ObjectLists[pointer]=ObjectData

   SaveObject(ObjectData.Outer)
   local dataNew,str,dataOld=ObjectData,ObjectData.Name

   for x=0,10 do
     if not dataNew.Outer or not ObjectLists[dataNew.Outer] then break end
     dataOld=dataNew
     dataNew=ObjectLists[dataNew.Outer]
     if (string.find(dataOld.Type,'Property') or string.find(dataOld.Type,'Function'))
     and (not string.find(dataNew.Type,'Property') and not string.find(dataNew.Type,'Function'))
     then
       str=dataNew.Name..':'..str
     else
       str=dataNew.Name..'.'..str
     end
   end
   ObjectData.FullName=str
   FullNameList[str:lower()]=ObjectData
   if class then
     class=SaveObject(class)
     if class then
       if not class.Instance then class.Instance={}end
       class.Instance[#class.Instance+1]=ObjectData
       ObjectData.Class=class
     end
   end

   totalobjects=totalobjects+1

   if not UObject.super or not UObject.member or not UObject.nextmember or not UObject.Offset
   or not UObject.propsize or not UObject.bitmask or not UObject.Property then
   return ObjectData end

   local super=readPointer(pointer+UObject.super)
   ObjectData.Super= super~=0 and super or nil
   if ObjectData.Super then ObjectData.Super=SaveObject(ObjectData.Super)end
   if ObjectData.Super then
     if not ObjectData.Super.Uper then ObjectData.Super.Uper={}end
     ObjectData.Super.Uper[#ObjectData.Super.Uper+1]=ObjectData
   end

   if string.find(typ,'Property')then
     ObjectData.Offset=readSmallInteger(pointer+UObject.Offset)
     ObjectData.Propsize=readSmallInteger(pointer+UObject.propsize)
     if string.find(typ,'StructProperty') or string.find(typ,'ObjectProperty') then
       ObjectData.Property={SaveObject(readPointer(pointer+UObject.Property))}
       if not ObjectData.Property[1] then ObjectData.Property=nil end
     elseif string.find(typ,'MapProperty') or string.find(typ,'ArrayProperty') then
       ObjectData.Property={SaveObject(readPointer(pointer+UObject.Property)),SaveObject(readPointer(pointer+UObject.Property+size))}
       if not ObjectData.Property[1] then ObjectData.Property=nil end
     elseif string.find(typ,'BoolProperty')then ObjectData.Bit=readBytes(pointer+UObject.bitmask,1) end
   else
     local member=SaveObject(readPointer(pointer+UObject.member))
     if member and (string.find(member.Type,'Function') or string.find(member.Type,'Property')) then
       LastObjectWithMember=ObjectData
       ObjectData.Member={member}
       for i=0,300 do
         member=SaveObject(readPointer(member.Address+UObject.nextmember))
         if not member then break end
         if not string.find(member.Type,'Function') then
           ObjectData.Member[#ObjectData.Member+1]=member
         end
       end
     end
   end

   return ObjectData
end

function isStructExist(name)
  for i=1,#StructList do
    if StructList[i].Name==name then return StructList[i] end
  end
  return nil
end

function SaveAndRemoveStruct()
  StructList={}
  local count=getStructureCount()
  for i=count-1,0,-1 do
    local struct=getStructure(i)
    StructList[i+1]=struct
    struct:removeFromGlobalStructureList()
  end
end

function DeleteStruct(Struct)
  local count=#StructList
  for i=1,count do
    if Struct==StructList[i] then
      Struct:Destroy()
      StructList[i]=nil
    end
    if not StructList[i] and StructList[i+1] then
      StructList[i]=StructList[i+1]
      StructList[i+1]=nil
    end
  end
end

function LoadStruct()
  for i=1,#StructList do
    StructList[i]:addToGlobalStructureList()
  end
end

function ChildStructStart(structname,elementname)
local struct=isStructExist(structname)
if struct then
for i=0,struct.Count-1 do
if struct.Element[i].Name==elementname then return struct.Element[i].ChildStructStart end end
else return nil end
end

function findAddress(name,number,AddressOrAOBString,modulename,stopaddress,Nth,aobscanOnly,gethead,nop)
	local size,address=0x100
    AddressOrAOBString,address=string.lower(AddressOrAOBString):gsub('banana','')
	if(address&gt;0)then
		local f
		if(modulename==0 or modulename==nil or modulename=='')then f=AOBScan(AddressOrAOBString)
		else
            if type(modulename)==type(0) then modulename=string.format('%X',modulename)
            elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
			local ms = createMemScan()
			if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
				stopaddress=getNameFromAddress(getAddress(modulename),true,false)
                if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
				if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
                modulename=getAddress([["]]..stopaddress..[["]])
				stopaddress=modulename+getModuleSize(stopaddress)
                modulename=string.format('%X',modulename)
			end
			ms.firstScan(soExactValue,vtByteArray,rtTruncated,AddressOrAOBString,'',getAddress(modulename),getAddress(stopaddress),'',fsmNotAligned,'',true,false,false,false)
			ms.waitTillDone()
			f = createFoundList(ms)
			f.initialize()
			ms.destroy()
		end
		address={}
		for i=0,f.Count-1 do address[i+1]=f[i]end
		f.destroy()
        if Nth==nil or Nth==0 or Nth=='' then Nth=1 end
        if gethead then
           local addresss=GetAddressSafe(address[Nth])
           if not addresss then addresss=GetAddressSafe(address[Nth-1])end
           if addresss and addresss~=0 then
           for i=0,0x1000 do
               addresss=addresss-1
               if readBytes(addresss,1)==0xCC then break end
               if nop then local ext, opc, byt, add=splitDisassembledString(disassemble(addresss)) if string.find(opc,'nop') then addresss=addresss+getInstructionSize(addresss)-1 break end end
           end
           address[Nth]=addresss+1 end
        end
		if number==nil or number==0 or number=='' then
			if aobscanOnly then return address end
		else
            if(#address==0)then error(name..' aob no result found') end
            if(getAddress(address[Nth])==nil)then error(name..' aob result '..Nth..' doesnt exist') end
            unregisterSymbol(name)
            registerSymbol(name,getAddressSafe(address[Nth]),true)
            if aobscanOnly then return end
		end
		AddressOrAOBString=GetAddressSafe(address[Nth])
	end
    AddressOrAOBString=getAddressSafe(AddressOrAOBString)
	if(AddressOrAOBString==nil)then error(name..' still cant be found')end
	local addr={}
	local i=0
	local j=1
	while(i&lt;size) do
		local ext, opc, byt, add=splitDisassembledString(disassemble(getAddressSafe(AddressOrAOBString)+i))
		if(ext~="")then
			if(opc:find(",")~=nil)then
				opc=opc:sub(opc:find(",")+1,opc:len())
			else
				opc=opc:sub(opc:find(" ")+1,opc:len())
			end
			addr[j]=opc:gsub("%[",""):gsub("]","") j=j+1
		end
        if opc:find('],') then
            opc=opc:sub(opc:find("%[")+1,opc:find("]")-1)
            if tonumber(opc,16) then addr[j]=opc j=j+1 end
        end
		i=i+getInstructionSize(AddressOrAOBString+i)
	end
    --for i=1,#addr do print(addr[i]) end
	if number==nil or number==0 or number=='' then return addr end
	local offset
	if(type(number)==type(''))then
		offset=string.find(number,',')
		if(offset==nil)then number=getAddress(number)
		else offset=getAddress(string.sub(number,offset+1,number:len()))
			number=getAddress(string.sub(number,1,string.find(number,',')-1))
		end
	end
	if offset==nil then offset=0 end
	unregisterSymbol(name)
	registerSymbol(name,getAddressSafe(addr[number])-offset,true)
end

function checkvalue(address,size,value,typ)
  local cvalue,tempvalue,value2=readBytes(address,size,true)

  if type(value)==type('') and string.find(value,'~') then
    value2=tonumber(value:sub(string.find(value,'~')+1,value:len()))
    value=tonumber(value:sub(1,string.find(value,'~')-1))
  end

  if not cvalue then return false end
  if typ==1 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      --print(FNameStringAlgo(tempvalue,true))
      local str=FNameStringAlgo(tempvalue,true)

      if str and string.find(str,value) then return address+i-1 end
    end

  elseif typ==2 then
    for i=1,#cvalue,2 do
      datatable={}
      for m=1,2 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToWord(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==4 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,4 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToDword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  elseif typ==8 then
    for i=1,#cvalue,4 do
      datatable={}
      for m=1,8 do
        datatable[m]=cvalue[m+i-1]
      end
      tempvalue=byteTableToQword(datatable)
      if tempvalue==value or (value2 and tempvalue&gt;=value and tempvalue&lt;=value2 ) then return address+i-1 end
    end
  end
  return nil
end

function fillstruct4bytes(Struct)
  if not getElementByOffset(Struct,0) then local e=Struct.addElement() e.Offset=0 e.Vartype=vtDword end
  Struct.beginUpdate()
  local count=Struct.Count-1
  local list,k,element1,element2,size,bytesize={},1
  for i=0,count do
    element1=Struct.Element[i]
    element2=Struct.Element[i+1]
    if element2 then
      bytesize=element1.Bytesize
      if bytesize&lt;4 then bytesize=4 end
      size=element2.Offset-element1.Offset-bytesize
      if size&gt;0 then
        if size%4&gt;0 then size=4-size%4+size end
        local start=element1.Offset
        if start%4&gt;0 then start=4-start%4+start
        else start=start+4 end
        size=size/4
        for j=0,size-1 do
          if (start+j*4)&gt;=(element1.Offset+bytesize) then
            list[k]=start+j*4
            k=k+1
          end
        end
      end
    end
  end
  for i,v in ipairs(list) do local e=Struct.addElement() e.Offset=v e.Vartype=vtDword end
  Struct.endUpdate()
end

function UECreateStruct(LocalStruct,ArrayStruct,ObjectData,Struct,Instance,AddedOffset,AddedName)

  if AddedOffset then
    if LocalStruct[ObjectData.FullName] then copyStruct(LocalStruct[ObjectData.FullName],Struct,AddedOffset,AddedName)
    else
      local copy=createStructure(ObjectData.FullName)
      UECreateStruct(LocalStruct,ArrayStruct,ObjectData,copy,Instance)
      LocalStruct[ObjectData.FullName]=copy
      copyStruct(copy,Struct,AddedOffset,AddedName)
    end
    return
  end


  AddedOffset = AddedOffset and AddedOffset or 0
  AddedName = AddedName and AddedName or ''
  local size,MemberData,Propsize,e,f,Name,Offset,Typ=targetIs64Bit() and 8 or 4
  for i=0,10 do
    if ObjectData.Member then
      print(ObjectData.Type..' '..ObjectData.FullName)
      for j=1,#ObjectData.Member do
        MemberData=ObjectData.Member[j]
        if MemberData.Offset then
          Offset=AddedOffset+MemberData.Offset
          Propsize=MemberData.Propsize
          Name=AddedName..MemberData.Name
          Typ=MemberData.Type
          if string.find(ObjectData.Type,'UserDefinedStruct') then Name=Name:sub(1,string.find(Name,'_')-1)end
          if string.find(Typ,'StructProperty') and MemberData.Property and MemberData.Property[1] then
            UECreateStruct(LocalStruct,ArrayStruct,MemberData.Property[1],Struct,Instance,Offset,Name..'.')
            if not getElementByOffset(Struct,Offset) then e=Struct.addElement() e.Offset=Offset e.Name=Name e.Vartype=vtDword end
          else
            e=Struct.addElement()
            e.Offset=Offset
            e.Name=Name
            if string.find(Typ,'BoolProperty') and MemberData.Bit then e.ChildStructStart=MemberData.Bit end

            if Instance and PropName=='RowStruct' then
              local spointer=readPointer(Instance+Offset)
              local sname,sstruct=SaveObject(spointer)
              if sname then
                print(sname.Type..' '..sname.FullName)

                if not ArrayStruct then ArrayStruct={} end
                if ArrayStruct[sname.Name] then sstruct=ArrayStruct[sname.Name]
                else
                  sstruct=createStructure(sname.Name)
                  ArrayStruct[sname.Name]=sstruct
                  UECreateStruct(LocalStruct,ArrayStruct,sname,sstruct,Instance,nil,nil)
                end
                f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name='Table' f.Vartype=vtPointer
                local ssstruct=createStructure('DataTable')
                f.setChildStruct(ssstruct)
                for r=0,10 do
                  f=ssstruct.addElement() f.Offset=r*0x18 f.Name=string.format('[%u] FName',r)  f.Vartype=vtQword
                  f=ssstruct.addElement() f.Offset=r*0x18+8 f.Name=string.format('[%u] Data',r) f.Vartype=vtPointer
                  f.setChildStruct(sstruct)
                end
                fillstruct4bytes(ssstruct)

                f=Struct.addElement() f.Offset=e.Offset+0x10-sub*2 f.Name='Size' f.Vartype=vtDword
              end
            end
            if not ue4type[Typ] then e.Vartype=vtDword
            else e.Vartype=ue4type[Typ] end
            if (string.find(Typ,'ArrayProperty') or string.find(Typ,'MapProperty')) and MemberData.Property then
              f=Struct.addElement() f.Offset=e.Offset+8-sub f.Name=e.Name..'_size' f.Vartype=vtDword
              f=Struct.addElement() f.Offset=e.Offset+0xC-sub f.Name=e.Name..'_sizes' f.Vartype=vtDword
              for m=e.Offset+0xC-sub+4,Propsize-1,4 do
                if not getElementByOffset(Struct,m) then f=Struct.addElement() f.Offset=m f.Name=string.format('%s+%X',e.Name,m) f.Vartype=vtDword end
              end
              local isMap= Typ=='MapProperty'
              if string.find(MemberData.Property[1].Type,'StructProperty') and MemberData.Property[1].Property and MemberData.Property[1].Property[1] then
                Name= MemberData.Property[1].Property[1].Name..'[]'
              else Name=MemberData.Property[1].Name..'[]'end
              if not ArrayStruct then ArrayStruct={} end
              if ArrayStruct[Name] then e.setChildStruct(ArrayStruct[Name])
              else
                local stru=createStructure(Name)
                ArrayStruct[Name]=stru
                e.setChildStruct(stru)
                local ppsize=0
                if isMap then
                  for k=1,#MemberData.Property do
                    ppsize=(MemberData.Property[k].Propsize&lt;4 and 4 or MemberData.Property[k].Propsize)+ppsize
                  end
                  ppsize=ppsize+0x8
                  --print(ppsize)
                end
                for k=1,#MemberData.Property do
                  local psize=isMap and ppsize or MemberData.Property[k].Propsize
                  --print(MemberData.Address)
                  local Offs=isMap and MemberData.Property[k].Offset and MemberData.Property[k].Offset or 0
                  for p=0,10 do
                    Offset=p*psize+Offs
                    Name=string.format('[%u] ',p)
                    Typ=MemberData.Property[k].Type
                    if string.find(MemberData.Property[k].Type,'StructProperty') then
                      UECreateStruct(LocalStruct,ArrayStruct,MemberData.Property[k].Property[1],stru,Instance,Offset,Name)
                    else
                      f=stru.addElement()
                      f.Offset=Offset
                      f.Name=Name..MemberData.Property[k].Name
                      if not ue4type[Typ] then f.Vartype=vtDword
                      else f.Vartype=ue4type[Typ]end
                    end
                  end
                end
                fillstruct4bytes(stru)
              end
            end
          end
        end
      end
    end
    if not ObjectData.Super then break end
    ObjectData=ObjectData.Super
  end

end


function ue4createstruct(FullNameOrAddress,StructName,isGlobal,isfullname,Structu,AddedOffset,AddedName,Instance,name)
  local ObjectData
  if not FullNameOrAddress then return
  elseif type(FullNameOrAddress)==type('')then
    FullNameOrAddress=StaticFindObjectAlgo(FullNameOrAddress)
    ObjectData=SaveObject(FullNameOrAddress)
  elseif type(FullNameOrAddress)==type({})then ObjectData=FullNameOrAddress
  elseif type(FullNameOrAddress)==type(0)then ObjectData=SaveObject(FullNameOrAddress) end
  --print(ObjectData.FullName)
  if not ObjectData then return end

  StructName= StructName and StructName or ObjectData.Name

  Struct=Structu and Structu or createStructure(StructName and StructName or ObjectData.Name)
  local LocalStruct,ArrayStruct,e={},{}
  Struct.beginUpdate()
  UECreateStruct(LocalStruct,ArrayStruct,ObjectData,Struct,Instance,nil,nil)
  Struct.endUpdate()
  if not getElementByOffset(Struct,0) then e=Struct.addElement() e.Offset=0 e.Name='VTable' e.Vartype=vtPointer end
  if not getElementByOffset(Struct,UObject.ObjectId) then e=Struct.addElement() e.Offset=UObject.ObjectId e.Name='ObjectIndex' e.Vartype=vtDword end
  if not getElementByOffset(Struct,UObject.Class) then e=Struct.addElement() e.Offset=UObject.Class e.Name='Class/Type' e.Vartype=vtPointer end
  if not getElementByOffset(Struct,UObject.FNameIndex) then e=Struct.addElement() e.Offset=UObject.FNameIndex e.Name='FNameIndex' e.Vartype=vtDword end
  if not getElementByOffset(Struct,UObject.Outer) then e=Struct.addElement() e.Offset=UObject.Outer e.Name='Outer' e.Vartype=vtPointer end
  if string.find(name,'Function') and UObject.funct then e=Struct.addElement() e.Offset=UObject.funct e.Name='Func' e.Vartype=vtPointer end
--[[
  if not Instance then fillstruct4bytes(Struct)
  else
    if not getElementByOffset(Struct,0) then Struct.autoGuess(Instance, 0, Struct.Element[0].Offset) end
    local count=Struct.Count-1
    local list,k,element1,element2,size,bytesize={},1
    for i=0,count do
      element1=Struct.Element[i]
      element2=Struct.Element[i+1]
      if element2 then
        bytesize=element1.Bytesize
        if bytesize&lt;4 then bytesize=4 end
        size=element2.Offset-element1.Offset-bytesize
        print(element1.Offset+bytesize)
        print(size)
        if size&gt;0 then
          Struct.autoGuess(Instance,element1.Offset+bytesize,size)
        end
      end
    end
  end]]
  fillstruct4bytes(Struct)
  if isGlobal then StructList[#StructList+1]=Struct end
  LoadStruct()
  return Struct

end



function getElementByOffset(struct,offset)
  for i=0,struct.Count-1 do
    if struct.Element[i].Offset==offset then return i end
  end
  return nil
end

function copyStruct(original,copy,AddedOffset,AddedName)
  if not copy then copy=createStructure(original.Name..'_copy')end
  if not AddedOffset then AddedOffset=0 end
  if not AddedName then AddedName='' end
  copy.beginUpdate()
  for i=0,original.Count-1 do
    local e=copy.addElement()
    e.Offset=original.Element[i].Offset+AddedOffset
    if original.Element[i].Name=='' then e.Name=original.Element[i].Name
    else e.Name=AddedName..original.Element[i].Name end
    e.Vartype=original.Element[i].Vartype
    e.ChildStruct=original.Element[i].ChildStruct
    e.ChildStructStart=original.Element[i].ChildStructStart
    e.Bytesize=original.Element[i].Bytesize
  end
  copy.endUpdate()
  return copy
end

function ue_structureDissectOverrideCallback(Struct, Instance)
  --print('banana2')
  local name,fullname,class
  address,name,fullname,class=ue_findRealStartOfObject(Instance)

  if class then
   -- print('banana3')
    --if UEObj and (not enumUEObjIsRunning or enumUEObjIsUpdateOnly) then ue4createstructfast(fullname,nil,nil,nil,Struct) end
    SaveAndRemoveStruct()
    ue4createstruct(class,nil,nil,nil,Struct,nil,nil,Instance,name)
    --LoadStruct()
    if Struct.Count&gt;1 then return true
    else return false end
  end

  --ue_fillstruct(readPointer(Instance+UObject.Class),structure)
  --print('banana4')

  return nil
end

function ue_structureNameLookupCallback(address)
  --print('banana1')
  local name,fullname
  address,name,fullname=ue_findRealStartOfObject(address)
  if name then return name,address end
  return nil
end

function ue_SymbolLookupCallback(symbol)
  --print('banana1')
  if UEMember[symbol:lower()] then return UEMember[symbol:lower()] end
  local str='Function '
  if string.find(symbol,str) then
    symbol=symbol:sub(string.find(symbol,str)+str:len(),symbol:len())
    local pointer=StaticFindObjectAlgo(symbol)
    if pointer then return readPointer(pointer+UObject.funct)end
  end
  return nil
end

function ue_findRealStartOfObject(address)
  local ObjectData
  ObjectData=SaveObject(address)
  if ObjectData then return ObjectData.Address,ObjectData.Class.Name,ObjectData.Class.FullName,ObjectData.Class end

  for i=1,HighestObjectID+10 do
    if ObjectTable[i] and address&gt;=ObjectTable[i].Address and address&lt;ObjectTable[i].Address+0x500 then
      ObjectData=ObjectTable[i]
      return ObjectData.Address,ObjectData.Class.Name,ObjectData.Class.FullName,ObjectData.Class
    end
  end
  return address
end


function findOpcodes(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local addr={}
  local i=0
  local j=1
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      addr[j]=address+i
      j=j+1
    end
    i=i+getInstructionSize(address+i)
  end
  return addr
end

function findOpcode(address,opcode,size)
  if not size then size=0x50 end
  address=getAddressSafe(address)
  if not address then return nil end
  local i=0
  while(i&lt;size) do
    local ext, opc, byt, add=splitDisassembledString(disassemble(address+i))
    if string.find(opc,opcode) then
      return address+i
    end
    i=i+getInstructionSize(address+i)
  end
  return nil
end

function findLastCall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'ret',size)
  if not result then print(address..' cant find ret?') return nil end
  result=result-getAddress(address)
  result=findOpcodes(address,'call ',result)
  local ext, opc, byt, add=splitDisassembledString(disassemble(result[#result]))
  opc=opc:gsub('call ','')
  return opc
end

function followjmp(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'jmp ',size)
  if not result then print(address..' cant find jmp?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('jmp ','')
  return opc
end

function followcall(address,size)
  if not size then size=0x1000 end
  local result=findOpcode(address,'call ',size)
  if not result then print(address..' cant find call?') return nil end
  local ext, opc, byt, add=splitDisassembledString(disassemble(result))
  opc=opc:gsub('call ','')
  return opc
end

--local ext, opc, byt, add=splitDisassembledString(disassemble(findOpcodes('/Script/Astro.PrinterComponent:UpdatePreprinting_exec','call')[1]))
--return opc:sub(string.find(opc,' ')+1,opc:len())

function startstop(modulename,stopaddress)
  if(modulename==0 or modulename==nil or modulename=='')then modulename=0 stopaddress=0x00007fffffffffff end
  if type(modulename)==type(0) then modulename=string.format('%X',modulename)
  elseif type(modulename)==type('') then modulename=[["]]..modulename..[["]]  end
  if(stopaddress==0 or stopaddress==nil or stopaddress=='')then
    stopaddress=getNameFromAddress(getAddress(modulename),true,false)
    if(stopaddress:find("+")~=nil)then stopaddress=stopaddress:sub(0,stopaddress:find("+")-1)end
	if(getModuleSize(stopaddress)==nil)then error('Module '..modulename..' not found') end
    modulename=getAddress([["]]..stopaddress..[["]])
	stopaddress=modulename+getModuleSize(stopaddress)
    modulename=string.format('%X',modulename)
  end
  if type(stopaddress)==type(0) then stopaddress=string.format('%X',stopaddress)end
  return modulename,stopaddress
end

function groupscan(value,modulename,stopaddress)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  ms.firstScan(soExactValue,vtGrouped,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function pointerscan(value,modulename,stopaddress,value2)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  print(modulename..'~'..stopaddress)
  if value2 then ms.firstScan(soValueBetween,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)
  else ms.firstScan(soExactValue,targetIs64Bit() and vtQword or vtDword,rtTruncated,value,value2,modulename,stopaddress,'',fsmNotAligned,'',false,false,false,false)end
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function stringscan(value,modulename,stopaddress,isUnicode)
  local ms = createMemScan()
  modulename,stopaddress=startstop(modulename,stopaddress)
  ms.firstScan(soExactValue,vtString,rtTruncated,value,'',modulename,stopaddress,'',fsmNotAligned,'',false,false,isUnicode,true)
  ms.waitTillDone()
  local f = createFoundList(ms)
  f.initialize()
  ms.destroy()
  local result={}
  for i=0,f.Count-1 do result[i+1]=f[i] end
  f.destroy()
  return result
end

function StructAddToListSymbol(StructName,StartOffset,StopOffset,BaseAddress,OffsetOnly)
  if not StartOffset then StartOffset=0 end
  if not StopOffset then StopOffset=0xFFFFFF end
  local structCount=getStructureCount()
  local struct
  for i=0,structCount-1 do
    local stru=getStructure(i)
    if stru.Name==StructName then struct=stru break end
  end
  if struct then
    for i=0,struct.Count-1 do
      local e=struct.Element[i]
      if e.Offset&gt;=StartOffset and e.Offset&lt;=StopOffset then
        local rec=getAddressList().createMemoryRecord()
        rec.setDescription(e.Name)
        if OffsetOnly then
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.Offset[0]=e.Offset
          else rec.setAddress(string.format('+%X',e.Offset))end
        else
          if BaseAddress then rec.setAddress(BaseAddress) rec.OffsetCount=1 rec.OffsetText[0]=StructName..'.'..e.Name
          else rec.setAddress(string.format('+%s.%s',StructName,e.Name))end
        end
        rec.Type=e.Vartype
      end
    end
  end
end

function getInsForJump(address,registername,destination,allocsize,SharedMemoryName)
  address = getAddressSafe(address)
  if not address then error('getInsForJump address nil') return end
  if not allocsize then allocsize=4096 end
  destination=getAddressSafe(destination)
  if not destination then
	if not SharedMemoryName then destination = allocateMemory(allocsize,address)
	else destination = allocateSharedMemory(SharedMemoryName,allocsize) end
  end
  local size = (address+5-destination&gt;0x7FFFFFFF) and 14 or 5
  if registername then
	unregisterSymbol(registername)
	registerSymbol(registername,destination,true)
  end
  local opcodes = {}
  local i = 0
  while(i&lt;size) do
    local ext, opc=splitDisassembledString(disassemble(address+i))
    opcodes[#opcodes+1] = opc
    i=i+getInstructionSize(address+i)
  end
  local copy = table.concat(opcodes,'\r\n')
  local readAsTable = true
  local byt = readBytes(address,i,readAsTable)
  for j=1,#byt do byt[j] = ('%02X'):format(byt[j]) end
  local bytes = table.concat(byt, ' ')
  return i,copy,bytes,size,destination
end

function enablescript(name,registername,addressname,script,disable)
    local address=getAddress(addressname)
    if disable then script=(script):format(address,registername,readBytes(registername,1))
    else
        local i,copy,bytes,size =getInsForJump(address,name)
        script=(script):format(registername, registername, name, copy, registername, i, bytes, address)..string.rep('nop\n',i-size)..'returnhere:'
    end
    local success,erro=autoAssembleCheck(script)
    if not success then print('\n'..erro..'\n')local scriptstr=createStringlist()scriptstr.Text=script for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    if not disable then deAlloc(name)unregisterSymbol(name)end error(name..' autoAssemble failed')end
    autoAssemble(script)
    if disable then deAlloc(name)unregisterSymbol(name)unregisterSymbol(registername)end
end

function cycleFullCompact(sender,force)
  local state = not(compactmenuitem.Caption == 'Compact View Mode')
  if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
  getMainForm().Splitter1.Visible = state
  getMainForm().Panel4.Visible = state
  getMainForm().Panel5.Visible = state
end

function addCompactMenu()
  if compactmenualreadyexists then return end
  local parent = getMainForm().Menu.Items
  compactmenuitem = createMenuItem(parent)
  parent.add(compactmenuitem)
  compactmenuitem.Caption = 'Compact View Mode'
  compactmenuitem.OnClick = cycleFullCompact
  compactmenualreadyexists = 'yes'
end

addCompactMenu()
--cycleFullCompact(nil,true)

if syntaxcheck then return end

[ENABLE]
if not process or not enumModules()[1] then print('Error: No process selected...') error('process is nil') end
if string.find(process,'MassEffect') then
  isMassEffect=true
  --findAddress('GUObjectArray',1,'4C * * * * * * 49 3B * 0F 84 * * * * 48 89 * * * 48 89banana',process)
  --print('------------------')
  local result2,result=findAddress('FNamePool',0,'C0 CA 45 80 00 00 00 00 00 00 00 00 4E 6F 6E 65 00banana',process,nil,0,true)
  for i=1,#result2 do
    result=pointerscan(getAddress(result2[i]),process)
    for j=1,#result do
      stringoffset=0xC
      unregisterSymbol('FNamePool') registerSymbol('FNamePool',result[j],true)
    end
  end

  else isMassEffect=nil
end
starttime=os.clock()
if not UEMember then UEMember={}end

if not UE4ver then UE4ver=ue4versioncheck() end

ue4config()

if not getAddressSafe('GUObjectArray') and not getAddressSafe('FNamePool')  then

  if targetIs64Bit() then

    local address=findAddress('GUObjectArray',0,'44 8B * * * 48 8D 05 * * * * * * * * * 48 89 71 10banana',process,nil,0,true)[1]
    if not address then address=findAddress('GUObjectArray',0,'40 53 48 83 EC 20 48 8B D9 48 85 D2 74 * 8Bbanana',process,nil,0,true)[1]end
    if not address then address=findAddress('GUObjectArray',0,'4C 8B 05 * * * * 45 3B 88banana',process,nil,0,true)[1]end
    if not address then findAddress('GUObjectArray','1,-0x68','4C 8B 44 24 60 8B 44 24 78 * * * 48 8Dbanana',process)
    else findAddress('GUObjectArray',1,address)end

    if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
      if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
      elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
      else UE4ver=20 end
    end

    if UE4ver&gt;=23 then
      address=findAddress('FNamePool',0,'4C 8D 05 * * * * EB 16 48 8D 0D * * * * E8banana',process,nil,0,true)[1]
      if not address then address=findAddress('FNamePool',0,'48 8D 0D *  *  *  *  E8 *  *  *  * 4C 8B C0 C6banana',process,nil,0,true)[1]end
      if address then findAddress('FNamePool',1,address)
      else error('FNamePool aob not found...')end
    elseif string.find(process,'StateOfDecay2')then
      findAddress('FNamePool',1,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      findAddress('FNamePool2',3,'48 8D * * * * * 8B * * 85 * 74 * 8Dbanana',process,nil,1,nil,true,true)
      FNamePool=getAddress('FNamePool')
      FNamePool2=getAddress('FNamePool2')
    else
      address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[2]
      if not address then address=findAddress('FNamePool',0,'48 83 EC 28 48 8B 05 *  *  *  *  48 85 C0 75 *  B9 *  *  00 00 48 89 5C 24 20 E8banana',process,nil,0,true)[1] end
      if address then findAddress('FNamePool',1,address)
      else findAddress('FNamePool',1,'C3 *  DB 48 89 1D *  *  *  *  *  *  48 8B 5C 24 20banana',process,nil,2)end
    end

  else
    if UE4ver&gt;2 then
      findAddress('GUObjectArray',1,'8B 44 24 04 56 8B F1 85 C0 74 17 8B 40 08banana',process)
      findAddress('FNamePool',1,'33 F6 89 35 * * * * 8B C6 5Ebanana',process,nil,1,nil,true,true)
    else
      findAddress('FNamePool',1,'8B 07 8B 0D * * * * 8B 04 81banana',process)
      findAddress('GUObjectArray',1,'8B 15 * * * * 8B 04 82 85banana',process)
    end
  end

end

if targetIs64Bit() then
  if UE4ver&gt;7 then
    local address=findAddress('GEngine',0,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process,nil,0,true)[1]
    if not address then address=findAddress('GEngine',0,'48 8B 1D * * * * 48 85 DB 74 * 48 8Dbanana',process,nil,0,true)[1]end
    if not address then error('GEngine aob not found...')end
    findAddress('GEngine',1,address)
 --findAddress('GEngine',1,'41 B8 01 00 00 00 * * * 48 8B 0D * * * * E8 * * * * 48 85 C0banana',process)
  end
else
  if UE4ver&gt;2 then
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  else
    findAddress('GEngine',1,'56 8B 35 * * * * 85 F6 74banana',process)
  end
end

print('AOBScan done : '..os.clock()-starttime)

ue4parsetable()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

if not UObject.super or not UObject.member or not UObject.nextmember or not UObject.Offset
or not UObject.propsize or not UObject.bitmask or not UObject.Property or not UObject.funct
or not UObject.enumoffset or  not UObject.enummul or not UObject.enumname or not UObject.enumindex
then if UE4ver&gt;7 then UE4AutoConfig() else UE3AutoConfig() end end

print('Table parsing done : '..os.clock()-starttime)

--findAddress('GWorld',1,'4D 8B 94 24 50 0C 00 00banana',process)

if UE4ver&gt;7 then
  local Classes={'/Script/Engine.GameViewportClient',
  '/Script/Engine.Engine',
  '/Script/Engine.Controller',
  '/Script/Engine.Player',
  '/Script/Engine.GameInstance',
  '/Script/Engine.GameEngine',
  '/Script/Engine.Character',
  '/Script/Engine.CharacterMovementComponent'}
  for i=1,#Classes do
    if not StaticFindObjectAlgo(Classes[i]) then print("Can't find "..Classes[i])end
  end
  registerMemberAlgo()
end
--[[
if UObject.Offset and not UE_member and UObject.funct and not UE_function then
  if ue4parsetablecheck() or #ObjectTable&lt;0x30000 then BasicEnumObject() end
  registerFuncAlgo()
  registerMemberAlgo()
end]]


print('All done : '..os.clock()-starttime..'\n')
if not ue_SymbolLookupCallbackID then
  ue_SymbolLookupCallbackID=registerSymbolLookupCallback(ue_SymbolLookupCallback,slNotSymbol)
end
--registerFuncAlgo()
GetLuaEngine().close()
[DISABLE]
--cycleFullCompact(nil,false)
unregisterSymbolLookupCallback(ue_SymbolLookupCallbackID)
ue_SymbolLookupCallbackID=nil
--[[
unregisterSymbol('GEngine')
unregisterSymbol('GUObjectArray')
unregisterSymbol('FNamePool')]]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>26216</ID>
                  <Description>"Enable ue_structureDissectCallback (Experimental)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
if not ue_structureDissectOverrideCallbackID then
  ue_structureDissectOverrideCallbackID=registerStructureDissectOverride(ue_structureDissectOverrideCallback)
end

if not ue_structureNameLookupCallbackID then
  ue_structureNameLookupCallbackID=registerStructureNameLookup(ue_structureNameLookupCallback)
end
--[[
UEObjt=createThread(function()
  while(true)do
    if not UEObj and not enumUEObjIsRunning then enumUEObj(1)
    elseif not enumUEObjIsRunning then enumUEObj(1,1)end
    sleep(30000)
  end
end)
 ]]
[DISABLE]
unregisterStructureDissectOverride(ue_structureDissectOverrideCallbackID)
unregisterStructureNameLookup(ue_structureNameLookupCallbackID)
ue_structureDissectOverrideCallbackID=nil
ue_structureNameLookupCallbackID=nil

--UEObjt:terminate()
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26217</ID>
                  <Description>"Refresh ObjectList"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
BasicEnumObject()

[DISABLE]
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26218</ID>
                  <Description>"Re-register Fields/Members 's Symbols"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
registerMemberAlgo()

[DISABLE]
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26219</ID>
                  <Description>"UE Object Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

starttime=os.clock()

totalobject=0
local Path = 'C:\\Users\\'..os.getenv('USERNAME')..'\\Desktop\\'
local filename= string.format('[%s] ObjectsDump.txt',process)
local file,err = io.open(Path..filename, 'w')
assert(file,err)
print(Path..filename)
file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
local size,sizes,pointer,datatable,pointers,propname,offset,list,str,strid,name,objid=targetIs64Bit() and 8 or 4,HighestObjectID+10
for i=1,sizes do
  if ObjectTable[i] then
    totalobject=totalobject+1
    str=string.format('%016X',ObjectTable[i].Address)
    strid=string.format('%08u',ObjectTable[i].ObjectId)
    name=ObjectTable[i].Type..' '..ObjectTable[i].FullName
    if ObjectTable[i].Offset then
      strid=string.format('%8X',ObjectTable[i].Offset)
    end
    if ObjectTable[i].Property and #ObjectTable[i].Property==1 then
      name=string.format('%s ~ %s %s',name,ObjectTable[i].Property[1].Type,ObjectTable[i].Property[1].FullName)
    end

    file:write(string.format('[%s] %s %s\n',strid,str,name))

    if ObjectTable[i].Property and #ObjectTable[i].Property==2 then
      for j=1,2 do
        name=string.format('%s %s',ObjectTable[i].Property[j].Type,ObjectTable[i].Property[j].FullName)
        if ObjectTable[i].Property[j].Property and ObjectTable[i].Property[j].Property[1] then
          name=string.format('%s ~ %s %s',name,ObjectTable[i].Property[j].Property[1].Type,ObjectTable[i].Property[j].Property[1].FullName)
        end
        file:write(string.format('[%8X] %016X %s\n',readInteger(ObjectTable[i].Property[j].Address+UObject.Offset),ObjectTable[i].Property[j].Address,name))
      end
    end

    if UObject.enumoffset and UObject.enummul and UObject.enumindex and UObject.enumname then
    if ObjectTable[i].Type=='UserDefinedEnum' or ObjectTable[i].Type=='Enum' then
      list=ObjectTable[i].Address+UObject.enumoffset
      for k=0,readInteger(list+size)-1 do
        pointers=readPointer(list)+k*UObject.enummul
        offset=readBytes(pointers+UObject.enumindex,1)
        if not offset then break end
        if offset==0 then offset=k end
        propname=FNameStringAlgo(pointers+UObject.enumname)
        strid=string.format('%8X',offset)
        str=string.format('%016X',pointers)
        file:write(string.format('[%s] %s %s\n',strid,str,propname))
      end
    end
    end

    if ObjectTable[i].Member and UE4ver&gt;=25 then
      for m=1,#ObjectTable[i].Member do
        if not string.find(ObjectTable[i].Member[m].Type,'Function')then

        totalobject=totalobject+1


        str=string.format('%016X',ObjectTable[i].Member[m].Address)
        strid=string.format('%08u',ObjectTable[i].Member[m].ObjectId)
        name=ObjectTable[i].Member[m].Type..' '..ObjectTable[i].Member[m].FullName
        if ObjectTable[i].Member[m].Offset then
          strid=string.format('%8X',ObjectTable[i].Member[m].Offset)
        end
        if ObjectTable[i].Member[m].Property and #ObjectTable[i].Member[m].Property==1 then
          name=string.format('%s ~ %s %s',name,ObjectTable[i].Member[m].Property[1].Type,ObjectTable[i].Member[m].Property[1].FullName)
        end

        file:write(string.format('[%s] %s %s\n',strid,str,name))

        if ObjectTable[i].Member[m].Property and #ObjectTable[i].Member[m].Property==2 then
        for j=1,2 do
          name=string.format('%s %s',ObjectTable[i].Member[m].Property[j].Type,ObjectTable[i].Member[m].Property[j].FullName)
          if ObjectTable[i].Member[m].Property[j].Property and ObjectTable[i].Member[m].Property[j].Property[1] then
            name=string.format('%s ~ %s %s',name,ObjectTable[i].Member[m].Property[j].Property[1].Type,ObjectTable[i].Member[m].Property[j].Property[1].FullName)
          end
          file:write(string.format('[%8X] %016X %s\n',readInteger(ObjectTable[i].Member[m].Property[j].Address+UObject.Offset),ObjectTable[i].Member[m].Property[j].Address,name))
        end
        end
    end



      end
    end

  end
end
file:close()
print(string.format('\nA Total of %u objects has been dumped in %.3f seconds',totalobject,os.clock()-starttime))

shellExecute(Path..filename)

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26220</ID>
                  <Description>"UE Name Dumper Algo"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function uenamedump(file,start,stop)
  for i=start,stop do
    local name=FNameStringAlgo(i,true)
    if name and name:len()&lt;200 and name:len()&gt;3 and not string.find(name,'%c')  then
      --print(name)
      local strid=string.format('%08X',i)

      file:write(string.format('[%s] %s\n',strid,name))
      totalname=totalname+1
    end
  end
end


 local size
 if readPointer(FNameString) or string.find(process,'StateOfDecay2')then size=0xFFFFFFFF
 elseif UE4ver&gt;=23 then size=(#FNameDict&lt;&lt;0x10)-1
 elseif UE4ver&gt;2 then size=(#FNameDict&lt;&lt;0xE)-1
 else size=math.floor(#FNameDict[1]/4) end
 local count=0x200
 size=math.floor((size/count)+0.5)

 starttime=os.clock()
 local Path = 'C:\\Users\\'..os.getenv('USERNAME')..'\\Desktop\\'
 local filename= string.format('[%s] NamesDump.txt',process)
 local file,err = io.open(Path..filename, 'w')
 assert(file,err)
 file:write(string.format('Process: %s\nUE version: %.2f\nTimeStamp: %s\n\n',process,UE4ver,os.date()))
 totalname=0
 ue4parsetablecheck()
 local num,start,stop=count,0,0
 for i=0,size do
   start=stop
   stop=stop+num
   createThread(uenamedump(file,start,stop-1))
 end
 file:close()
 print(string.format('\nA Total of %u names had been dumped in %.3f seconds',totalname,os.clock()-starttime))
 print(Path..filename)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26221</ID>
                  <Description>"Construct Console"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
function AAscript(script)
  local success,erro=autoAssembleCheck(script)
  if not success then
    print('\n'..erro..'\n')
    local scriptstr=createStringlist()scriptstr.Text=script
    for j=0,scriptstr.Count-1 do print(string.format('%u\t%s',j+1,scriptstr[j])) end
    error('autoAssemble failed')
  end
  autoAssemble(script)
end

AAscript("aobscanmodule(StaticConstructObject,$process,4C ?? ?? ?? ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D ?? ?? ?? ?? ?? ?? 48 81 ?? ?? ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? 48 89)\nregistersymbol(StaticConstructObject)")
local StaticConstructObject=getAddress('StaticConstructObject')
local Console=executeCodeEx
(
  0,nil,
  getAddress(StaticConstructObject),
  getAddress('[[GEngine]+GameEngine.ConsoleClass]'),
  getAddress('[[GEngine]+GameEngine.GameViewport]'),
  0,0,0,0,0,0,0
)
writePointer('[[GEngine]+GameEngine.GameViewport]+GameViewportClient.ViewportConsole',Console)


[DISABLE]
--"NewObject with empty name can't be used to create default subobjects"


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26222</ID>
                  <Description>"Get GEngine "</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
--if ue4parsetablecheck() or #ObjectTable&lt;0x30000 then BasicEnumObject() end
local Object=UE4ver&gt;7 and StaticFindObjectAlgo('/Script/Engine.GameEngine') or StaticFindObjectAlgo('Engine.GameEngine')--FindObjectName('GameEngine')
if not Object then error('cant find Class GameEngine')end
Object=ObjectLists[Object]
for i=0,4 do
  if Object.Uper and Object.Uper[1] then Object=Object.Uper[1] else break end
end


for i=1,#Object.Instance do
  if not string.find(Object.Instance[i].Name,'Default') then Object=Object.Instance[i] break end
end


print(string.format('%X : %s %s',Object.Address,Object.Type,Object.FullName))


unregisterSymbol('GEngine')
registerSymbol('GEngine',pointerscan(Object.Address,process)[1],true)



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26223</ID>
                  <Description>"Create Struct"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local str,Address
str=inputQuery('CreateStructure', 'Input FullName of Class or Address of Class', '/Script/Engine.GameEngine')
if str and str~='' then
  Address=getAddressSafe(str)
  if not Address then  Address=StaticFindObjectAlgo(str)end
  if Address then Address=SaveObject(Address)end
  if not Address then error("Can't find "..str..', either invalid Object Address or invalid FullName')
  else
    SaveAndRemoveStruct()
    local Struct=ue4createstruct(Address)
    Struct.addToGlobalStructureList()
    createStructureForm(nil,nil,Struct.Name)
  end
end
 
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26224</ID>
                  <Description>"Print Fields/Members 's Classes used"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local AddressList,str,strtable,FullName=getAddressList(),'{',{}
for i=0,AddressList.Count-1 do
  if AddressList[i].Address~='' then
    FullName=AddressList[i].Address:gsub('+','')
    FullName=UEMemberClassFullName[FullName:lower()]
    if FullName and not strtable[FullName] then strtable[FullName]=FullName str=string.format("%s'%s',\n",str,FullName) end
  end
  for j=0,AddressList[i].OffsetCount-1 do
    if AddressList[i].OffsetText[j]~='' then
      FullName=AddressList[i].OffsetText[j]:gsub('+','')
      FullName=UEMemberClassFullName[FullName:lower()]

      if FullName and not strtable[FullName] then strtable[FullName]=FullName str=string.format("%s'%s',\n",str,FullName) end
    end
  end
end

print(str:sub(0,str:len()-2)..'}')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26225</ID>
                  <Description>"NoClip &amp; Fly                                            Numpad6 :Toggle, Space :Up, LeftCtrl :Down"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
local str1='[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]'
[ENABLE]

--[[
Enum /Script/Engine.EMovementMode
0:MOVE_None
1:MOVE_Walking
2:MOVE_NavWalking
3:MOVE_Falling
4:MOVE_Swimming
5:MOVE_Flying
6:MOVE_Custom
7:MOVE_MAX

local list=+0x40
for i=0,readInteger(list+8)-1 do
local pointer=readPointer(list)+i*0x10
local enum=readInteger(pointer+8)
local name=FNameString(pointer)
print(enum..':'..name)
end
]]


if not RelativeLocationZoffset then
  local address=getAddress('['..str1..'+Character.CapsuleComponent]')
  local value=readInteger(address+getAddress('ActorComponent.RelativeLocation+Vector.Z'))
  local list=groupscan(string.format('4:%u',value),address,address+0x1000)
  RelativeLocationZoffset={}
  for i=1,#list do
    RelativeLocationZoffset[i]=getAddress(list[i])-address
  end
end

local address=getAddressSafe(str1..'+Actor.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) &amp; ~ getAddress('Actor.bActorEnableCollision.Bit')
writeBytes(address,bActorEnableCollision)
end

updown = createTimer()
updown.Interval = 5
updown.OnTimer = function(t)
  local address=getAddressSafe('['..str1..'+Character.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_SPACE) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])+20)
      end
    end
    if isKeyPressed(VK_LCONTROL) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i], readFloat(address+RelativeLocationZoffset[i])-20)
      end
    end
  end
  local address=getAddressSafe('['..str1..'+Character.CharacterMovement]+MovementComponent.MovementMode')
  if address then
  writeBytes(address,5)
  end
end




[DISABLE]
updown.destroy()

local address=getAddressSafe(str1..'+Actor.bActorEnableCollision')
if address then
local bActorEnableCollision=readBytes(address,1) | getAddress('Actor.bActorEnableCollision.Bit')
writeBytes(address,bActorEnableCollision)
end

local address=getAddressSafe('['..str1..'+Character.CharacterMovement]+MovementComponent.MovementMode')
if address then
writeBytes(address,1)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>102</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26226</ID>
                      <Description>"WASD"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
wasd = createTimer()
wasd.Interval = 5
wasd.OnTimer = function(t)
  local address=getAddressSafe('[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CapsuleComponent]')
  if address then
    if isKeyPressed(VK_S) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)+20)
      end
    end
    if isKeyPressed(VK_W) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-8, readFloat(address+RelativeLocationZoffset[i]-8)-20)
      end
    end
    if isKeyPressed(VK_A) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)+20)
      end
    end
    if isKeyPressed(VK_D) then
      for i=1,#RelativeLocationZoffset do
        writeFloat(address+RelativeLocationZoffset[i]-4, readFloat(address+RelativeLocationZoffset[i]-4)-20)
      end
    end
  end
end

[DISABLE]
wasd.destroy()
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>26227</ID>
                  <Description>"bCanBeDamaged false (Godmode)      Numpad4 :Deactive, Numpad5 :Active"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
local str1='[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Actor.bCanBeDamaged'
[ENABLE]
--CanBeDamaged = createTimer()
--CanBeDamaged.setInterval(1000)
--CanBeDamaged.OnTimer = function()
local address=getAddressSafe(str1)
if address then
local bCanBeDamaged=readBytes(address,1) &amp; ~ getAddress('Actor.bCanBeDamaged.Bit')
writeBytes(address,bCanBeDamaged)
end
--end
 
 
[DISABLE]
--CanBeDamaged.destroy()

local address=getAddressSafe(str1)
if address then
local bCanBeDamaged=readBytes(address,1) | getAddress('Actor.bCanBeDamaged.Bit')
writeBytes(address,bCanBeDamaged)
end
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>101</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>100</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26228</ID>
                  <Description>"Jump Multiplier                                       Numpad0 :Deactive, Numpad1 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
jumpmultiplier=1
if syntaxcheck then return end
local str1='[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]'
local str2=str1..'CharacterMovementComponent.JumpZVelocity'
local str3=str1..'CharacterMovementComponent.MaxAcceleration'
local str4=str1..'CharacterMovementComponent.AirControl'
if not jumpdefault then jumpdefault=readFloat(str2)&lt;100 and 100 or readFloat(str2) end
if not MaxAccelerationdefault then MaxAccelerationdefault=readFloat(str3)end
if not AirControldefault then AirControldefault=readFloat(str4)end
[ENABLE]
jumpmuti=createHotkey(function()jumpmultiplier=jumpmultiplier+0.5 end,VK_NUMPAD1)
jump = createTimer()
jump.setInterval(100)
jump.OnTimer = function()
local address=getAddressSafe(str2)
local address2=getAddressSafe(str3)
local address3=getAddressSafe(str4)
if address then writeFloat(address,jumpdefault*jumpmultiplier)
writeFloat(address2,MaxAccelerationdefault*jumpmultiplier)
writeFloat(address3,AirControldefault*jumpmultiplier)
end
end
[DISABLE]
jump.destroy()
jumpmuti.destroy()
local address=getAddressSafe(str2)
local address2=getAddressSafe(str3)
local address3=getAddressSafe(str4)
if address then writeFloat(address,jumpdefault)
writeFloat(address2,MaxAccelerationdefault)
writeFloat(address3,AirControldefault)
end

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>97</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>96</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26229</ID>
                  <Description>"MovementSpeed Multiplier                   Numpad2 :Deactive, Numpad3 :Active &amp; Increase"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
speedvarmutiplier=1
if syntaxcheck then return end
local str1={'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxWalkSpeed'
,'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxWalkSpeedCrouched'
,'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxSwimSpeed'
,'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxFlySpeed'
,'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxCustomMovementSpeed'
,'[[[[[[[GEngine]+Engine.GameInstance]+GameInstance.LocalPlayers]]+Player.PlayerController]+Actor.Character]+Character.CharacterMovement]+CharacterMovementComponent.MaxAcceleration'
}

if not speedvar then
  speedvar={}
  for i=1,#str1 do
    speedvar[i]=readFloat(str1[i])
  end
end

[ENABLE]
speedvarmuti=createHotkey(function() speedvarmutiplier=speedvarmutiplier+0.5 end,VK_NUMPAD3)
speedv = createTimer()
speedv.setInterval(100)
speedv.OnTimer = function()
  for i=1,#str1 do
    address=getAddressSafe(str1[i])
    if address then writeFloat(address,speedvar[i]*speedvarmutiplier)end
  end
end
[DISABLE]
speedv.destroy()
speedvarmuti.destroy()

for i=1,#str1 do
  address=getAddressSafe(str1[i])
  if address then writeFloat(address,speedvar[i]*speedvarmutiplier)end
end
speedvar=nil
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Activate</Action>
                      <Keys>
                        <Key>99</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Deactivate</Action>
                      <Keys>
                        <Key>98</Key>
                      </Keys>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>26230</ID>
                  <Description>"UWorld"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>GameViewportClient.World</Offset>
                    <Offset>Engine.GameViewport</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>26231</ID>
                  <Description>"Player"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>GEngine</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>Actor.Character</Offset>
                    <Offset>Player.PlayerController</Offset>
                    <Offset>0</Offset>
                    <Offset>GameInstance.LocalPlayers</Offset>
                    <Offset>Engine.GameInstance</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26232</ID>
                      <Description>"CharacterMovement"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <GroupHeader>1</GroupHeader>
                      <Address>+Character.CharacterMovement</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>26233</ID>
                          <Description>"JumpZVelocity"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>+CharacterMovementComponent.JumpZVelocity</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26234</ID>
                          <Description>"MaxWalkSpeed"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>+CharacterMovementComponent.MaxWalkSpeed</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26235</ID>
                          <Description>"MaxWalkSpeedCrouched"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>+CharacterMovementComponent.MaxWalkSpeedCrouched</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>26236</ID>
                          <Description>"MaxAcceleration"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>+CharacterMovementComponent.MaxAcceleration</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>26237</ID>
              <Description>"Tools"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>26238</ID>
                  <Description>"FNamePool scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'))
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26239</ID>
                  <Description>"FNamePool scanner V2 (Generic)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  result=stringscan('IntProperty',getAddressSafe(strlist[i]),getAddressSafe(strlist[i]..'+50'),isUnicode)
  if #result&gt;0 then
    result=stringscan('None',getAddressSafe(strlist[i]..'-50'),getAddressSafe(strlist[i]),isUnicode)
    print(strlist[i])
    if #result&gt;0 then
      if string.sub(strlist[i],strlist[i]:len()-3,strlist[i]:len()-2)=='00' then
        result=pointerscan(getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00'),nil,nil,getAddressSafe(string.sub(strlist[i],1,strlist[i]:len()-2)..'00')+0x50)
        for j=1,#result do
          pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(strlist[i]..'&lt;-'..result[j])
            unregisterSymbol('FNamePool')
            registerSymbol('FNamePool',result[j]..'-10',true)
            if ue4versioncheck()&lt;=2 then UE4ver=23 end

            --if string.sub(result[j],result[j]:len()-1,result[j]:len())=='00' then
              result2=pointerscan(getAddressSafe(result[j]))
              for k=1,#result2 do
                print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
                if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end
                result3=pointerscan(getAddressSafe(result2[k]),getAddress(process),getAddress(process)+getModuleSize(process))
                for l=1,#result3 do
                  print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k]..'&lt;-'..result3[l])
                  unregisterSymbol('FNamePool')
                  registerSymbol('FNamePool',result3[l],true)
                  if ue4versioncheck()&lt;=2 then UE4ver=22 end
                  goto done
                end
              end
            --end
          end
        end
      end
    end
  end
end
::done::
print('done')

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26240</ID>
                  <Description>"FNamePool scanner V3 (Unicode)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=true
local strlist,result,result2,result3,pointer1,pointer2,pointer3=stringscan('ByteProperty',nil,nil,isUnicode)

for i=1,#strlist do
  print(strlist[i])
  result=pointerscan(getAddress(strlist[i])-0x50,nil,nil,getAddress(strlist[i]))
  for j=1,#result do
    if string.sub(result[j],result[j]:len()-3,result[j]:len()-2)=='00' then
      print(result[j])
      pointer1=readPointer(result[j]..(targetIs64Bit() and '+8' or '+4'))
      pointer1=readPointer(pointer1)
      pointer2=readPointer(result[j]..(targetIs64Bit() and '+10' or '+8'))
      pointer2=readPointer(pointer2)
      pointer3=readPointer(result[j]..(targetIs64Bit() and '+18' or '+C'))
      pointer3=readPointer(pointer3)
      if pointer1 and pointer2 and pointer3 then
         print(strlist[i]..'&lt;-'..result[j])
         result2=pointerscan(getAddressSafe(string.sub(result[j],1,result[j]:len()-2)..'00'))
         for k=1,#result2 do
           print(strlist[i]..'&lt;-'..result[j]..'&lt;-'..result2[k])
           if inModule(result2[k]) then UE4ver=ue4versioncheck() unregisterSymbol('FNamePool') registerSymbol('FNamePool',result2[k],true) goto done end

         end
      end
    end
  end
end
::done::
print('done')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26241</ID>
                  <Description>"FNamePool scanner V4 (BatmanAk)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]

print('------------------')
local isUnicode=false
local size= targetIs64Bit() and 8 or 4
local result2,result,result3,result4,pointer1,pointer2,pointer3,tempstringoffset,str,tempfnamepooloffset=stringscan('ByteProperty',nil,nil,isUnicode)
for i=1,#result2 do
--print(result2[i])
  result=pointerscan(getAddress(result2[i]..'-50'),nil,nil,getAddress(result2[i]))

  for j=1,#result do
    tempstringoffset=getAddress(result2[i])-readPointer(getAddress(result[j]))

    for k=size,0x50,4 do
      str=readString(readPointer(getAddress(result[j])+k)+tempstringoffset,0x30,isUnicode)
      if str and str=='IntProperty' then
        stringoffset=tempstringoffset
        print(result2[i]..'&lt;-'..result[j])

        result3=pointerscan(getAddress(result[j]..'-50')-k,nil,nil,getAddress(result[j]))
        for m=1,#result3 do


          pointer1=readPointer(result3[m]..(targetIs64Bit() and '+8' or '+4'))
          pointer1=readPointer(pointer1)
          pointer2=readPointer(result3[m]..(targetIs64Bit() and '+10' or '+8'))
          pointer2=readPointer(pointer2)
          pointer3=readPointer(result3[m]..(targetIs64Bit() and '+18' or '+C'))
          pointer3=readPointer(pointer3)

          if pointer1 and pointer2 and pointer3 then
            print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])

            --print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m])
            stringoffset2=0xc--((getAddress(result[j])-readPointer(result3[m])+size)/2)-size
          --print(string.format('%X',((getAddress(result[j])-readPointer(result3[m])+size)/2)-size))
            stringmul=k

            result4=pointerscan(getAddress(result3[m])-0x50,process,nil,getAddress(result3[m])+0x50)
            for n=1,#result4 do
              print(result2[i]..'&lt;-'..result[j]..'&lt;-'..result3[m]..'&lt;-'..result4[n])
              unregisterSymbol('FNamePool') registerSymbol('FNamePool',result4[n],true)
            end
          end
        end
      end
    end
  end
end
::done::
print('done')



[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26242</ID>
                  <Description>"UE4 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              if checkvalue(pointer2+size,0x50,1,4)then UObject.ObjectId=checkvalue(pointer2+size,0x50,1,4)-pointer2
              else UObject.ObjectId=checkvalue(pointer2,0x50,1,4)-pointer2 end
              UObject.Class=checkvalue(pointer2+size,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2+size,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2+size,0x50,pointer,size)-pointer2

              local str
              if UE4ver&lt;9 and targetIs64Bit() then
                str=string.format('8:0x%X 8:0x%X',pointer,pointer2)
              elseif UE4ver&lt;9 then
                str=string.format('4:0x%X 4:0x%X',pointer,pointer2)
              elseif targetIs64Bit() then
                str=string.format('8:0x%X 8:* 8:* 8:0x%X',pointer,pointer2)
              else
                str=string.format('4:0x%X 4:* 4:* 4:* 4:0x%X',pointer,pointer2)
              end
              print(str)
              result2=groupscan(str)
              for n=1,#result2 do
                local result3
                if not Aligned or getAddress(result2[n])%size==0 then
                  print(string.format('%X&lt;-%s',pointer2,result2[n]))
                  --result3=pointerscan(getAddress(result2[n]:sub(1,result2[n]:len()-2)..'00'))
                end
                if not result3 or #result3&lt;=0 then result3=pointerscan(getAddress(result2[n]))end
                for o=1,#result3 do
                  local result4
                  if not Aligned or getAddress(result3[o])%size==0 then

                    --if not inModule(result3[o]) then
                      print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))

                    --end

                    if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                      unregisterSymbol('GUObjectArray')
                      registerSymbol('GUObjectArray',result3[o]..'-10',true)
                      goto done
                    end

                    result4=pointerscan(getAddress(result3[o]))


                  end
                  if not result4 then result4={}end
                  for q=1,#result4 do
                    if not Aligned or getAddress(result4[q])%size==0 then
                      print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))

                      if inModule(result4[q]) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result4[q]..'-10',true)
                        goto done
                      end

                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26243</ID>
                  <Description>"UE4 Object scanner V2"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object')
local Class=FindStringFName('Class')
local CoreUObject=FindStringFName('/Script/CoreUObject')
if not UObject then  UObject = {} end
print(Object)
print(Class)
print(CoreUObject)
local size,pointer,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  if checkvalue(getAddress(result[i])-0x50,0x50,1,4)then
    for j=0,0x100,size do
      pointer=readPointer(getAddress(result[i])-0x50+j)
      if not pointer then break end
      if checkvalue(pointer,0x50,Class,4) then
        pointer3=pointer
        for k=0,0x100,size do
          local pointer=readPointer(getAddress(result[i])-0x50+k)
          if not pointer then break end
          if checkvalue(pointer,0x50,CoreUObject,4)then

            --print(result[i])
            local value=targetIs64Bit() and readInteger(pointer+4) or readSmallInteger(pointer+2)
            --print(string.format('%X',readInteger(pointer)))

            if targetIs64Bit() then pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value,(size/2))
            else
              for p=0,10 do
                if pointer2 then break end
                pointer2=checkvalue(getAddress(result[i])-0x50,0x50,value-5+p,(size/2))
              end
            end
            if pointer2 then
              pointer2=pointer2-(size/2)
              print(string.format('%X',pointer2))

              UObject.ObjectId=checkvalue(pointer2+size,0x50,1,4)-pointer2
              UObject.Class=checkvalue(pointer2+size,0x50,pointer3,size)-pointer2
              UObject.FNameIndex=checkvalue(pointer2+size,0x50,Object,4)-pointer2
              UObject.Outer=checkvalue(pointer2+size,0x50,pointer,size)-pointer2

              local str

              for p=4,0,-1 do
                str=string.format('%u:0x%X',size,pointer)
                for q=1,p do
                  str=str..' 4:*'
                end
                str=str..string.format(' %u:0x%X',size,pointer2)
                UObjectMul=(4*p)+size

                print(str)


                result2=groupscan(str)
                for n=1,#result2 do
                  local result3
                  if result2[n]:sub(result2[n]:len()-1,result2[n]:len())=='00' then
                    print(string.format('%X&lt;-%s',pointer2,result2[n]))
                    result3=pointerscan(getAddress(result2[n]))
                  end
                  if not result3  then result3={}end
                  for o=1,#result3 do
                    local result4
                    if not Aligned or getAddress(result3[o])%size==0 then
                      --if not inModule(result3[o]) then
                        print(string.format('%X&lt;-%s&lt;-%s',pointer2,result2[n],result3[o]))
                      --end
                      if inModule(result3[o]) and (readInteger(result3[o]..'-10+1C')&lt;0x7FFFFF or readInteger(result3[o]..'-10+24')&lt;0x7FFFFF) then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result3[o]..'-10',true)
                        result4=pointerscan(getAddress(result3[o]..'-10'),process)
                        if result4[1] then
                          print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[1]))
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[1],true)
                        end
                        goto done
                      end
                      result4=pointerscan(getAddress(result3[o]))
                    end
                    if not result4 then result4={}end
                    for q=1,#result4 do
                      if not Aligned or getAddress(result4[q])%size==0 then
                        print(string.format('%X&lt;-%s&lt;-%s&lt;-%s',pointer2,result2[n],result3[o],result4[q]))
                        if inModule(result4[q]) then
                          unregisterSymbol('GUObjectArray')
                          registerSymbol('GUObjectArray',result4[q]..'-10',true)

                          goto done
                        end
                      end
                    end
                  end
                end
              end

            end
          end
        end
      end
    end
  end
end
::done::

if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end

print('done\n')

ue4parsetable() 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26244</ID>
                  <Description>"UE4 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]
if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('/Script/Engine.GameEngine')
local Engine=StaticFindObjectAlgo('/Script/Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then pointer=readPointer(i) UObject.member=i-GameEngine break end
end
Typ=Name:sub(1,string.find(Name,' ')-1)

UObject.propsize=checkvalue(pointer,0x100,varsize[ue4type[Typ]],4)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
UObject.Offset=checkvalue(pointer,0x100,tostring(classsize-0x100)..'~'..tostring(classsize),4)-pointer

for i=pointer,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Property ') then UObject.nextmember=i-pointer break end
end

pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('/Script/CoreUObject.Object:ExecuteUbergraph')
print(string.format('ExecuteUbergraph = %X\n',pointer))

for i=pointer+UObject.Property,pointer+0x100,size do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('/Script/CoreUObject.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for j=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+j)
      --pointers=readPointer(pointers)
  if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
    UObject.enumoffset=UObject.Outer+j
    pointer=readPointer(pointer+UObject.enumoffset)
    print(string.format('EInterpCurveMode enums = %X\n',pointer))
    UObject.enumname=checkvalue(pointer,0x50,'CIM_Linear',1)-pointer
    UObject.enumindex=checkvalue(pointer,0x50,1,2) and checkvalue(pointer,0x50,1,2)-checkvalue(pointer,0x50,'CIM_CurveAuto',1) or 4
    for k=UObject.enumname+8,0x50,4 do
      if readInteger(pointer+k)&gt;4 and FNameStringAlgo(readInteger(pointer+k),true) then UObject.enummul=k break end
    end

    break
  end
end

print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26245</ID>
                  <Description>"UE3 Object scanner"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}

if syntaxcheck then return end

[ENABLE]
UE4ver=ue4versioncheck()
--unregisterSymbol('FNamePool')
--registerSymbol('FNamePool','libUE4.so+41DE8A4',true)
--UE4ver=nil
--if not UE4ver then ue4versioncheck()end
--ue4config()
--ue4parsetable()
ue4parsetableFNamePool()

FNameStringAlgo(1,true)
FNameStringAlgo(3,true)
if not stringoffset then print('error: stringoffset/ByteProperty not found') error() end

Aligned=true
function ue4parsetablecheck()
end


local Object=FindStringFName('Object',isMassEffect)
if not UObject then  UObject = {} end
print(Object)
local size,pointer,pointer1,pointer2,pointer3=(targetIs64Bit() and 8 or 4)
local result,result2=groupscan('4:'..Object)
print(#result)
for i=1,#result do
  pointer=getAddress(result[i])-0x50
  for j=0,0x200,4 do
    pointer1=checkvalue(readPointer(pointer+j),0x200,'Class',1)
    if pointer1 then
      for k=0,0x200,4 do
        pointer2=checkvalue(readPointer(pointer+k),0x200,'Core',1)
        if pointer2 then
          print(result[i])
          pointer1=pointer1-readPointer(pointer+j)
          pointer2=pointer2-readPointer(pointer+k)
          if pointer1==pointer2 then
            pointer=getAddress(result[i])-pointer1
            print(string.format('%X',pointer))
            for l=1,3 do
              pointer3=checkvalue(pointer+size,0x100,l,4)
              if pointer3 then print(l)
                UObject.ObjectId=pointer3-pointer
                UObject.FNameIndex=pointer1
                UObject.Class=pointer1+j-0x50
                UObject.Outer=pointer1+k-0x50

                result2=pointerscan(pointer)
                for m=1,#result2 do
                  local val=0
                  for o=1,100 do
                    val=o
                    if not readPointer(readPointer(readPointer(getAddress(result2[m])+o*size))) then break end
                  end

                  if val==100 then
                    print(string.format('%X',getAddressSafe(result2[m])-(size*l)))
                    result=pointerscan(getAddressSafe(result2[m])-(size*l),process)
                    unregisterSymbol('GUObjectArray')
                    registerSymbol('GUObjectArray',getAddressSafe(result2[m])-(size*l),true)
                    NOGUObjectsize=true

                    for n=1,#result do
                      print(result2[m]..'&lt;-'..result[n])
                      if inModule(result[n]) and getAddress(result[n])%4==0 then
                        unregisterSymbol('GUObjectArray')
                        registerSymbol('GUObjectArray',result[n],true)
                        NOGUObjectsize=nil
                        goto done
                      end
                    end
                  end
                  if m==#result2 then goto done end
                end
              end
            end
          end
        end
      end
    end
  end
end
::done::
--[[
if ue4versioncheck()&lt;=2 and targetIs64Bit() and UE4ver&lt;23 then
  if readInteger('GUObjectArray+24')==0xFFFFFFFF then UE4ver=18
  elseif readInteger('GUObjectArray+14')==0 then UE4ver=9
  else UE4ver=20 end
end
]]

ue4parsetable()
print('done\n')
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26246</ID>
                  <Description>"UE3 Auto config"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end

[ENABLE]

if not UObject then UObject = {} end
local size,pointer,pointers=(targetIs64Bit() and 8 or 4)
local varsize={[0]=1,[2]=4,[3]=8,[4]=4,[12]=size}
local GameEngine=StaticFindObjectAlgo('Engine.GameEngine')
local Engine=StaticFindObjectAlgo('Engine.Engine')
print(string.format('GameEngine = %X',GameEngine))
print(string.format('Engine = %X\n',Engine))
UObject.super=checkvalue(GameEngine,0x100,Engine,size)-GameEngine
local Name,Typ
for i=GameEngine+UObject.Outer,GameEngine+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and (string.find(Name,'Function ') or string.find(Name,'Property ')) then pointer=readPointer(i) UObject.member=i-GameEngine break end
end

for i=UObject.Outer+size,0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(pointer+i))
  if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
    Name=GetFullNameSafeAlgo(readPointer(readPointer(pointer+i)+i))
      if Name and  (string.find(Name,'Property ') or string.find(Name,'Function ') or string.find(Name,'Struct ')) and not string.find(Name,'Core') then
        UObject.nextmember=i break
      end
  end
end

for i=0,100 do
  pointer=readPointer(UObject.nextmember+pointer)
  Name=GetFullNameSafeAlgo(pointer)
  --print(Name)
  if Name and string.find(Name,'ObjectProperty ') then break end
end

Typ=Name:sub(1,string.find(Name,' ')-1)
--print(string.format('%X = %s',pointer,GetFullNameSafeAlgo(pointer)))
print(string.format('%s = %X',Name,pointer))
UObject.propsize=checkvalue(pointer+UObject.Outer,0x100,varsize[ue4type[Typ]],2)-pointer
local classsize=readInteger(UObject.member+size+GameEngine)
if classsize==0 then classsize=UObject.Outer+0x200 end
print((classsize-0x200)..' ~ '..(classsize+0x1000))
UObject.Offset=checkvalue(pointer+UObject.propsize,0x50,tostring(classsize-0x200)..'~'..tostring(classsize+0x1000),2)-pointer


--pointer=readPointer(Engine+UObject.member)
for i=pointer+UObject.nextmember,pointer+0x100,size do
  Name=GetFullNameSafeAlgo(readPointer(i))
  if Name and string.find(Name,'Class ') then UObject.Property=i-pointer break end
end

UObject.bitmask=UObject.Property+2

pointer=StaticFindObjectAlgo('Core.Object:FindObject')
print(string.format('FindObject = %X\n',pointer))
for i=pointer+UObject.ObjectId,pointer+0x100,4 do
  if inModule(readPointer(i)) then UObject.funct=i-pointer break end
end

pointer=StaticFindObjectAlgo('Core.Object.EInterpCurveMode')
print(string.format('EInterpCurveMode = %X\n',pointer))
for i=size,0x50,size do
  pointers=readPointer(pointer+UObject.Outer+i)
  pointers=readPointer(pointers)
  if pointers then
    for j=size,0x50,size do
      pointers=readPointer(pointer+UObject.Outer+i+j)
      --pointers=readPointer(pointers)
      if pointers and checkvalue(pointers,0x50,'CIM_Linear',1) then
        UObject.enumoffset=UObject.Outer+i+j
        pointer=readPointer(pointer+UObject.enumoffset)
        UObject.enumname=0--checkvalue(pointer,0x50,FindStringFName('CIM_Linear'),4)-pointer
        UObject.enumindex=4--checkvalue(pointer,0x50,1,4)-checkvalue(pointer,0x50,FindStringFName('CIM_CurveAuto'),4)
        UObject.enummul=8--checkvalue(pointer,0x50,2,4)-checkvalue(pointer,0x50,1,4)
        break
      end
    end
    break
  end
end


print(string.format([[
UObject.ObjectId = 0x%X
UObject.Class = 0x%X
UObject.FNameIndex = 0x%X
UObject.Outer = 0x%X
UObject.super = 0x%X
UObject.member = 0x%X
UObject.nextmember = 0x%X
UObject.propsize = 0x%X
UObject.Offset = 0x%X
UObject.Property = 0x%X
UObject.bitmask = 0x%X
UObject.funct = 0x%X
UObject.enumoffset = 0x%X
UObject.enummul = 0x%X
UObject.enumname = 0x%X
UObject.enumindex = 0x%X
]],UObject.ObjectId,UObject.Class,UObject.FNameIndex,
UObject.Outer,UObject.super,UObject.member,UObject.nextmember,
UObject.propsize,UObject.Offset,UObject.Property,
UObject.bitmask,UObject.funct,UObject.enumoffset,
UObject.enummul,UObject.enumname,
UObject.enumindex))
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26247</ID>
                  <Description>"to Single Line Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    if tec.Address:sub(1,1)~='+' then break end
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

if syntaxcheck then return end
[ENABLE]

memrec.Child[0].Address=toStr(memrec.Child[0]) memrec.Child[0].OffsetCount=0
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26248</ID>
                  <Description>"to Structural Address"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function toStr(rec)
  local tec,str,list=rec,'',{}
  while(true)do
    if not tec or not tec.Address then break end
    list[#list+1]=tec
    if tec.Address:sub(1,1)~='+' then break end
    tec=tec.Parent
  end
  for i=#list,1,-1 do
    str=string.format('%s%s',str,list[i].Address)
    for j=list[i].OffsetCount-1,0,-1 do
      str=string.format('[%s]+%s',str,list[i].OffsetText[j])
    end
  end
  return str
end

function toStructural(rec)
  local str,str2,list=toStr(rec),'',{}
  if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
  else str2=str end
  rec.Address=str2
  while(true)do
    if not str:find(']') then break end
    str=str:sub(str:find(']')+2,str:len())
    if str:find(']') then str2=str:sub(1,str:find(']')-1):gsub('%[','')
    else str2=str end
    list[#list+1]=str2
  end
  rec.OffsetCount=#list
  for i=#list,1,-1 do
    rec.OffsetText[#list-i]=list[i]
  end
end

if syntaxcheck then return end
[ENABLE]

toStructural(memrec.Child[0])
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26249</ID>
                  <Description>"Auto Assemble script"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
function GetFullName(object)
  if not GetFullNameMem then GetFullNameMem=allocateMemory(0x100)end
  executeCodeEx(0, nil, getAddress('GetFullName'), object, GetFullNameMem)
  local str=readPointer(GetFullNameMem)
  if str then str=readString(str,readInteger(GetFullNameMem+0x8)*2,true) end
  return str
end


if syntaxcheck then return end
[ENABLE]


 
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>26250</ID>
                  <Description>"DissectCode (Memory View -&gt; Ctrl+J or (Tools -&gt; Dissect code) )"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>26251</ID>
                      <Description>"Save DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
getDissectCode().saveToFile(path)
--getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26252</ID>
                      <Description>"Load DissectCode"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
[ENABLE]
local path=string.format('C:\\Users\\%s\\Documents\\My Cheat Tables\\%s_dissectCode',os.getenv('USERNAME'),process:sub(1,string.find(process,'%.')-1))
--getDissectCode().saveToFile(path)
getDissectCode().loadFromFile(path)
 
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Temp</Name>
      <Address>2D7B7C70000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Structures StructVersion="2">
    <Structure Name="GameEngine" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="12" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="TinyFont" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="TinyFontName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="TinyFontName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="SmallFont" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000058" Description="SmallFontName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="SmallFontName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="MediumFont" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="MediumFontName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="MediumFontName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="LargeFont" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000098" Description="LargeFontName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="LargeFontName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Pointer" Bytesize="8" OffsetHex="000000B0" Description="SubtitleFont" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000B8" Description="SubtitleFontName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="SubtitleFontName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Pointer" Bytesize="8" OffsetHex="000000D0" Description="AdditionalFonts" DisplayMethod="Unsigned Integer">
          <Structure Name="AdditionalFonts[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] AdditionalFonts" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D8" Description="AdditionalFonts_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000DC" Description="AdditionalFonts_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="AdditionalFontNames" DisplayMethod="Unsigned Integer">
          <Structure Name="AdditionalFontNames[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] AdditionalFontNames" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="232" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E8" Description="AdditionalFontNames_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="236" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000EC" Description="AdditionalFontNames_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="Pointer" Bytesize="8" OffsetHex="000000F0" Description="ConsoleClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F8" Description="ConsoleClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="ConsoleClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000108" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Pointer" Bytesize="8" OffsetHex="00000110" Description="GameViewportClientClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000118" Description="GameViewportClientClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="GameViewportClientClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000128" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="LocalPlayerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000138" Description="LocalPlayerClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="LocalPlayerClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000148" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="WorldSettingsClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="344" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000158" Description="WorldSettingsClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="352" Vartype="Pointer" Bytesize="8" OffsetHex="00000160" Description="WorldSettingsClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="360" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000168" DisplayMethod="Unsigned Integer"/>
        <Element Offset="368" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000170" Description="NavigationSystemClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" Description="NavigationSystemClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="384" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000180" DisplayMethod="Unsigned Integer"/>
        <Element Offset="392" Vartype="Pointer" Bytesize="8" OffsetHex="00000188" Description="NavigationSystemClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="400" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000190" Description="NavigationSystemConfigClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="408" Vartype="Pointer" Bytesize="8" OffsetHex="00000198" Description="NavigationSystemConfigClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="416" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="424" Vartype="Pointer" Bytesize="8" OffsetHex="000001A8" Description="NavigationSystemConfigClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="432" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001B0" Description="AvoidanceManagerClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="440" Vartype="Pointer" Bytesize="8" OffsetHex="000001B8" Description="AvoidanceManagerClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="448" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001C0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="456" Vartype="Pointer" Bytesize="8" OffsetHex="000001C8" Description="AvoidanceManagerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="464" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001D0" Description="AIControllerClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="472" Vartype="Pointer" Bytesize="8" OffsetHex="000001D8" Description="AIControllerClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="480" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001E0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="488" Vartype="Pointer" Bytesize="8" OffsetHex="000001E8" Description="PhysicsCollisionHandlerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="496" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001F0" Description="PhysicsCollisionHandlerClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="504" Vartype="Pointer" Bytesize="8" OffsetHex="000001F8" Description="PhysicsCollisionHandlerClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000200" DisplayMethod="Unsigned Integer"/>
        <Element Offset="520" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000208" Description="GameUserSettingsClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="Pointer" Bytesize="8" OffsetHex="00000210" Description="GameUserSettingsClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="536" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000218" DisplayMethod="Unsigned Integer"/>
        <Element Offset="544" Vartype="Pointer" Bytesize="8" OffsetHex="00000220" Description="GameUserSettingsClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="552" Vartype="Pointer" Bytesize="8" OffsetHex="00000228" Description="GameUserSettings" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Pointer" Bytesize="8" OffsetHex="00000230" Description="LevelScriptActorClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="568" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000238" Description="LevelScriptActorClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="576" Vartype="Pointer" Bytesize="8" OffsetHex="00000240" Description="LevelScriptActorClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000248" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000250" Description="DefaultBlueprintBaseClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Pointer" Bytesize="8" OffsetHex="00000258" Description="DefaultBlueprintBaseClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000260" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000268" Description="GameSingletonClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="Pointer" Bytesize="8" OffsetHex="00000270" Description="GameSingletonClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000278" DisplayMethod="Unsigned Integer"/>
        <Element Offset="640" Vartype="Pointer" Bytesize="8" OffsetHex="00000280" Description="GameSingleton" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000288" Description="AssetManagerClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="656" Vartype="Pointer" Bytesize="8" OffsetHex="00000290" Description="AssetManagerClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="664" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000298" DisplayMethod="Unsigned Integer"/>
        <Element Offset="672" Vartype="Pointer" Bytesize="8" OffsetHex="000002A0" Description="AssetManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="Pointer" Bytesize="8" OffsetHex="000002A8" Description="DefaultTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="688" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002B0" Description="DefaultTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="696" Vartype="Pointer" Bytesize="8" OffsetHex="000002B8" Description="DefaultTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="704" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002C0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="712" Vartype="Pointer" Bytesize="8" OffsetHex="000002C8" Description="DefaultDiffuseTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="720" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002D0" Description="DefaultDiffuseTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="Pointer" Bytesize="8" OffsetHex="000002D8" Description="DefaultDiffuseTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="736" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002E0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="Pointer" Bytesize="8" OffsetHex="000002E8" Description="DefaultBSPVertexTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002F0" Description="DefaultBSPVertexTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="760" Vartype="Pointer" Bytesize="8" OffsetHex="000002F8" Description="DefaultBSPVertexTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="768" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000300" DisplayMethod="Unsigned Integer"/>
        <Element Offset="776" Vartype="Pointer" Bytesize="8" OffsetHex="00000308" Description="HighFrequencyNoiseTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000310" Description="HighFrequencyNoiseTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Pointer" Bytesize="8" OffsetHex="00000318" Description="HighFrequencyNoiseTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000320" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Pointer" Bytesize="8" OffsetHex="00000328" Description="DefaultBokehTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000330" Description="DefaultBokehTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Pointer" Bytesize="8" OffsetHex="00000338" Description="DefaultBokehTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000340" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="Pointer" Bytesize="8" OffsetHex="00000348" Description="DefaultBloomKernelTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000350" Description="DefaultBloomKernelTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="856" Vartype="Pointer" Bytesize="8" OffsetHex="00000358" Description="DefaultBloomKernelTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="864" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000360" DisplayMethod="Unsigned Integer"/>
        <Element Offset="872" Vartype="Pointer" Bytesize="8" OffsetHex="00000368" Description="WireframeMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="880" Vartype="Pointer" Bytesize="8" OffsetHex="00000370" Description="WireframeMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000378" DisplayMethod="Unsigned Integer"/>
        <Element Offset="896" Vartype="Pointer" Bytesize="8" OffsetHex="00000380" Description="DebugMeshMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000388" Description="DebugMeshMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="912" Vartype="Pointer" Bytesize="8" OffsetHex="00000390" Description="DebugMeshMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="920" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000398" DisplayMethod="Unsigned Integer"/>
        <Element Offset="928" Vartype="Pointer" Bytesize="8" OffsetHex="000003A0" Description="EmissiveMeshMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="936" Vartype="8 Bytes" Bytesize="8" OffsetHex="000003A8" Description="EmissiveMeshMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="944" Vartype="Pointer" Bytesize="8" OffsetHex="000003B0" Description="EmissiveMeshMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="952" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003B8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="960" Vartype="Pointer" Bytesize="8" OffsetHex="000003C0" Description="LevelColorationLitMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="Pointer" Bytesize="8" OffsetHex="000003C8" Description="LevelColorationLitMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003D0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="984" Vartype="Pointer" Bytesize="8" OffsetHex="000003D8" Description="LevelColorationUnlitMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="992" Vartype="Pointer" Bytesize="8" OffsetHex="000003E0" Description="LevelColorationUnlitMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1000" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003E8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1008" Vartype="Pointer" Bytesize="8" OffsetHex="000003F0" Description="LightingTexelDensityMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1016" Vartype="Pointer" Bytesize="8" OffsetHex="000003F8" Description="LightingTexelDensityName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1024" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000400" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1032" Vartype="Pointer" Bytesize="8" OffsetHex="00000408" Description="ShadedLevelColorationLitMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1040" Vartype="Pointer" Bytesize="8" OffsetHex="00000410" Description="ShadedLevelColorationLitMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1048" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000418" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1056" Vartype="Pointer" Bytesize="8" OffsetHex="00000420" Description="ShadedLevelColorationUnlitMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1064" Vartype="Pointer" Bytesize="8" OffsetHex="00000428" Description="ShadedLevelColorationUnlitMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1072" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000430" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1080" Vartype="Pointer" Bytesize="8" OffsetHex="00000438" Description="RemoveSurfaceMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1088" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000440" Description="RemoveSurfaceMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1096" Vartype="Pointer" Bytesize="8" OffsetHex="00000448" Description="RemoveSurfaceMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000450" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1112" Vartype="Pointer" Bytesize="8" OffsetHex="00000458" Description="VertexColorMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1120" Vartype="Pointer" Bytesize="8" OffsetHex="00000460" Description="VertexColorMaterialName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000468" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1136" Vartype="Pointer" Bytesize="8" OffsetHex="00000470" Description="VertexColorViewModeMaterial_ColorOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1144" Vartype="Pointer" Bytesize="8" OffsetHex="00000478" Description="VertexColorViewModeMaterialName_ColorOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000480" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1160" Vartype="Pointer" Bytesize="8" OffsetHex="00000488" Description="VertexColorViewModeMaterial_AlphaAsColor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1168" Vartype="Pointer" Bytesize="8" OffsetHex="00000490" Description="VertexColorViewModeMaterialName_AlphaAsColor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1176" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000498" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1184" Vartype="Pointer" Bytesize="8" OffsetHex="000004A0" Description="VertexColorViewModeMaterial_RedOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1192" Vartype="Pointer" Bytesize="8" OffsetHex="000004A8" Description="VertexColorViewModeMaterialName_RedOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1200" Vartype="4 Bytes" Bytesize="4" OffsetHex="000004B0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1208" Vartype="Pointer" Bytesize="8" OffsetHex="000004B8" Description="VertexColorViewModeMaterial_GreenOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1216" Vartype="Pointer" Bytesize="8" OffsetHex="000004C0" Description="VertexColorViewModeMaterialName_GreenOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1224" Vartype="4 Bytes" Bytesize="4" OffsetHex="000004C8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1232" Vartype="Pointer" Bytesize="8" OffsetHex="000004D0" Description="VertexColorViewModeMaterial_BlueOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1240" Vartype="Pointer" Bytesize="8" OffsetHex="000004D8" Description="VertexColorViewModeMaterialName_BlueOnly" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1248" Vartype="4 Bytes" Bytesize="4" OffsetHex="000004E0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1256" Vartype="8 Bytes" Bytesize="8" OffsetHex="000004E8" Description="DebugEditorMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1264" Vartype="Pointer" Bytesize="8" OffsetHex="000004F0" Description="DebugEditorMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1272" Vartype="4 Bytes" Bytesize="4" OffsetHex="000004F8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1280" Vartype="Pointer" Bytesize="8" OffsetHex="00000500" Description="ConstraintLimitMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1288" Vartype="Pointer" Bytesize="8" OffsetHex="00000508" Description="ConstraintLimitMaterialX" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1296" Vartype="Pointer" Bytesize="8" OffsetHex="00000510" Description="ConstraintLimitMaterialXAxis" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1304" Vartype="Pointer" Bytesize="8" OffsetHex="00000518" Description="ConstraintLimitMaterialY" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1312" Vartype="Pointer" Bytesize="8" OffsetHex="00000520" Description="ConstraintLimitMaterialYAxis" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1320" Vartype="Pointer" Bytesize="8" OffsetHex="00000528" Description="ConstraintLimitMaterialZ" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1328" Vartype="Pointer" Bytesize="8" OffsetHex="00000530" Description="ConstraintLimitMaterialZAxis" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1336" Vartype="Pointer" Bytesize="8" OffsetHex="00000538" Description="ConstraintLimitMaterialPrismatic" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1344" Vartype="Pointer" Bytesize="8" OffsetHex="00000540" Description="InvalidLightmapSettingsMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1352" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000548" Description="InvalidLightmapSettingsMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1360" Vartype="Pointer" Bytesize="8" OffsetHex="00000550" Description="InvalidLightmapSettingsMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1368" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000558" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1376" Vartype="Pointer" Bytesize="8" OffsetHex="00000560" Description="PreviewShadowsIndicatorMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1384" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000568" Description="PreviewShadowsIndicatorMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1392" Vartype="Pointer" Bytesize="8" OffsetHex="00000570" Description="PreviewShadowsIndicatorMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1400" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000578" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1408" Vartype="Pointer" Bytesize="8" OffsetHex="00000580" Description="ArrowMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1416" Vartype="Pointer" Bytesize="8" OffsetHex="00000588" Description="ArrowMaterialYellow" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1424" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000590" Description="ArrowMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1432" Vartype="Pointer" Bytesize="8" OffsetHex="00000598" Description="ArrowMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1440" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1448" Vartype="Float" Bytesize="4" OffsetHex="000005A8" Description="LightingOnlyBrightness.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1452" Vartype="Float" Bytesize="4" OffsetHex="000005AC" Description="LightingOnlyBrightness.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1456" Vartype="Float" Bytesize="4" OffsetHex="000005B0" Description="LightingOnlyBrightness.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1460" Vartype="Float" Bytesize="4" OffsetHex="000005B4" Description="LightingOnlyBrightness.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1464" Vartype="Pointer" Bytesize="8" OffsetHex="000005B8" Description="ShaderComplexityColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1472" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005C0" Description="ShaderComplexityColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1476" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005C4" Description="ShaderComplexityColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1480" Vartype="Pointer" Bytesize="8" OffsetHex="000005C8" Description="QuadComplexityColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1488" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005D0" Description="QuadComplexityColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1492" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005D4" Description="QuadComplexityColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1496" Vartype="Pointer" Bytesize="8" OffsetHex="000005D8" Description="LightComplexityColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1504" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005E0" Description="LightComplexityColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1508" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005E4" Description="LightComplexityColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1512" Vartype="Pointer" Bytesize="8" OffsetHex="000005E8" Description="StationaryLightOverlapColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1520" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005F0" Description="StationaryLightOverlapColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1524" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005F4" Description="StationaryLightOverlapColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1528" Vartype="Pointer" Bytesize="8" OffsetHex="000005F8" Description="LODColorationColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1536" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000600" Description="LODColorationColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1540" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000604" Description="LODColorationColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1544" Vartype="Pointer" Bytesize="8" OffsetHex="00000608" Description="HLODColorationColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1552" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000610" Description="HLODColorationColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1556" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000614" Description="HLODColorationColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1560" Vartype="Pointer" Bytesize="8" OffsetHex="00000618" Description="StreamingAccuracyColors" DisplayMethod="Unsigned Integer">
          <Structure Name="LinearColor[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[1] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[1] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[1] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[1] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[2] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[2] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[2] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[2] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[3] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[3] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[3] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[3] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[4] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Float" Bytesize="4" OffsetHex="00000044" Description="[4] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[4] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="Float" Bytesize="4" OffsetHex="0000004C" Description="[4] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[5] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[5] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[5] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[5] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[6] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[6] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="[6] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="[6] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="[7] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="[7] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[7] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[7] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[8] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[8] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[8] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[8] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[9] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[9] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[9] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[9] A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[10] R" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[10] G" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[10] B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[10] A" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1568" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000620" Description="StreamingAccuracyColors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1572" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000624" Description="StreamingAccuracyColors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1576" Vartype="Float" Bytesize="4" OffsetHex="00000628" Description="MaxPixelShaderAdditiveComplexityCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1580" Vartype="Float" Bytesize="4" OffsetHex="0000062C" Description="MaxES3PixelShaderAdditiveComplexityCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1584" Vartype="Float" Bytesize="4" OffsetHex="00000630" Description="MinLightMapDensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1588" Vartype="Float" Bytesize="4" OffsetHex="00000634" Description="IdealLightMapDensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1592" Vartype="Float" Bytesize="4" OffsetHex="00000638" Description="MaxLightMapDensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1596" Vartype="Byte" Bytesize="1" OffsetHex="0000063C" Description="bRenderLightMapDensityGrayscale" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1600" Vartype="Float" Bytesize="4" OffsetHex="00000640" Description="RenderLightMapDensityGrayscaleScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1604" Vartype="Float" Bytesize="4" OffsetHex="00000644" Description="RenderLightMapDensityColorScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1608" Vartype="Float" Bytesize="4" OffsetHex="00000648" Description="LightMapDensityVertexMappedColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1612" Vartype="Float" Bytesize="4" OffsetHex="0000064C" Description="LightMapDensityVertexMappedColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1616" Vartype="Float" Bytesize="4" OffsetHex="00000650" Description="LightMapDensityVertexMappedColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1620" Vartype="Float" Bytesize="4" OffsetHex="00000654" Description="LightMapDensityVertexMappedColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1624" Vartype="Float" Bytesize="4" OffsetHex="00000658" Description="LightMapDensitySelectedColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1628" Vartype="Float" Bytesize="4" OffsetHex="0000065C" Description="LightMapDensitySelectedColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1632" Vartype="Float" Bytesize="4" OffsetHex="00000660" Description="LightMapDensitySelectedColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1636" Vartype="Float" Bytesize="4" OffsetHex="00000664" Description="LightMapDensitySelectedColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1640" Vartype="Pointer" Bytesize="8" OffsetHex="00000668" Description="StatColorMappings" DisplayMethod="Unsigned Integer">
          <Structure Name="StatColorMapping[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[0] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" Description="[0] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000001C" Description="[0] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Byte" Bytesize="1" OffsetHex="00000020" Description="[0] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="36" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000024" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[1] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000030" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[1] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="[1] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="[1] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Byte" Bytesize="1" OffsetHex="00000048" Description="[1] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="76" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000004C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[2] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[2] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" Description="[2] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000006C" Description="[2] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Byte" Bytesize="1" OffsetHex="00000070" Description="[2] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="[3] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000080" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[3] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[3] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[3] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Byte" Bytesize="1" OffsetHex="00000098" Description="[3] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[4] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000A8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Pointer" Bytesize="8" OffsetHex="000000B0" Description="[4] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" Description="[4] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="188" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000BC" Description="[4] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Byte" Bytesize="1" OffsetHex="000000C0" Description="[4] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="196" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Pointer" Bytesize="8" OffsetHex="000000C8" Description="[5] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000D0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="[5] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="224" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E0" Description="[5] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="228" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E4" Description="[5] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="[5] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="236" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000EC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="Pointer" Bytesize="8" OffsetHex="000000F0" Description="[6] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000F8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[6] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="264" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000108" Description="[6] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="268" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000010C" Description="[6] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="Byte" Bytesize="1" OffsetHex="00000110" Description="[6] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="276" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000114" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="Pointer" Bytesize="8" OffsetHex="00000118" Description="[7] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000120" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" Description="[7] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="304" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000130" Description="[7] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="308" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000134" Description="[7] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="Byte" Bytesize="1" OffsetHex="00000138" Description="[7] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="316" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000013C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="[8] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000148" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="[8] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" Description="[8] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" Description="[8] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="352" Vartype="Byte" Bytesize="1" OffsetHex="00000160" Description="[8] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="356" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000164" DisplayMethod="Unsigned Integer"/>
              <Element Offset="360" Vartype="Pointer" Bytesize="8" OffsetHex="00000168" Description="[9] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000170" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" Description="[9] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="384" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000180" Description="[9] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="388" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000184" Description="[9] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="Byte" Bytesize="1" OffsetHex="00000188" Description="[9] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="396" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="400" Vartype="Pointer" Bytesize="8" OffsetHex="00000190" Description="[10] StatName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="408" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000198" DisplayMethod="Unsigned Integer"/>
              <Element Offset="416" Vartype="Pointer" Bytesize="8" OffsetHex="000001A0" Description="[10] ColorMap" DisplayMethod="Unsigned Integer">
                <Structure Name="StatColorMapEntry[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="4" Vartype="Byte" Bytesize="1" OffsetHex="00000004" Description="[0] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="5" Vartype="Byte" Bytesize="1" OffsetHex="00000005" Description="[0] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="6" Vartype="Byte" Bytesize="1" OffsetHex="00000006" Description="[0] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="7" Vartype="Byte" Bytesize="1" OffsetHex="00000007" Description="[0] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[1] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="12" Vartype="Byte" Bytesize="1" OffsetHex="0000000C" Description="[1] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="13" Vartype="Byte" Bytesize="1" OffsetHex="0000000D" Description="[1] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="14" Vartype="Byte" Bytesize="1" OffsetHex="0000000E" Description="[1] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="15" Vartype="Byte" Bytesize="1" OffsetHex="0000000F" Description="[1] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[2] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[2] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="21" Vartype="Byte" Bytesize="1" OffsetHex="00000015" Description="[2] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="22" Vartype="Byte" Bytesize="1" OffsetHex="00000016" Description="[2] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="23" Vartype="Byte" Bytesize="1" OffsetHex="00000017" Description="[2] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[3] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="28" Vartype="Byte" Bytesize="1" OffsetHex="0000001C" Description="[3] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="29" Vartype="Byte" Bytesize="1" OffsetHex="0000001D" Description="[3] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="30" Vartype="Byte" Bytesize="1" OffsetHex="0000001E" Description="[3] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="31" Vartype="Byte" Bytesize="1" OffsetHex="0000001F" Description="[3] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[4] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="36" Vartype="Byte" Bytesize="1" OffsetHex="00000024" Description="[4] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="37" Vartype="Byte" Bytesize="1" OffsetHex="00000025" Description="[4] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="38" Vartype="Byte" Bytesize="1" OffsetHex="00000026" Description="[4] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="39" Vartype="Byte" Bytesize="1" OffsetHex="00000027" Description="[4] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[5] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[5] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="45" Vartype="Byte" Bytesize="1" OffsetHex="0000002D" Description="[5] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="46" Vartype="Byte" Bytesize="1" OffsetHex="0000002E" Description="[5] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="47" Vartype="Byte" Bytesize="1" OffsetHex="0000002F" Description="[5] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[6] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="52" Vartype="Byte" Bytesize="1" OffsetHex="00000034" Description="[6] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="53" Vartype="Byte" Bytesize="1" OffsetHex="00000035" Description="[6] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="54" Vartype="Byte" Bytesize="1" OffsetHex="00000036" Description="[6] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="55" Vartype="Byte" Bytesize="1" OffsetHex="00000037" Description="[6] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[7] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="60" Vartype="Byte" Bytesize="1" OffsetHex="0000003C" Description="[7] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="61" Vartype="Byte" Bytesize="1" OffsetHex="0000003D" Description="[7] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="62" Vartype="Byte" Bytesize="1" OffsetHex="0000003E" Description="[7] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="63" Vartype="Byte" Bytesize="1" OffsetHex="0000003F" Description="[7] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Float" Bytesize="4" OffsetHex="00000040" Description="[8] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[8] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="69" Vartype="Byte" Bytesize="1" OffsetHex="00000045" Description="[8] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="70" Vartype="Byte" Bytesize="1" OffsetHex="00000046" Description="[8] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="71" Vartype="Byte" Bytesize="1" OffsetHex="00000047" Description="[8] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Float" Bytesize="4" OffsetHex="00000048" Description="[9] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="76" Vartype="Byte" Bytesize="1" OffsetHex="0000004C" Description="[9] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="77" Vartype="Byte" Bytesize="1" OffsetHex="0000004D" Description="[9] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="78" Vartype="Byte" Bytesize="1" OffsetHex="0000004E" Description="[9] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="79" Vartype="Byte" Bytesize="1" OffsetHex="0000004F" Description="[9] Out.A" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[10] In" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="84" Vartype="Byte" Bytesize="1" OffsetHex="00000054" Description="[10] Out.B" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="85" Vartype="Byte" Bytesize="1" OffsetHex="00000055" Description="[10] Out.G" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="86" Vartype="Byte" Bytesize="1" OffsetHex="00000056" Description="[10] Out.R" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="87" Vartype="Byte" Bytesize="1" OffsetHex="00000057" Description="[10] Out.A" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="424" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001A8" Description="[10] ColorMap_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="428" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001AC" Description="[10] ColorMap_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="432" Vartype="Byte" Bytesize="1" OffsetHex="000001B0" Description="[10] DisableBlend" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1648" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000670" Description="StatColorMappings_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1652" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000674" Description="StatColorMappings_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1656" Vartype="Pointer" Bytesize="8" OffsetHex="00000678" Description="DefaultPhysMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1664" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000680" Description="DefaultPhysMaterialName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1672" Vartype="Pointer" Bytesize="8" OffsetHex="00000688" Description="DefaultPhysMaterialName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1680" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000690" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1688" Vartype="Pointer" Bytesize="8" OffsetHex="00000698" Description="ActiveGameNameRedirects" DisplayMethod="Unsigned Integer">
          <Structure Name="GameNameRedirect[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[1] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[1] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[2] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[2] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[3] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[3] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[4] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[4] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[5] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000058" Description="[5] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000060" Description="[6] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000068" Description="[6] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000070" Description="[7] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[7] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000080" Description="[8] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[8] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000090" Description="[9] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000098" Description="[9] NewGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A0" Description="[10] OldGameName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[10] NewGameName" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1696" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006A0" Description="ActiveGameNameRedirects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1700" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006A4" Description="ActiveGameNameRedirects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1704" Vartype="Pointer" Bytesize="8" OffsetHex="000006A8" Description="ActiveClassRedirects" DisplayMethod="Unsigned Integer">
          <Structure Name="ClassRedirect[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[0] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[0] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[0] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[0] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[0] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Byte" Bytesize="1" OffsetHex="00000038" Description="[0] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="60" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000003C" Description="[1] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000044" Description="[1] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000004C" Description="[1] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000054" Description="[1] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000005C" Description="[1] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000064" Description="[1] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000006C" Description="[1] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Byte" Bytesize="1" OffsetHex="00000074" Description="[1] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[2] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000080" Description="[2] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[2] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000090" Description="[2] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000098" Description="[2] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A0" Description="[2] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[2] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Byte" Bytesize="1" OffsetHex="000000B0" Description="[2] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="180" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000B4" Description="[3] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="188" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000BC" Description="[3] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="196" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C4" Description="[3] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="204" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000CC" Description="[3] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000D4" Description="[3] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="220" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000DC" Description="[3] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="228" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E4" Description="[3] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="236" Vartype="Byte" Bytesize="1" OffsetHex="000000EC" Description="[3] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="240" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F0" Description="[4] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F8" Description="[4] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000100" Description="[4] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000108" Description="[4] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000110" Description="[4] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000118" Description="[4] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000120" Description="[4] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Byte" Bytesize="1" OffsetHex="00000128" Description="[4] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="300" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000012C" Description="[5] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="308" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000134" Description="[5] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="316" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000013C" Description="[5] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="324" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000144" Description="[5] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="332" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000014C" Description="[5] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="340" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000154" Description="[5] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="348" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000015C" Description="[5] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="356" Vartype="Byte" Bytesize="1" OffsetHex="00000164" Description="[5] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="360" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000168" Description="[6] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000170" Description="[6] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000178" Description="[6] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="384" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000180" Description="[6] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000188" Description="[6] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="400" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000190" Description="[6] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="408" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000198" Description="[6] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="416" Vartype="Byte" Bytesize="1" OffsetHex="000001A0" Description="[6] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="420" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001A4" Description="[7] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="428" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001AC" Description="[7] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="436" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001B4" Description="[7] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="444" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001BC" Description="[7] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="452" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001C4" Description="[7] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="460" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001CC" Description="[7] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="468" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001D4" Description="[7] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="476" Vartype="Byte" Bytesize="1" OffsetHex="000001DC" Description="[7] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="480" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001E0" Description="[8] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="488" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001E8" Description="[8] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="496" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001F0" Description="[8] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="504" Vartype="8 Bytes" Bytesize="8" OffsetHex="000001F8" Description="[8] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="512" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000200" Description="[8] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="520" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000208" Description="[8] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="528" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000210" Description="[8] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="536" Vartype="Byte" Bytesize="1" OffsetHex="00000218" Description="[8] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="540" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000021C" Description="[9] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="548" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000224" Description="[9] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="556" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000022C" Description="[9] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="564" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000234" Description="[9] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="572" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000023C" Description="[9] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="580" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000244" Description="[9] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="588" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000024C" Description="[9] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="596" Vartype="Byte" Bytesize="1" OffsetHex="00000254" Description="[9] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="600" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000258" Description="[10] ObjectName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="608" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000260" Description="[10] OldClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="616" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000268" Description="[10] NewClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="624" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000270" Description="[10] OldSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="632" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000278" Description="[10] NewSubobjName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="640" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000280" Description="[10] NewClassClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="648" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000288" Description="[10] NewClassPackage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="656" Vartype="Byte" Bytesize="1" OffsetHex="00000290" Description="[10] InstanceOnly" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1712" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006B0" Description="ActiveClassRedirects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1716" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006B4" Description="ActiveClassRedirects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1720" Vartype="Pointer" Bytesize="8" OffsetHex="000006B8" Description="ActivePluginRedirects" DisplayMethod="Unsigned Integer">
          <Structure Name="PluginRedirect[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[0] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[1] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[1] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[2] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[2] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[3] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[3] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[4] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[4] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[5] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000A8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Pointer" Bytesize="8" OffsetHex="000000B0" Description="[5] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="[6] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000C8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="Pointer" Bytesize="8" OffsetHex="000000D0" Description="[6] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="[7] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000E8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="Pointer" Bytesize="8" OffsetHex="000000F0" Description="[7] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[8] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000108" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="Pointer" Bytesize="8" OffsetHex="00000110" Description="[8] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="[9] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000128" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="[9] NewPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000138" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="[10] OldPluginName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000148" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="[10] NewPluginName" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1728" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006C0" Description="ActivePluginRedirects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1732" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006C4" Description="ActivePluginRedirects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1736" Vartype="Pointer" Bytesize="8" OffsetHex="000006C8" Description="ActiveStructRedirects" DisplayMethod="Unsigned Integer">
          <Structure Name="StructRedirect[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[1] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[1] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[2] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[2] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[3] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[3] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[4] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[4] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[5] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000058" Description="[5] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000060" Description="[6] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000068" Description="[6] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000070" Description="[7] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[7] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000080" Description="[8] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[8] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000090" Description="[9] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000098" Description="[9] NewStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A0" Description="[10] OldStructName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[10] NewStructName" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1744" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006D0" Description="ActiveStructRedirects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1748" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006D4" Description="ActiveStructRedirects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1752" Vartype="Pointer" Bytesize="8" OffsetHex="000006D8" Description="PreIntegratedSkinBRDFTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1760" Vartype="8 Bytes" Bytesize="8" OffsetHex="000006E0" Description="PreIntegratedSkinBRDFTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1768" Vartype="Pointer" Bytesize="8" OffsetHex="000006E8" Description="PreIntegratedSkinBRDFTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1776" Vartype="4 Bytes" Bytesize="4" OffsetHex="000006F0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1784" Vartype="Pointer" Bytesize="8" OffsetHex="000006F8" Description="BlueNoiseTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1792" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000700" Description="BlueNoiseTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1800" Vartype="Pointer" Bytesize="8" OffsetHex="00000708" Description="BlueNoiseTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1808" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000710" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1816" Vartype="Pointer" Bytesize="8" OffsetHex="00000718" Description="MiniFontTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1824" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000720" Description="MiniFontTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1832" Vartype="Pointer" Bytesize="8" OffsetHex="00000728" Description="MiniFontTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1840" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000730" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1848" Vartype="Pointer" Bytesize="8" OffsetHex="00000738" Description="WeightMapPlaceholderTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1856" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000740" Description="WeightMapPlaceholderTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1864" Vartype="Pointer" Bytesize="8" OffsetHex="00000748" Description="WeightMapPlaceholderTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1872" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000750" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1880" Vartype="Pointer" Bytesize="8" OffsetHex="00000758" Description="LightMapDensityTexture" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1888" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000760" Description="LightMapDensityTextureName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1896" Vartype="Pointer" Bytesize="8" OffsetHex="00000768" Description="LightMapDensityTextureName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1904" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000770" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1920" Vartype="Pointer" Bytesize="8" OffsetHex="00000780" Description="GameViewport" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1928" Vartype="Pointer" Bytesize="8" OffsetHex="00000788" Description="DeferredCommands" DisplayMethod="Unsigned Integer">
          <Structure Name="DeferredCommands[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] DeferredCommands" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] DeferredCommands" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1936" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000790" Description="DeferredCommands_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1940" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000794" Description="DeferredCommands_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1944" Vartype="Float" Bytesize="4" OffsetHex="00000798" Description="NearClipPlane" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1948" Vartype="Byte" Bytesize="1" OffsetHex="0000079C" Description="bSubtitlesForcedOff" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1948" Vartype="Byte" Bytesize="1" OffsetHex="0000079C" Description="bSubtitlesEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1952" Vartype="4 Bytes" Bytesize="4" OffsetHex="000007A0" Description="MaximumLoopIterationCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bCanBlueprintsTickByDefault" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bUseFixedFrameRate" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bSmoothFrameRate" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bEnableEditorPSysRealtimeLOD" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bAllowMultiThreadedAnimationUpdate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1956" Vartype="Byte" Bytesize="1" OffsetHex="000007A4" Description="bOptimizeAnimBlueprintMemberVariableAccess" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1960" Vartype="Float" Bytesize="4" OffsetHex="000007A8" Description="FixedFrameRate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1964" Vartype="Byte" Bytesize="1" OffsetHex="000007AC" Description="SmoothedFrameRateRange.LowerBound.Type" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1968" Vartype="Float" Bytesize="4" OffsetHex="000007B0" Description="SmoothedFrameRateRange.LowerBound.Value" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1972" Vartype="Byte" Bytesize="1" OffsetHex="000007B4" Description="SmoothedFrameRateRange.UpperBound.Type" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1976" Vartype="Float" Bytesize="4" OffsetHex="000007B8" Description="SmoothedFrameRateRange.UpperBound.Value" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1980" Vartype="4 Bytes" Bytesize="4" OffsetHex="000007BC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1984" Vartype="Pointer" Bytesize="8" OffsetHex="000007C0" Description="CustomTimeStep" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1992" Vartype="4 Bytes" Bytesize="4" RLECount="7" OffsetHex="000007C8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2024" Vartype="8 Bytes" Bytesize="8" OffsetHex="000007E8" Description="CustomTimeStepClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2032" Vartype="Pointer" Bytesize="8" OffsetHex="000007F0" Description="CustomTimeStepClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2040" Vartype="4 Bytes" Bytesize="4" OffsetHex="000007F8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2048" Vartype="Pointer" Bytesize="8" OffsetHex="00000800" Description="TimecodeProvider" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2056" Vartype="4 Bytes" Bytesize="4" RLECount="7" OffsetHex="00000808" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2088" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000828" Description="TimecodeProviderClassName.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2096" Vartype="Pointer" Bytesize="8" OffsetHex="00000830" Description="TimecodeProviderClassName.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000838" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2112" Vartype="Byte" Bytesize="1" OffsetHex="00000840" Description="bGenerateDefaultTimecode" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000844" Description="GenerateDefaultTimecodeFrameRate.Numerator" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000848" Description="GenerateDefaultTimecodeFrameRate.Denominator" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2124" Vartype="Float" Bytesize="4" OffsetHex="0000084C" Description="GenerateDefaultTimecodeFrameDelay" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2128" Vartype="Byte" Bytesize="1" OffsetHex="00000850" Description="bCheckForMultiplePawnsSpawnedInAFrame" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000854" Description="NumPawnsAllowedToBeSpawnedInAFrame" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2136" Vartype="Byte" Bytesize="1" OffsetHex="00000858" Description="bShouldGenerateLowQualityLightmaps" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2140" Vartype="Byte" Bytesize="1" OffsetHex="0000085C" Description="C_WorldBox.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2141" Vartype="Byte" Bytesize="1" OffsetHex="0000085D" Description="C_WorldBox.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2142" Vartype="Byte" Bytesize="1" OffsetHex="0000085E" Description="C_WorldBox.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2143" Vartype="Byte" Bytesize="1" OffsetHex="0000085F" Description="C_WorldBox.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2144" Vartype="Byte" Bytesize="1" OffsetHex="00000860" Description="C_BrushWire.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2145" Vartype="Byte" Bytesize="1" OffsetHex="00000861" Description="C_BrushWire.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2146" Vartype="Byte" Bytesize="1" OffsetHex="00000862" Description="C_BrushWire.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2147" Vartype="Byte" Bytesize="1" OffsetHex="00000863" Description="C_BrushWire.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2148" Vartype="Byte" Bytesize="1" OffsetHex="00000864" Description="C_AddWire.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2149" Vartype="Byte" Bytesize="1" OffsetHex="00000865" Description="C_AddWire.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2150" Vartype="Byte" Bytesize="1" OffsetHex="00000866" Description="C_AddWire.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2151" Vartype="Byte" Bytesize="1" OffsetHex="00000867" Description="C_AddWire.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2152" Vartype="Byte" Bytesize="1" OffsetHex="00000868" Description="C_SubtractWire.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2153" Vartype="Byte" Bytesize="1" OffsetHex="00000869" Description="C_SubtractWire.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2154" Vartype="Byte" Bytesize="1" OffsetHex="0000086A" Description="C_SubtractWire.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2155" Vartype="Byte" Bytesize="1" OffsetHex="0000086B" Description="C_SubtractWire.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2156" Vartype="Byte" Bytesize="1" OffsetHex="0000086C" Description="C_SemiSolidWire.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2157" Vartype="Byte" Bytesize="1" OffsetHex="0000086D" Description="C_SemiSolidWire.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2158" Vartype="Byte" Bytesize="1" OffsetHex="0000086E" Description="C_SemiSolidWire.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2159" Vartype="Byte" Bytesize="1" OffsetHex="0000086F" Description="C_SemiSolidWire.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2160" Vartype="Byte" Bytesize="1" OffsetHex="00000870" Description="C_NonSolidWire.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2161" Vartype="Byte" Bytesize="1" OffsetHex="00000871" Description="C_NonSolidWire.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2162" Vartype="Byte" Bytesize="1" OffsetHex="00000872" Description="C_NonSolidWire.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2163" Vartype="Byte" Bytesize="1" OffsetHex="00000873" Description="C_NonSolidWire.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2164" Vartype="Byte" Bytesize="1" OffsetHex="00000874" Description="C_WireBackground.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2165" Vartype="Byte" Bytesize="1" OffsetHex="00000875" Description="C_WireBackground.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2166" Vartype="Byte" Bytesize="1" OffsetHex="00000876" Description="C_WireBackground.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2167" Vartype="Byte" Bytesize="1" OffsetHex="00000877" Description="C_WireBackground.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2168" Vartype="Byte" Bytesize="1" OffsetHex="00000878" Description="C_ScaleBoxHi.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2169" Vartype="Byte" Bytesize="1" OffsetHex="00000879" Description="C_ScaleBoxHi.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2170" Vartype="Byte" Bytesize="1" OffsetHex="0000087A" Description="C_ScaleBoxHi.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2171" Vartype="Byte" Bytesize="1" OffsetHex="0000087B" Description="C_ScaleBoxHi.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2172" Vartype="Byte" Bytesize="1" OffsetHex="0000087C" Description="C_VolumeCollision.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2173" Vartype="Byte" Bytesize="1" OffsetHex="0000087D" Description="C_VolumeCollision.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2174" Vartype="Byte" Bytesize="1" OffsetHex="0000087E" Description="C_VolumeCollision.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2175" Vartype="Byte" Bytesize="1" OffsetHex="0000087F" Description="C_VolumeCollision.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2176" Vartype="Byte" Bytesize="1" OffsetHex="00000880" Description="C_BSPCollision.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2177" Vartype="Byte" Bytesize="1" OffsetHex="00000881" Description="C_BSPCollision.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2178" Vartype="Byte" Bytesize="1" OffsetHex="00000882" Description="C_BSPCollision.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2179" Vartype="Byte" Bytesize="1" OffsetHex="00000883" Description="C_BSPCollision.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2180" Vartype="Byte" Bytesize="1" OffsetHex="00000884" Description="C_OrthoBackground.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2181" Vartype="Byte" Bytesize="1" OffsetHex="00000885" Description="C_OrthoBackground.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2182" Vartype="Byte" Bytesize="1" OffsetHex="00000886" Description="C_OrthoBackground.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2183" Vartype="Byte" Bytesize="1" OffsetHex="00000887" Description="C_OrthoBackground.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2184" Vartype="Byte" Bytesize="1" OffsetHex="00000888" Description="C_Volume.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2185" Vartype="Byte" Bytesize="1" OffsetHex="00000889" Description="C_Volume.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2186" Vartype="Byte" Bytesize="1" OffsetHex="0000088A" Description="C_Volume.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2187" Vartype="Byte" Bytesize="1" OffsetHex="0000088B" Description="C_Volume.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2188" Vartype="Byte" Bytesize="1" OffsetHex="0000088C" Description="C_BrushShape.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2189" Vartype="Byte" Bytesize="1" OffsetHex="0000088D" Description="C_BrushShape.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2190" Vartype="Byte" Bytesize="1" OffsetHex="0000088E" Description="C_BrushShape.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2191" Vartype="Byte" Bytesize="1" OffsetHex="0000088F" Description="C_BrushShape.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2192" Vartype="Float" Bytesize="4" OffsetHex="00000890" Description="StreamingDistanceFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2196" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000894" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2200" Vartype="Pointer" Bytesize="8" OffsetHex="00000898" Description="GameScreenshotSaveDirectory.Path" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2208" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008A8" Description="TransitionType" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008AC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2224" Vartype="Pointer" Bytesize="8" OffsetHex="000008B0" Description="TransitionDescription" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2232" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008B8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2240" Vartype="Pointer" Bytesize="8" OffsetHex="000008C0" Description="TransitionGameMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2248" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008C8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2256" Vartype="Byte" Bytesize="1" OffsetHex="000008D0" Description="bAllowMatureLanguage" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2260" Vartype="Float" Bytesize="4" OffsetHex="000008D4" Description="CameraRotationThreshold" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2264" Vartype="Float" Bytesize="4" OffsetHex="000008D8" Description="CameraTranslationThreshold" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2268" Vartype="Float" Bytesize="4" OffsetHex="000008DC" Description="PrimitiveProbablyVisibleTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2272" Vartype="Float" Bytesize="4" OffsetHex="000008E0" Description="MaxOcclusionPixelsFraction" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2276" Vartype="Byte" Bytesize="1" OffsetHex="000008E4" Description="bPauseOnLossOfFocus" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2280" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008E8" Description="MaxParticleResize" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2284" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008EC" Description="MaxParticleResizeWarn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2288" Vartype="Pointer" Bytesize="8" OffsetHex="000008F0" Description="PendingDroppedNotes" DisplayMethod="Unsigned Integer">
          <Structure Name="DropNoteInfo[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[0] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[0] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[0] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[0] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[0] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[0] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000020" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[1] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[1] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[1] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="[1] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Float" Bytesize="4" OffsetHex="00000038" Description="[1] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="[1] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[1] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Float" Bytesize="4" OffsetHex="00000050" Description="[2] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="Float" Bytesize="4" OffsetHex="00000054" Description="[2] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Float" Bytesize="4" OffsetHex="00000058" Description="[2] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Float" Bytesize="4" OffsetHex="0000005C" Description="[2] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="[2] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="[2] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="[2] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="[3] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[3] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[3] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[3] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[3] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[3] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[3] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[4] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="Float" Bytesize="4" OffsetHex="000000A4" Description="[4] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="[4] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="[4] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Float" Bytesize="4" OffsetHex="000000B0" Description="[4] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="Float" Bytesize="4" OffsetHex="000000B4" Description="[4] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="Pointer" Bytesize="8" OffsetHex="000000B8" Description="[4] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Float" Bytesize="4" OffsetHex="000000C8" Description="[5] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="204" Vartype="Float" Bytesize="4" OffsetHex="000000CC" Description="[5] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="Float" Bytesize="4" OffsetHex="000000D0" Description="[5] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="Float" Bytesize="4" OffsetHex="000000D4" Description="[5] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="Float" Bytesize="4" OffsetHex="000000D8" Description="[5] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="220" Vartype="Float" Bytesize="4" OffsetHex="000000DC" Description="[5] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="[5] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="Float" Bytesize="4" OffsetHex="000000F0" Description="[6] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="244" Vartype="Float" Bytesize="4" OffsetHex="000000F4" Description="[6] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="Float" Bytesize="4" OffsetHex="000000F8" Description="[6] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="252" Vartype="Float" Bytesize="4" OffsetHex="000000FC" Description="[6] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Float" Bytesize="4" OffsetHex="00000100" Description="[6] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="260" Vartype="Float" Bytesize="4" OffsetHex="00000104" Description="[6] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="Pointer" Bytesize="8" OffsetHex="00000108" Description="[6] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000110" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="Float" Bytesize="4" OffsetHex="00000118" Description="[7] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="284" Vartype="Float" Bytesize="4" OffsetHex="0000011C" Description="[7] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Float" Bytesize="4" OffsetHex="00000120" Description="[7] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="292" Vartype="Float" Bytesize="4" OffsetHex="00000124" Description="[7] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Float" Bytesize="4" OffsetHex="00000128" Description="[7] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="300" Vartype="Float" Bytesize="4" OffsetHex="0000012C" Description="[7] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="[7] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000138" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Float" Bytesize="4" OffsetHex="00000140" Description="[8] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="324" Vartype="Float" Bytesize="4" OffsetHex="00000144" Description="[8] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="Float" Bytesize="4" OffsetHex="00000148" Description="[8] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="332" Vartype="Float" Bytesize="4" OffsetHex="0000014C" Description="[8] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="Float" Bytesize="4" OffsetHex="00000150" Description="[8] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="340" Vartype="Float" Bytesize="4" OffsetHex="00000154" Description="[8] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="344" Vartype="Pointer" Bytesize="8" OffsetHex="00000158" Description="[8] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="352" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000160" DisplayMethod="Unsigned Integer"/>
              <Element Offset="360" Vartype="Float" Bytesize="4" OffsetHex="00000168" Description="[9] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="364" Vartype="Float" Bytesize="4" OffsetHex="0000016C" Description="[9] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="Float" Bytesize="4" OffsetHex="00000170" Description="[9] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="372" Vartype="Float" Bytesize="4" OffsetHex="00000174" Description="[9] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="Float" Bytesize="4" OffsetHex="00000178" Description="[9] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="380" Vartype="Float" Bytesize="4" OffsetHex="0000017C" Description="[9] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="384" Vartype="Pointer" Bytesize="8" OffsetHex="00000180" Description="[9] Comment" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000188" DisplayMethod="Unsigned Integer"/>
              <Element Offset="400" Vartype="Float" Bytesize="4" OffsetHex="00000190" Description="[10] Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="404" Vartype="Float" Bytesize="4" OffsetHex="00000194" Description="[10] Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="408" Vartype="Float" Bytesize="4" OffsetHex="00000198" Description="[10] Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="412" Vartype="Float" Bytesize="4" OffsetHex="0000019C" Description="[10] Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="416" Vartype="Float" Bytesize="4" OffsetHex="000001A0" Description="[10] Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="420" Vartype="Float" Bytesize="4" OffsetHex="000001A4" Description="[10] Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="424" Vartype="Pointer" Bytesize="8" OffsetHex="000001A8" Description="[10] Comment" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="2296" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008F8" Description="PendingDroppedNotes_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2300" Vartype="4 Bytes" Bytesize="4" OffsetHex="000008FC" Description="PendingDroppedNotes_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2304" Vartype="Float" Bytesize="4" OffsetHex="00000900" Description="NetClientTicksPerSecond" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2308" Vartype="Float" Bytesize="4" OffsetHex="00000904" Description="DisplayGamma" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2312" Vartype="Float" Bytesize="4" OffsetHex="00000908" Description="MinDesiredFrameRate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2316" Vartype="Float" Bytesize="4" OffsetHex="0000090C" Description="DefaultSelectedMaterialColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2320" Vartype="Float" Bytesize="4" OffsetHex="00000910" Description="DefaultSelectedMaterialColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2324" Vartype="Float" Bytesize="4" OffsetHex="00000914" Description="DefaultSelectedMaterialColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2328" Vartype="Float" Bytesize="4" OffsetHex="00000918" Description="DefaultSelectedMaterialColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2332" Vartype="Float" Bytesize="4" OffsetHex="0000091C" Description="SelectedMaterialColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2336" Vartype="Float" Bytesize="4" OffsetHex="00000920" Description="SelectedMaterialColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2340" Vartype="Float" Bytesize="4" OffsetHex="00000924" Description="SelectedMaterialColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2344" Vartype="Float" Bytesize="4" OffsetHex="00000928" Description="SelectedMaterialColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2348" Vartype="Float" Bytesize="4" OffsetHex="0000092C" Description="SelectionOutlineColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2352" Vartype="Float" Bytesize="4" OffsetHex="00000930" Description="SelectionOutlineColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2356" Vartype="Float" Bytesize="4" OffsetHex="00000934" Description="SelectionOutlineColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2360" Vartype="Float" Bytesize="4" OffsetHex="00000938" Description="SelectionOutlineColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2364" Vartype="Float" Bytesize="4" OffsetHex="0000093C" Description="SubduedSelectionOutlineColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2368" Vartype="Float" Bytesize="4" OffsetHex="00000940" Description="SubduedSelectionOutlineColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2372" Vartype="Float" Bytesize="4" OffsetHex="00000944" Description="SubduedSelectionOutlineColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2376" Vartype="Float" Bytesize="4" OffsetHex="00000948" Description="SubduedSelectionOutlineColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2380" Vartype="Float" Bytesize="4" OffsetHex="0000094C" Description="SelectedMaterialColorOverride.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2384" Vartype="Float" Bytesize="4" OffsetHex="00000950" Description="SelectedMaterialColorOverride.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2388" Vartype="Float" Bytesize="4" OffsetHex="00000954" Description="SelectedMaterialColorOverride.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2392" Vartype="Float" Bytesize="4" OffsetHex="00000958" Description="SelectedMaterialColorOverride.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2396" Vartype="Byte" Bytesize="1" OffsetHex="0000095C" Description="bIsOverridingSelectedColor" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2400" Vartype="Byte" Bytesize="1" OffsetHex="00000960" Description="bEnableOnScreenDebugMessages" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2400" Vartype="Byte" Bytesize="1" OffsetHex="00000960" Description="bSuppressMapWarnings" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="2400" Vartype="Byte" Bytesize="1" OffsetHex="00000960" Description="bEnableOnScreenDebugMessagesDisplay" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="2400" Vartype="Byte" Bytesize="1" OffsetHex="00000960" Description="bDisableAILogging" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="2404" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000964" Description="bEnableVisualLogRecordingOnStart" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2408" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000968" Description="ScreenSaverInhibitorSemaphore" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2412" Vartype="Byte" Bytesize="1" OffsetHex="0000096C" Description="bLockReadOnlyLevels" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2416" Vartype="Pointer" Bytesize="8" OffsetHex="00000970" Description="ParticleEventManagerClassPath" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2424" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000978" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2432" Vartype="Float" Bytesize="4" OffsetHex="00000980" Description="SelectionHighlightIntensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2436" Vartype="Float" Bytesize="4" OffsetHex="00000984" Description="BSPSelectionHighlightIntensity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2440" Vartype="Float" Bytesize="4" OffsetHex="00000988" Description="SelectionHighlightIntensityBillboards" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2444" Vartype="4 Bytes" Bytesize="4" RLECount="155" OffsetHex="0000098C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3064" Vartype="Pointer" Bytesize="8" OffsetHex="00000BF8" Description="NetDriverDefinitions" DisplayMethod="Unsigned Integer">
          <Structure Name="NetDriverDefinition[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[0] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[1] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[1] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[1] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[2] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[2] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[2] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[3] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[3] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000058" Description="[3] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000060" Description="[4] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000068" Description="[4] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000070" Description="[4] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[5] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000080" Description="[5] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[5] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000090" Description="[6] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000098" Description="[6] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A0" Description="[6] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[7] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000B0" Description="[7] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000B8" Description="[7] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C0" Description="[8] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C8" Description="[8] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000D0" Description="[8] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000D8" Description="[9] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E0" Description="[9] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E8" Description="[9] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F0" Description="[10] DefName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F8" Description="[10] DriverClassName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000100" Description="[10] DriverClassNameFallback" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="3072" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C00" Description="NetDriverDefinitions_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3076" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C04" Description="NetDriverDefinitions_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3080" Vartype="Pointer" Bytesize="8" OffsetHex="00000C08" Description="ServerActors" DisplayMethod="Unsigned Integer">
          <Structure Name="ServerActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] ServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] ServerActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="3088" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C10" Description="ServerActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3092" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C14" Description="ServerActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3096" Vartype="Pointer" Bytesize="8" OffsetHex="00000C18" Description="RuntimeServerActors" DisplayMethod="Unsigned Integer">
          <Structure Name="RuntimeServerActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] RuntimeServerActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="3104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C20" Description="RuntimeServerActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3108" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C24" Description="RuntimeServerActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3112" Vartype="Float" Bytesize="4" OffsetHex="00000C28" Description="NetErrorLogInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3116" Vartype="Byte" Bytesize="1" OffsetHex="00000C2C" Description="bStartedLoadMapMovie" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="3120" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000C30" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000C48" Description="NextWorldContextHandle" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3148" Vartype="4 Bytes" Bytesize="4" RLECount="101" OffsetHex="00000C4C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3552" Vartype="Float" Bytesize="4" OffsetHex="00000DE0" Description="MaxDeltaTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3556" Vartype="Float" Bytesize="4" OffsetHex="00000DE4" Description="ServerFlushLogInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3560" Vartype="Pointer" Bytesize="8" OffsetHex="00000DE8" Description="GameInstance" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="GameViewportClient" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="16" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="ViewportConsole" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="DebugProperties" DisplayMethod="Unsigned Integer">
          <Structure Name="DebugDisplayProperty[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[0] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000010" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[1] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[1] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000030" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[2] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[2] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000050" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[3] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="[3] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000070" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[4] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[4] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000090" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[5] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" OffsetHex="000000A8" Description="[5] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000B0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="[6] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Pointer" Bytesize="8" OffsetHex="000000C8" Description="[6] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000D0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="[7] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="Pointer" Bytesize="8" OffsetHex="000000E8" Description="[7] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000F0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[8] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="Pointer" Bytesize="8" OffsetHex="00000108" Description="[8] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000110" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="[9] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" Description="[9] WithinClass" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000130" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="[10] Obj" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="Pointer" Bytesize="8" OffsetHex="00000148" Description="[10] WithinClass" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="DebugProperties_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="DebugProperties_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="4 Bytes" Bytesize="4" RLECount="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" Description="MaxSplitscreenPlayers" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="0000006C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="World" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="GameInstance" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="GameInstance" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="LocalPlayers" DisplayMethod="Unsigned Integer">
          <Structure Name="LocalPlayers[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] LocalPlayers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] LocalPlayers" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="LocalPlayers_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="LocalPlayers_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="OnlineSession" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="ReferencedObjects" DisplayMethod="Unsigned Integer">
          <Structure Name="ReferencedObjects[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ReferencedObjects" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" Description="ReferencedObjects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="92" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005C" Description="ReferencedObjects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000060" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" Description="OnPawnControllerChangedDelegates" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="LocalPlayer" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="12" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="PlayerController" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" Description="CurrentNetSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="60" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000003C" Description="ConfiguredInternetSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="ConfiguredLanSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="68" Vartype="4 Bytes" Bytesize="4" RLECount="11" OffsetHex="00000044" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="ViewportClient" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
        <Element Offset="148" Vartype="Byte" Bytesize="1" OffsetHex="00000094" Description="AspectRatioAxisConstraint" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="PendingLevelPlayerControllerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Byte" Bytesize="1" OffsetHex="000000A0" Description="bSentSplitJoin" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="164" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="000000A4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" Description="ControllerId" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="PlayerController" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="12" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Byte" Bytesize="1" OffsetHex="00000030" Description="PrimaryActorTick.TickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="49" Vartype="Byte" Bytesize="1" OffsetHex="00000031" Description="PrimaryActorTick.EndTickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bStartWithTickEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bAllowTickOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bCanEverTick" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bTickEvenWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="PrimaryActorTick.TickInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" RLECount="8" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bNetTemporary" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bAlwaysRelevant" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bOnlyRelevantToOwner" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bNetStartup" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bTearOff" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bHidden" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bReplicateMovement" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bExchangedRoles" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bCanBeDamaged" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bAutoDestroyWhenFinished" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bAllowTickBeforeBeginPlay" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bReplayRewindable" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bNetUseOwnerRelevancy" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bRelevantForNetworkReplays" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bRelevantForLevelBounds" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bNetLoadOnClient" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bIsEditorOnlyActor" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bFindCameraComponentWhenViewTarget" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bEnableAutoLODGeneration" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bActorSeamlessTraveled" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bGenerateOverlapEventsDuringLevelStreaming" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bIgnoresOriginShifting" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bCollideWhenPlacing" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bBlockInput" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bReplicates" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bAllowReceiveTickEventOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bCanBeInCluster" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="92" Vartype="Byte" Bytesize="1" OffsetHex="0000005C" Description="bActorEnableCollision" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="92" Vartype="Byte" Bytesize="1" OffsetHex="0000005C" Description="bActorIsBeingDestroyed" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="93" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005D" Description="UpdateOverlapsMethodDuringLevelStreaming" DisplayMethod="Unsigned Integer"/>
        <Element Offset="94" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005E" Description="DefaultUpdateOverlapsMethodDuringLevelStreaming" DisplayMethod="Unsigned Integer"/>
        <Element Offset="95" Vartype="Byte" Bytesize="1" OffsetHex="0000005F" Description="RemoteRole" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="ReplicatedMovement.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="ReplicatedMovement.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="ReplicatedMovement.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="ReplicatedMovement.AngularVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="ReplicatedMovement.AngularVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="ReplicatedMovement.AngularVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="ReplicatedMovement.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="ReplicatedMovement.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="ReplicatedMovement.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="ReplicatedMovement.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="ReplicatedMovement.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="ReplicatedMovement.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Byte" Bytesize="1" OffsetHex="00000090" Description="ReplicatedMovement.bRepPhysics" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="144" Vartype="Byte" Bytesize="1" OffsetHex="00000090" Description="ReplicatedMovement.bSimulatedPhysicSleep" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="145" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000091" Description="ReplicatedMovement.LocationQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="146" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000092" Description="ReplicatedMovement.VelocityQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="147" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000093" Description="ReplicatedMovement.RotationQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="InitialLifeSpan" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="CustomTimeDilation" DisplayMethod="Unsigned Integer"/>
        <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="AttachmentReplication.AttachParent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="AttachmentReplication.LocationOffset.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="AttachmentReplication.LocationOffset.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Float" Bytesize="4" OffsetHex="000000B0" Description="AttachmentReplication.LocationOffset.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="180" Vartype="Float" Bytesize="4" OffsetHex="000000B4" Description="AttachmentReplication.RelativeScale3D.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Float" Bytesize="4" OffsetHex="000000B8" Description="AttachmentReplication.RelativeScale3D.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="188" Vartype="Float" Bytesize="4" OffsetHex="000000BC" Description="AttachmentReplication.RelativeScale3D.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Float" Bytesize="4" OffsetHex="000000C0" Description="AttachmentReplication.RotationOffset.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="196" Vartype="Float" Bytesize="4" OffsetHex="000000C4" Description="AttachmentReplication.RotationOffset.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="Float" Bytesize="4" OffsetHex="000000C8" Description="AttachmentReplication.RotationOffset.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="204" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000CC" Description="AttachmentReplication.AttachSocket" DisplayMethod="Unsigned Integer"/>
        <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="AttachmentReplication.AttachComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="Owner" DisplayMethod="Unsigned Integer"/>
        <Element Offset="232" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E8" Description="NetDriverName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="Role" DisplayMethod="Unsigned Integer"/>
        <Element Offset="241" Vartype="Byte" Bytesize="1" OffsetHex="000000F1" Description="NetDormancy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="242" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F2" Description="SpawnCollisionHandlingMethod" DisplayMethod="Unsigned Integer"/>
        <Element Offset="243" Vartype="Byte" Bytesize="1" OffsetHex="000000F3" Description="AutoReceiveInput" DisplayMethod="Unsigned Integer"/>
        <Element Offset="244" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F4" Description="InputPriority" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="Pointer" Bytesize="8" OffsetHex="000000F8" Description="InputComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="Float" Bytesize="4" OffsetHex="00000100" Description="NetCullDistanceSquared" DisplayMethod="Unsigned Integer"/>
        <Element Offset="260" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000104" Description="NetTag" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="Float" Bytesize="4" OffsetHex="00000108" Description="NetUpdateFrequency" DisplayMethod="Unsigned Integer"/>
        <Element Offset="268" Vartype="Float" Bytesize="4" OffsetHex="0000010C" Description="MinNetUpdateFrequency" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Float" Bytesize="4" OffsetHex="00000110" Description="NetPriority" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000114" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="Pointer" Bytesize="8" OffsetHex="00000118" Description="Instigator" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="Children" DisplayMethod="Unsigned Integer">
          <Structure Name="Children[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] Children" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="296" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000128" Description="Children_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="300" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000012C" Description="Children_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="RootComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Pointer" Bytesize="8" OffsetHex="00000138" Description="ControllingMatineeActors" DisplayMethod="Unsigned Integer">
          <Structure Name="ControllingMatineeActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="320" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000140" Description="ControllingMatineeActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="324" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000144" Description="ControllingMatineeActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000148" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="Layers" DisplayMethod="Unsigned Integer">
          <Structure Name="Layers[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] Layers" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" Description="Layers_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" Description="Layers_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="352" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000160" Description="ParentComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="356" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000164" DisplayMethod="Unsigned Integer"/>
        <Element Offset="368" Vartype="Pointer" Bytesize="8" OffsetHex="00000170" Description="Tags" DisplayMethod="Unsigned Integer">
          <Structure Name="Tags[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] Tags" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="376" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000178" Description="Tags_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="380" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000017C" Description="Tags_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="384" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000180" Description="OnTakeAnyDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="385" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000181" Description="OnTakePointDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="386" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000182" Description="OnTakeRadialDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="387" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000183" Description="OnActorBeginOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="388" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000184" Description="OnActorEndOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="389" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000185" Description="OnBeginCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="390" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000186" Description="OnEndCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="391" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000187" Description="OnClicked" DisplayMethod="Unsigned Integer"/>
        <Element Offset="392" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000188" Description="OnReleased" DisplayMethod="Unsigned Integer"/>
        <Element Offset="393" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000189" Description="OnInputTouchBegin" DisplayMethod="Unsigned Integer"/>
        <Element Offset="394" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018A" Description="OnInputTouchEnd" DisplayMethod="Unsigned Integer"/>
        <Element Offset="395" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018B" Description="OnInputTouchEnter" DisplayMethod="Unsigned Integer"/>
        <Element Offset="396" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018C" Description="OnInputTouchLeave" DisplayMethod="Unsigned Integer"/>
        <Element Offset="397" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018D" Description="OnActorHit" DisplayMethod="Unsigned Integer"/>
        <Element Offset="398" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018E" Description="OnDestroyed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="399" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018F" Description="OnEndPlay" DisplayMethod="Unsigned Integer"/>
        <Element Offset="404" Vartype="4 Bytes" Bytesize="4" RLECount="23" OffsetHex="00000194" DisplayMethod="Unsigned Integer"/>
        <Element Offset="496" Vartype="Pointer" Bytesize="8" OffsetHex="000001F0" Description="InstanceComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="InstanceComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InstanceComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="504" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001F8" Description="InstanceComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="508" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001FC" Description="InstanceComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Pointer" Bytesize="8" OffsetHex="00000200" Description="BlueprintCreatedComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="BlueprintCreatedComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="520" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000208" Description="BlueprintCreatedComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="524" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000020C" Description="BlueprintCreatedComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000210" DisplayMethod="Unsigned Integer"/>
        <Element Offset="552" Vartype="Pointer" Bytesize="8" OffsetHex="00000228" Description="PlayerState" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000230" DisplayMethod="Unsigned Integer"/>
        <Element Offset="568" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000238" Description="OnInstigatedAnyDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="572" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="0000023C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000248" Description="StateName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Pointer" Bytesize="8" OffsetHex="00000250" Description="Pawn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000258" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="Pointer" Bytesize="8" OffsetHex="00000260" Description="Character" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="Pointer" Bytesize="8" OffsetHex="00000268" Description="TransformComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="00000270" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Float" Bytesize="4" OffsetHex="00000288" Description="ControlRotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="652" Vartype="Float" Bytesize="4" OffsetHex="0000028C" Description="ControlRotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="656" Vartype="Float" Bytesize="4" OffsetHex="00000290" Description="ControlRotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="660" Vartype="Byte" Bytesize="1" OffsetHex="00000294" Description="bAttachToPawn" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="664" Vartype="Pointer" Bytesize="8" OffsetHex="00000298" Description="Player" DisplayMethod="Unsigned Integer"/>
        <Element Offset="672" Vartype="Pointer" Bytesize="8" OffsetHex="000002A0" Description="AcknowledgedPawn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="Pointer" Bytesize="8" OffsetHex="000002A8" Description="ControllingDirTrackInst" DisplayMethod="Unsigned Integer"/>
        <Element Offset="688" Vartype="Pointer" Bytesize="8" OffsetHex="000002B0" Description="MyHUD" DisplayMethod="Unsigned Integer"/>
        <Element Offset="696" Vartype="Pointer" Bytesize="8" OffsetHex="000002B8" Description="PlayerCameraManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="704" Vartype="Pointer" Bytesize="8" OffsetHex="000002C0" Description="PlayerCameraManagerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="bAutoManageActiveCameraTarget" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="716" Vartype="Float" Bytesize="4" OffsetHex="000002CC" Description="TargetViewRotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="720" Vartype="Float" Bytesize="4" OffsetHex="000002D0" Description="TargetViewRotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="724" Vartype="Float" Bytesize="4" OffsetHex="000002D4" Description="TargetViewRotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000002D8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="740" Vartype="Float" Bytesize="4" OffsetHex="000002E4" Description="SmoothTargetViewRotationSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000002E8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="Pointer" Bytesize="8" OffsetHex="000002F0" Description="HiddenActors" DisplayMethod="Unsigned Integer">
          <Structure Name="HiddenActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] HiddenActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] HiddenActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="760" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002F8" Description="HiddenActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="764" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002FC" Description="HiddenActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="768" Vartype="Pointer" Bytesize="8" OffsetHex="00000300" Description="HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="HiddenPrimitiveComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000000" Description="[0] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" Description="[1] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000000C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000010" Description="[2] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000014" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" Description="[3] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000001C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000020" Description="[4] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000024" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" Description="[5] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000002C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[6] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" Description="[7] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000003C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="[8] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" Description="[9] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="76" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000004C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[10] HiddenPrimitiveComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="776" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000308" Description="HiddenPrimitiveComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="780" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000030C" Description="HiddenPrimitiveComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000310" DisplayMethod="Unsigned Integer"/>
        <Element Offset="788" Vartype="Float" Bytesize="4" OffsetHex="00000314" Description="LastSpectatorStateSynchTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Float" Bytesize="4" OffsetHex="00000318" Description="LastSpectatorSyncLocation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="796" Vartype="Float" Bytesize="4" OffsetHex="0000031C" Description="LastSpectatorSyncLocation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="Float" Bytesize="4" OffsetHex="00000320" Description="LastSpectatorSyncLocation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="804" Vartype="Float" Bytesize="4" OffsetHex="00000324" Description="LastSpectatorSyncRotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Float" Bytesize="4" OffsetHex="00000328" Description="LastSpectatorSyncRotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="812" Vartype="Float" Bytesize="4" OffsetHex="0000032C" Description="LastSpectatorSyncRotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000330" Description="ClientCap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="820" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000334" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Pointer" Bytesize="8" OffsetHex="00000338" Description="CheatManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Pointer" Bytesize="8" OffsetHex="00000340" Description="CheatClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="Pointer" Bytesize="8" OffsetHex="00000348" Description="PlayerInput" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="Pointer" Bytesize="8" OffsetHex="00000350" Description="ActiveForceFeedbackEffects" DisplayMethod="Unsigned Integer">
          <Structure Name="ActiveForceFeedbackEffect[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[1] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000020" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[2] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[3] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000050" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[4] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="[5] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000080" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[6] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" OffsetHex="000000A8" Description="[7] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000B0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="[8] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000C8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="[9] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000E0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="Pointer" Bytesize="8" OffsetHex="000000F0" Description="[10] ForceFeedbackEffect" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="856" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000358" Description="ActiveForceFeedbackEffects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="860" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000035C" Description="ActiveForceFeedbackEffects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="864" Vartype="4 Bytes" Bytesize="4" RLECount="28" OffsetHex="00000360" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="Byte" Bytesize="1" OffsetHex="000003D0" Description="bPlayerIsWaiting" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="980" Vartype="Byte" Bytesize="1" OffsetHex="000003D4" Description="NetPlayerIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="984" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="000003D8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1040" Vartype="Pointer" Bytesize="8" OffsetHex="00000410" Description="PendingSwapConnection" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1048" Vartype="Pointer" Bytesize="8" OffsetHex="00000418" Description="NetConnection" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1056" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000420" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1068" Vartype="Float" Bytesize="4" OffsetHex="0000042C" Description="InputYawScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1072" Vartype="Float" Bytesize="4" OffsetHex="00000430" Description="InputPitchScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1076" Vartype="Float" Bytesize="4" OffsetHex="00000434" Description="InputRollScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bShowMouseCursor" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bEnableTouchOverEvents" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bEnableClickEvents" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bEnableMouseOverEvents" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bEnableTouchEvents" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="bForceFeedbackEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="1084" Vartype="Float" Bytesize="4" OffsetHex="0000043C" Description="ForceFeedbackScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1088" Vartype="Pointer" Bytesize="8" OffsetHex="00000440" Description="ClickEventKeys" DisplayMethod="Unsigned Integer">
          <Structure Name="Key[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[1] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000020" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[2] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[3] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000050" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000060" Description="[4] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[5] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000080" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000090" Description="[6] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[7] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000B0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C0" Description="[8] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000C8" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000D8" Description="[9] KeyName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000000E0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000F0" Description="[10] KeyName" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1096" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000448" Description="ClickEventKeys_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1100" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000044C" Description="ClickEventKeys_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1104" Vartype="Byte" Bytesize="1" OffsetHex="00000450" Description="DefaultMouseCursor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1105" Vartype="Byte" Bytesize="1" OffsetHex="00000451" Description="CurrentMouseCursor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1106" Vartype="Byte" Bytesize="1" OffsetHex="00000452" Description="DefaultClickTraceChannel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1107" Vartype="Byte" Bytesize="1" OffsetHex="00000453" Description="CurrentClickTraceChannel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1108" Vartype="Float" Bytesize="4" OffsetHex="00000454" Description="HitResultTraceDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000458" Description="SeamlessTravelCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1114" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000045A" Description="LastCompletedSeamlessTravelCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1120" Vartype="4 Bytes" Bytesize="4" RLECount="28" OffsetHex="00000460" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1232" Vartype="Pointer" Bytesize="8" OffsetHex="000004D0" Description="InactiveStateInputComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1240" Vartype="Byte" Bytesize="1" OffsetHex="000004D8" Description="bShouldPerformFullTickWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1244" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="000004DC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1264" Vartype="Pointer" Bytesize="8" OffsetHex="000004F0" Description="CurrentTouchInterface" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1272" Vartype="4 Bytes" Bytesize="4" RLECount="19" OffsetHex="000004F8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1352" Vartype="Pointer" Bytesize="8" OffsetHex="00000548" Description="SpectatorPawn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1364" Vartype="Byte" Bytesize="1" OffsetHex="00000554" Description="bIsLocalPlayerController" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1368" Vartype="Float" Bytesize="4" OffsetHex="00000558" Description="SpawnLocation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1372" Vartype="Float" Bytesize="4" OffsetHex="0000055C" Description="SpawnLocation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1376" Vartype="Float" Bytesize="4" OffsetHex="00000560" Description="SpawnLocation.Z" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="MovementComponent" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Byte" Bytesize="1" OffsetHex="00000038" Description="PrimaryComponentTick.TickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="57" Vartype="Byte" Bytesize="1" OffsetHex="00000039" Description="PrimaryComponentTick.EndTickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bCanEverTick" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bAllowTickOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bStartWithTickEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bTickEvenWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="PrimaryComponentTick.TickInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" RLECount="8" OffsetHex="00000040" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="ComponentTags" DisplayMethod="Unsigned Integer">
          <Structure Name="ComponentTags[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] ComponentTags" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" Description="ComponentTags_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000006C" Description="ComponentTags_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="AssetUserData" DisplayMethod="Unsigned Integer">
          <Structure Name="AssetUserData[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] AssetUserData" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" Description="AssetUserData_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="124" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000007C" Description="AssetUserData_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="UCSSerializationIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Byte" Bytesize="1" OffsetHex="00000088" Description="bNetAddressable" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="136" Vartype="Byte" Bytesize="1" OffsetHex="00000088" Description="bReplicates" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="137" Vartype="Byte" Bytesize="1" OffsetHex="00000089" Description="bAutoActivate" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bCanEverAffectNavigation" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bEditableWhenInherited" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bIsEditorOnly" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="140" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008C" Description="CreationMethod" DisplayMethod="Unsigned Integer"/>
        <Element Offset="141" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008D" Description="OnComponentActivated" DisplayMethod="Unsigned Integer"/>
        <Element Offset="142" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008E" Description="OnComponentDeactivated" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="UCSModifiedProperties" DisplayMethod="Unsigned Integer">
          <Structure Name="SimpleMemberReference[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000010" Description="[0] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000014" Description="[0] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" Description="[0] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000001C" Description="[0] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[1] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[1] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[1] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="[1] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" Description="[1] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000003C" Description="[1] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[2] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[2] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[2] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="[2] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" Description="[2] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005C" Description="[2] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[3] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000068" Description="[3] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="[3] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="[3] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" Description="[3] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000007C" Description="[3] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[4] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[4] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[4] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[4] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" Description="[4] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" Description="[4] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[5] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[5] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B0" Description="[5] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B4" Description="[5] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" Description="[5] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="188" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000BC" Description="[5] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="[6] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C8" Description="[6] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D0" Description="[6] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D4" Description="[6] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D8" Description="[6] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000DC" Description="[6] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="[7] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E8" Description="[7] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F0" Description="[7] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="244" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F4" Description="[7] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F8" Description="[7] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="252" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000FC" Description="[7] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[8] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000108" Description="[8] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000110" Description="[8] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="276" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000114" Description="[8] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" Description="[8] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="284" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000011C" Description="[8] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="[9] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000128" Description="[9] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000130" Description="[9] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="308" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000134" Description="[9] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000138" Description="[9] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="316" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000013C" Description="[9] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="[10] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000148" Description="[10] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000150" Description="[10] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="340" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000154" Description="[10] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" Description="[10] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" Description="[10] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" Description="UCSModifiedProperties_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" Description="UCSModifiedProperties_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="4 Bytes" Bytesize="4" RLECount="4" OffsetHex="000000A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Pointer" Bytesize="8" OffsetHex="000000B0" Description="UpdatedComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Pointer" Bytesize="8" OffsetHex="000000B8" Description="UpdatedPrimitive" DisplayMethod="Unsigned Integer"/>
        <Element Offset="196" Vartype="Float" Bytesize="4" OffsetHex="000000C4" Description="Velocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="Float" Bytesize="4" OffsetHex="000000C8" Description="Velocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="204" Vartype="Float" Bytesize="4" OffsetHex="000000CC" Description="Velocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Float" Bytesize="4" OffsetHex="000000D0" Description="PlaneConstraintNormal.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="212" Vartype="Float" Bytesize="4" OffsetHex="000000D4" Description="PlaneConstraintNormal.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="216" Vartype="Float" Bytesize="4" OffsetHex="000000D8" Description="PlaneConstraintNormal.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="220" Vartype="Float" Bytesize="4" OffsetHex="000000DC" Description="PlaneConstraintOrigin.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Float" Bytesize="4" OffsetHex="000000E0" Description="PlaneConstraintOrigin.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="228" Vartype="Float" Bytesize="4" OffsetHex="000000E4" Description="PlaneConstraintOrigin.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bComponentShouldUpdatePhysicsVolume" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bConstrainToPlane" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bAutoUpdateTickRegistration" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bUpdateOnlyIfRendered" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bAutoRegisterUpdatedComponent" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bTickBeforeOwner" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bAutoRegisterPhysicsVolumeUpdates" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="bSnapToPlaneAtStart" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="235" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000EB" Description="PlaneConstraintAxisSetting" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="NavAgentProps.bCanFly" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="NavAgentProps.bCanCrouch" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="NavAgentProps.bCanJump" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="NavAgentProps.bCanWalk" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="NavAgentProps.bCanSwim" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="244" Vartype="Float" Bytesize="4" OffsetHex="000000F4" Description="NavAgentProps.AgentRadius" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="Float" Bytesize="4" OffsetHex="000000F8" Description="NavAgentProps.AgentHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="252" Vartype="Float" Bytesize="4" OffsetHex="000000FC" Description="NavAgentProps.AgentStepHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="Float" Bytesize="4" OffsetHex="00000100" Description="NavAgentProps.NavWalkingSearchHeightScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="260" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000104" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000108" Description="NavAgentProps.PreferredNavData.AssetPathName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Pointer" Bytesize="8" OffsetHex="00000110" Description="NavAgentProps.PreferredNavData.SubPathString" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Float" Bytesize="4" OffsetHex="00000120" Description="FixedPathBrakingDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="292" Vartype="Byte" Bytesize="1" OffsetHex="00000124" Description="bUseAccelerationForPaths" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="292" Vartype="Byte" Bytesize="1" OffsetHex="00000124" Description="bUseFixedBrakingDistanceForPaths" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="292" Vartype="Byte" Bytesize="1" OffsetHex="00000124" Description="bUpdateNavAgentWithOwnersCollision" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="293" Vartype="Byte" Bytesize="1" OffsetHex="00000125" Description="MovementState.bCanSwim" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="293" Vartype="Byte" Bytesize="1" OffsetHex="00000125" Description="MovementState.bCanCrouch" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="293" Vartype="Byte" Bytesize="1" OffsetHex="00000125" Description="MovementState.bCanFly" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="293" Vartype="Byte" Bytesize="1" OffsetHex="00000125" Description="MovementState.bCanJump" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="293" Vartype="Byte" Bytesize="1" OffsetHex="00000125" Description="MovementState.bCanWalk" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" Description="PathFollowingComp" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="PawnOwner" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000138" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="Pointer" Bytesize="8" OffsetHex="00000148" Description="CharacterOwner" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Float" Bytesize="4" OffsetHex="00000150" Description="GravityScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="340" Vartype="Float" Bytesize="4" OffsetHex="00000154" Description="MaxStepHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="344" Vartype="Float" Bytesize="4" OffsetHex="00000158" Description="JumpZVelocity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="348" Vartype="Float" Bytesize="4" OffsetHex="0000015C" Description="JumpOffJumpZFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="352" Vartype="Float" Bytesize="4" OffsetHex="00000160" Description="WalkableFloorAngle" DisplayMethod="Unsigned Integer"/>
        <Element Offset="356" Vartype="Float" Bytesize="4" OffsetHex="00000164" Description="WalkableFloorZ" DisplayMethod="Unsigned Integer"/>
        <Element Offset="360" Vartype="Byte" Bytesize="1" OffsetHex="00000168" Description="MovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="361" Vartype="Byte" Bytesize="1" OffsetHex="00000169" Description="CustomMovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="362" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000016A" Description="NetworkSmoothingMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="364" Vartype="Float" Bytesize="4" OffsetHex="0000016C" Description="GroundFriction" DisplayMethod="Unsigned Integer"/>
        <Element Offset="368" Vartype="4 Bytes" Bytesize="4" RLECount="7" OffsetHex="00000170" DisplayMethod="Unsigned Integer"/>
        <Element Offset="396" Vartype="Float" Bytesize="4" OffsetHex="0000018C" Description="MaxWalkSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="400" Vartype="Float" Bytesize="4" OffsetHex="00000190" Description="MaxWalkSpeedCrouched" DisplayMethod="Unsigned Integer"/>
        <Element Offset="404" Vartype="Float" Bytesize="4" OffsetHex="00000194" Description="MaxSwimSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="408" Vartype="Float" Bytesize="4" OffsetHex="00000198" Description="MaxFlySpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="412" Vartype="Float" Bytesize="4" OffsetHex="0000019C" Description="MaxCustomMovementSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="416" Vartype="Float" Bytesize="4" OffsetHex="000001A0" Description="MaxAcceleration" DisplayMethod="Unsigned Integer"/>
        <Element Offset="420" Vartype="Float" Bytesize="4" OffsetHex="000001A4" Description="MinAnalogWalkSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="424" Vartype="Float" Bytesize="4" OffsetHex="000001A8" Description="BrakingFrictionFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="428" Vartype="Float" Bytesize="4" OffsetHex="000001AC" Description="BrakingFriction" DisplayMethod="Unsigned Integer"/>
        <Element Offset="432" Vartype="Float" Bytesize="4" OffsetHex="000001B0" Description="BrakingSubStepTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="436" Vartype="Float" Bytesize="4" OffsetHex="000001B4" Description="BrakingDecelerationWalking" DisplayMethod="Unsigned Integer"/>
        <Element Offset="440" Vartype="Float" Bytesize="4" OffsetHex="000001B8" Description="BrakingDecelerationFalling" DisplayMethod="Unsigned Integer"/>
        <Element Offset="444" Vartype="Float" Bytesize="4" OffsetHex="000001BC" Description="BrakingDecelerationSwimming" DisplayMethod="Unsigned Integer"/>
        <Element Offset="448" Vartype="Float" Bytesize="4" OffsetHex="000001C0" Description="BrakingDecelerationFlying" DisplayMethod="Unsigned Integer"/>
        <Element Offset="452" Vartype="Float" Bytesize="4" OffsetHex="000001C4" Description="AirControl" DisplayMethod="Unsigned Integer"/>
        <Element Offset="456" Vartype="Float" Bytesize="4" OffsetHex="000001C8" Description="AirControlBoostMultiplier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="460" Vartype="Float" Bytesize="4" OffsetHex="000001CC" Description="AirControlBoostVelocityThreshold" DisplayMethod="Unsigned Integer"/>
        <Element Offset="464" Vartype="Float" Bytesize="4" OffsetHex="000001D0" Description="FallingLateralFriction" DisplayMethod="Unsigned Integer"/>
        <Element Offset="468" Vartype="Float" Bytesize="4" OffsetHex="000001D4" Description="CrouchedHalfHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="472" Vartype="Float" Bytesize="4" OffsetHex="000001D8" Description="Buoyancy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="476" Vartype="Float" Bytesize="4" OffsetHex="000001DC" Description="PerchRadiusThreshold" DisplayMethod="Unsigned Integer"/>
        <Element Offset="480" Vartype="Float" Bytesize="4" OffsetHex="000001E0" Description="PerchAdditionalHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="484" Vartype="Float" Bytesize="4" OffsetHex="000001E4" Description="RotationRate.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="488" Vartype="Float" Bytesize="4" OffsetHex="000001E8" Description="RotationRate.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="492" Vartype="Float" Bytesize="4" OffsetHex="000001EC" Description="RotationRate.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bUseSeparateBrakingFriction" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bApplyGravityWhileJumping" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bUseControllerDesiredRotation" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bMovementInProgress" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bSweepWhileNavWalking" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bOrientRotationToMovement" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="496" Vartype="Byte" Bytesize="1" OffsetHex="000001F0" Description="bEnableScopedMovementUpdates" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bEnableServerDualMoveScopedMovementUpdates" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bForceMaxAccel" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bRunPhysicsWithNoController" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bCanWalkOffLedges" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bShrinkProxyCapsule" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bForceNextFloorCheck" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="497" Vartype="Byte" Bytesize="1" OffsetHex="000001F1" Description="bCanWalkOffLedgesWhenCrouching" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bNetworkAlwaysReplicateTransformUpdateTimestamp" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bTouchForceScaledToMass" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bEnablePhysicsInteraction" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bDeferUpdateMoveComponent" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bPushForceScaledToMass" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bPushForceUsingZOffset" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="498" Vartype="Byte" Bytesize="1" OffsetHex="000001F2" Description="bNetworkSkipProxyPredictionOnNetUpdate" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="499" Vartype="Byte" Bytesize="1" OffsetHex="000001F3" Description="bScalePushForceToVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="504" Vartype="Pointer" Bytesize="8" OffsetHex="000001F8" Description="DeferredUpdatedMoveComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Float" Bytesize="4" OffsetHex="00000200" Description="MaxOutOfWaterStepHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="516" Vartype="Float" Bytesize="4" OffsetHex="00000204" Description="OutofWaterZ" DisplayMethod="Unsigned Integer"/>
        <Element Offset="520" Vartype="Float" Bytesize="4" OffsetHex="00000208" Description="Mass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="524" Vartype="Float" Bytesize="4" OffsetHex="0000020C" Description="StandingDownwardForceScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="Float" Bytesize="4" OffsetHex="00000210" Description="InitialPushForceFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="532" Vartype="Float" Bytesize="4" OffsetHex="00000214" Description="PushForceFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="536" Vartype="Float" Bytesize="4" OffsetHex="00000218" Description="PushForcePointZOffsetFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="540" Vartype="Float" Bytesize="4" OffsetHex="0000021C" Description="TouchForceFactor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="544" Vartype="Float" Bytesize="4" OffsetHex="00000220" Description="MinTouchForce" DisplayMethod="Unsigned Integer"/>
        <Element Offset="548" Vartype="Float" Bytesize="4" OffsetHex="00000224" Description="MaxTouchForce" DisplayMethod="Unsigned Integer"/>
        <Element Offset="552" Vartype="Float" Bytesize="4" OffsetHex="00000228" Description="RepulsionForce" DisplayMethod="Unsigned Integer"/>
        <Element Offset="556" Vartype="Float" Bytesize="4" OffsetHex="0000022C" Description="Acceleration.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Float" Bytesize="4" OffsetHex="00000230" Description="Acceleration.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="564" Vartype="Float" Bytesize="4" OffsetHex="00000234" Description="Acceleration.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="568" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000238" DisplayMethod="Unsigned Integer"/>
        <Element Offset="576" Vartype="Float" Bytesize="4" OffsetHex="00000240" Description="LastUpdateRotation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="580" Vartype="Float" Bytesize="4" OffsetHex="00000244" Description="LastUpdateRotation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="Float" Bytesize="4" OffsetHex="00000248" Description="LastUpdateRotation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="588" Vartype="Float" Bytesize="4" OffsetHex="0000024C" Description="LastUpdateRotation.W" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Float" Bytesize="4" OffsetHex="00000250" Description="LastUpdateLocation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="596" Vartype="Float" Bytesize="4" OffsetHex="00000254" Description="LastUpdateLocation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Float" Bytesize="4" OffsetHex="00000258" Description="LastUpdateLocation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="604" Vartype="Float" Bytesize="4" OffsetHex="0000025C" Description="LastUpdateVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="Float" Bytesize="4" OffsetHex="00000260" Description="LastUpdateVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="612" Vartype="Float" Bytesize="4" OffsetHex="00000264" Description="LastUpdateVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="Float" Bytesize="4" OffsetHex="00000268" Description="ServerLastTransformUpdateTimeStamp" DisplayMethod="Unsigned Integer"/>
        <Element Offset="620" Vartype="Float" Bytesize="4" OffsetHex="0000026C" Description="ServerLastClientGoodMoveAckTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="Float" Bytesize="4" OffsetHex="00000270" Description="ServerLastClientAdjustmentTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="628" Vartype="Float" Bytesize="4" OffsetHex="00000274" Description="PendingImpulseToApply.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="Float" Bytesize="4" OffsetHex="00000278" Description="PendingImpulseToApply.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="636" Vartype="Float" Bytesize="4" OffsetHex="0000027C" Description="PendingImpulseToApply.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="640" Vartype="Float" Bytesize="4" OffsetHex="00000280" Description="PendingForceToApply.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="644" Vartype="Float" Bytesize="4" OffsetHex="00000284" Description="PendingForceToApply.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Float" Bytesize="4" OffsetHex="00000288" Description="PendingForceToApply.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="652" Vartype="Float" Bytesize="4" OffsetHex="0000028C" Description="AnalogInputModifier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="656" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000290" DisplayMethod="Unsigned Integer"/>
        <Element Offset="668" Vartype="Float" Bytesize="4" OffsetHex="0000029C" Description="MaxSimulationTimeStep" DisplayMethod="Unsigned Integer"/>
        <Element Offset="672" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002A0" Description="MaxSimulationIterations" DisplayMethod="Unsigned Integer"/>
        <Element Offset="676" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002A4" Description="MaxJumpApexAttemptsPerSimulation" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="Float" Bytesize="4" OffsetHex="000002A8" Description="MaxDepenetrationWithGeometry" DisplayMethod="Unsigned Integer"/>
        <Element Offset="684" Vartype="Float" Bytesize="4" OffsetHex="000002AC" Description="MaxDepenetrationWithGeometryAsProxy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="688" Vartype="Float" Bytesize="4" OffsetHex="000002B0" Description="MaxDepenetrationWithPawn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="692" Vartype="Float" Bytesize="4" OffsetHex="000002B4" Description="MaxDepenetrationWithPawnAsProxy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="696" Vartype="Float" Bytesize="4" OffsetHex="000002B8" Description="NetworkSimulatedSmoothLocationTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="700" Vartype="Float" Bytesize="4" OffsetHex="000002BC" Description="NetworkSimulatedSmoothRotationTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="704" Vartype="Float" Bytesize="4" OffsetHex="000002C0" Description="ListenServerNetworkSimulatedSmoothLocationTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="708" Vartype="Float" Bytesize="4" OffsetHex="000002C4" Description="ListenServerNetworkSimulatedSmoothRotationTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="712" Vartype="Float" Bytesize="4" OffsetHex="000002C8" Description="NetProxyShrinkRadius" DisplayMethod="Unsigned Integer"/>
        <Element Offset="716" Vartype="Float" Bytesize="4" OffsetHex="000002CC" Description="NetProxyShrinkHalfHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="720" Vartype="Float" Bytesize="4" OffsetHex="000002D0" Description="NetworkMaxSmoothUpdateDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="724" Vartype="Float" Bytesize="4" OffsetHex="000002D4" Description="NetworkNoSmoothUpdateDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="Float" Bytesize="4" OffsetHex="000002D8" Description="NetworkMinTimeBetweenClientAckGoodMoves" DisplayMethod="Unsigned Integer"/>
        <Element Offset="732" Vartype="Float" Bytesize="4" OffsetHex="000002DC" Description="NetworkMinTimeBetweenClientAdjustments" DisplayMethod="Unsigned Integer"/>
        <Element Offset="736" Vartype="Float" Bytesize="4" OffsetHex="000002E0" Description="NetworkMinTimeBetweenClientAdjustmentsLargeCorrection" DisplayMethod="Unsigned Integer"/>
        <Element Offset="740" Vartype="Float" Bytesize="4" OffsetHex="000002E4" Description="NetworkLargeClientCorrectionDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="Float" Bytesize="4" OffsetHex="000002E8" Description="LedgeCheckThreshold" DisplayMethod="Unsigned Integer"/>
        <Element Offset="748" Vartype="Float" Bytesize="4" OffsetHex="000002EC" Description="JumpOutOfWaterPitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="Byte" Bytesize="1" OffsetHex="000002F0" Description="CurrentFloor.bLineTrace" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="752" Vartype="Byte" Bytesize="1" OffsetHex="000002F0" Description="CurrentFloor.bBlockingHit" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="752" Vartype="Byte" Bytesize="1" OffsetHex="000002F0" Description="CurrentFloor.bWalkableFloor" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="756" Vartype="Float" Bytesize="4" OffsetHex="000002F4" Description="CurrentFloor.FloorDist" DisplayMethod="Unsigned Integer"/>
        <Element Offset="760" Vartype="Float" Bytesize="4" OffsetHex="000002F8" Description="CurrentFloor.LineDist" DisplayMethod="Unsigned Integer"/>
        <Element Offset="764" Vartype="Byte" Bytesize="1" OffsetHex="000002FC" Description="CurrentFloor.HitResult.bStartPenetrating" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="764" Vartype="Byte" Bytesize="1" OffsetHex="000002FC" Description="CurrentFloor.HitResult.bBlockingHit" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="768" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000300" Description="CurrentFloor.HitResult.FaceIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="772" Vartype="Float" Bytesize="4" OffsetHex="00000304" Description="CurrentFloor.HitResult.Time" DisplayMethod="Unsigned Integer"/>
        <Element Offset="776" Vartype="Float" Bytesize="4" OffsetHex="00000308" Description="CurrentFloor.HitResult.Distance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="780" Vartype="Float" Bytesize="4" OffsetHex="0000030C" Description="CurrentFloor.HitResult.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="Float" Bytesize="4" OffsetHex="00000310" Description="CurrentFloor.HitResult.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="788" Vartype="Float" Bytesize="4" OffsetHex="00000314" Description="CurrentFloor.HitResult.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Float" Bytesize="4" OffsetHex="00000318" Description="CurrentFloor.HitResult.ImpactPoint.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="796" Vartype="Float" Bytesize="4" OffsetHex="0000031C" Description="CurrentFloor.HitResult.ImpactPoint.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="Float" Bytesize="4" OffsetHex="00000320" Description="CurrentFloor.HitResult.ImpactPoint.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="804" Vartype="Float" Bytesize="4" OffsetHex="00000324" Description="CurrentFloor.HitResult.Normal.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Float" Bytesize="4" OffsetHex="00000328" Description="CurrentFloor.HitResult.Normal.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="812" Vartype="Float" Bytesize="4" OffsetHex="0000032C" Description="CurrentFloor.HitResult.Normal.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="Float" Bytesize="4" OffsetHex="00000330" Description="CurrentFloor.HitResult.ImpactNormal.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="820" Vartype="Float" Bytesize="4" OffsetHex="00000334" Description="CurrentFloor.HitResult.ImpactNormal.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Float" Bytesize="4" OffsetHex="00000338" Description="CurrentFloor.HitResult.ImpactNormal.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="828" Vartype="Float" Bytesize="4" OffsetHex="0000033C" Description="CurrentFloor.HitResult.TraceStart.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Float" Bytesize="4" OffsetHex="00000340" Description="CurrentFloor.HitResult.TraceStart.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="836" Vartype="Float" Bytesize="4" OffsetHex="00000344" Description="CurrentFloor.HitResult.TraceStart.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="Float" Bytesize="4" OffsetHex="00000348" Description="CurrentFloor.HitResult.TraceEnd.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="844" Vartype="Float" Bytesize="4" OffsetHex="0000034C" Description="CurrentFloor.HitResult.TraceEnd.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="Float" Bytesize="4" OffsetHex="00000350" Description="CurrentFloor.HitResult.TraceEnd.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="852" Vartype="Float" Bytesize="4" OffsetHex="00000354" Description="CurrentFloor.HitResult.PenetrationDepth" DisplayMethod="Unsigned Integer"/>
        <Element Offset="856" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000358" Description="CurrentFloor.HitResult.Item" DisplayMethod="Unsigned Integer"/>
        <Element Offset="860" Vartype="Byte" Bytesize="1" OffsetHex="0000035C" Description="CurrentFloor.HitResult.ElementIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="864" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000360" Description="CurrentFloor.HitResult.PhysMaterial" DisplayMethod="Unsigned Integer"/>
        <Element Offset="868" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000364" DisplayMethod="Unsigned Integer"/>
        <Element Offset="872" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000368" Description="CurrentFloor.HitResult.Actor" DisplayMethod="Unsigned Integer"/>
        <Element Offset="876" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000036C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="880" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000370" Description="CurrentFloor.HitResult.Component" DisplayMethod="Unsigned Integer"/>
        <Element Offset="884" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000374" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000378" Description="CurrentFloor.HitResult.BoneName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="896" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000380" Description="CurrentFloor.HitResult.MyBoneName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="Byte" Bytesize="1" OffsetHex="00000388" Description="DefaultLandMovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="905" Vartype="Byte" Bytesize="1" OffsetHex="00000389" Description="DefaultWaterMovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="906" Vartype="Byte" Bytesize="1" OffsetHex="0000038A" Description="GroundMovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bImpartBaseVelocityZ" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bMaintainHorizontalGroundVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bNetworkMovementModeChanged" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bImpartBaseVelocityY" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bJustTeleported" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bImpartBaseAngularVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bImpartBaseVelocityX" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="907" Vartype="Byte" Bytesize="1" OffsetHex="0000038B" Description="bNetworkUpdateReceived" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bIgnoreClientMovementErrorChecksAndCorrection" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bCheatFlying" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bNotifyApex" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bServerAcceptClientAuthoritativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bWantsToCrouch" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bCrouchMaintainsBaseLocation" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bIgnoreBaseRotation" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="908" Vartype="Byte" Bytesize="1" OffsetHex="0000038C" Description="bFastAttachedMove" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bPerformingJumpOff" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bUseFlatBaseForFloorChecks" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bWasSimulatingRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bUseRVOAvoidance" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bWantsToLeaveNavWalking" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bAlwaysCheckFloor" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="909" Vartype="Byte" Bytesize="1" OffsetHex="0000038D" Description="bRequestedMoveUseAcceleration" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bHasRequestedVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bProjectNavMeshOnBothWorldChannels" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bProjectNavMeshWalking" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bAllowPhysicsRotationDuringAnimRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bWasAvoidanceUpdated" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="910" Vartype="Byte" Bytesize="1" OffsetHex="0000038E" Description="bRequestedMoveWithMaxSpeed" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="916" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000394" DisplayMethod="Unsigned Integer"/>
        <Element Offset="928" Vartype="Float" Bytesize="4" OffsetHex="000003A0" Description="AvoidanceConsiderationRadius" DisplayMethod="Unsigned Integer"/>
        <Element Offset="932" Vartype="Float" Bytesize="4" OffsetHex="000003A4" Description="RequestedVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="936" Vartype="Float" Bytesize="4" OffsetHex="000003A8" Description="RequestedVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="940" Vartype="Float" Bytesize="4" OffsetHex="000003AC" Description="RequestedVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="944" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003B0" Description="AvoidanceUID" DisplayMethod="Unsigned Integer"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup6" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup7" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup4" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup1" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup0" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup3" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup2" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="948" Vartype="Byte" Bytesize="1" OffsetHex="000003B4" Description="AvoidanceGroup.bGroup5" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup13" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup12" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup15" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup14" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup9" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup8" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup11" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="949" Vartype="Byte" Bytesize="1" OffsetHex="000003B5" Description="AvoidanceGroup.bGroup10" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup21" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup20" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup23" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup22" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup17" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup16" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup19" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="950" Vartype="Byte" Bytesize="1" OffsetHex="000003B6" Description="AvoidanceGroup.bGroup18" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup30" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup25" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup24" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup27" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup26" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup28" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup29" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="951" Vartype="Byte" Bytesize="1" OffsetHex="000003B7" Description="AvoidanceGroup.bGroup31" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup5" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup4" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup7" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup6" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup1" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup0" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup3" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="952" Vartype="Byte" Bytesize="1" OffsetHex="000003B8" Description="GroupsToAvoid.bGroup2" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup10" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup13" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup14" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup15" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup11" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup8" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup9" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="953" Vartype="Byte" Bytesize="1" OffsetHex="000003B9" Description="GroupsToAvoid.bGroup12" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup20" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup21" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup22" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup17" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup16" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup19" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup18" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="954" Vartype="Byte" Bytesize="1" OffsetHex="000003BA" Description="GroupsToAvoid.bGroup23" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup29" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup30" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup31" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup28" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup25" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup24" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup27" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="955" Vartype="Byte" Bytesize="1" OffsetHex="000003BB" Description="GroupsToAvoid.bGroup26" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup5" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup6" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup7" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup4" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup1" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup0" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup3" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="956" Vartype="Byte" Bytesize="1" OffsetHex="000003BC" Description="GroupsToIgnore.bGroup2" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup13" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup14" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup15" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup12" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup9" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup8" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup11" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="957" Vartype="Byte" Bytesize="1" OffsetHex="000003BD" Description="GroupsToIgnore.bGroup10" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup21" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup22" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup23" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup20" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup17" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup16" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup19" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="958" Vartype="Byte" Bytesize="1" OffsetHex="000003BE" Description="GroupsToIgnore.bGroup18" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup31" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup30" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup29" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup24" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup27" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup25" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup26" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="959" Vartype="Byte" Bytesize="1" OffsetHex="000003BF" Description="GroupsToIgnore.bGroup28" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="960" Vartype="Float" Bytesize="4" OffsetHex="000003C0" Description="AvoidanceWeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="964" Vartype="Float" Bytesize="4" OffsetHex="000003C4" Description="PendingLaunchVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="Float" Bytesize="4" OffsetHex="000003C8" Description="PendingLaunchVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="972" Vartype="Float" Bytesize="4" OffsetHex="000003CC" Description="PendingLaunchVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="4 Bytes" Bytesize="4" RLECount="41" OffsetHex="000003D0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1140" Vartype="Float" Bytesize="4" OffsetHex="00000474" Description="NavMeshProjectionInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1144" Vartype="Float" Bytesize="4" OffsetHex="00000478" Description="NavMeshProjectionTimer" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1148" Vartype="Float" Bytesize="4" OffsetHex="0000047C" Description="NavMeshProjectionInterpSpeed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1152" Vartype="Float" Bytesize="4" OffsetHex="00000480" Description="NavMeshProjectionHeightScaleUp" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1156" Vartype="Float" Bytesize="4" OffsetHex="00000484" Description="NavMeshProjectionHeightScaleDown" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1160" Vartype="Float" Bytesize="4" OffsetHex="00000488" Description="NavWalkingFloorDistTolerance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1164" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="0000048C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1176" Vartype="Byte" Bytesize="1" OffsetHex="00000498" Description="PostPhysicsTickFunction.TickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1177" Vartype="Byte" Bytesize="1" OffsetHex="00000499" Description="PostPhysicsTickFunction.EndTickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1178" Vartype="Byte" Bytesize="1" OffsetHex="0000049A" Description="PostPhysicsTickFunction.bAllowTickOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="1178" Vartype="Byte" Bytesize="1" OffsetHex="0000049A" Description="PostPhysicsTickFunction.bStartWithTickEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1178" Vartype="Byte" Bytesize="1" OffsetHex="0000049A" Description="PostPhysicsTickFunction.bCanEverTick" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1178" Vartype="Byte" Bytesize="1" OffsetHex="0000049A" Description="PostPhysicsTickFunction.bTickEvenWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1180" Vartype="Float" Bytesize="4" OffsetHex="0000049C" Description="PostPhysicsTickFunction.TickInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1184" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="000004A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1240" Vartype="Float" Bytesize="4" OffsetHex="000004D8" Description="MinTimeBetweenTimeStampResets" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1244" Vartype="4 Bytes" Bytesize="4" RLECount="309" OffsetHex="000004DC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2480" Vartype="Byte" Bytesize="1" OffsetHex="000009B0" Description="CurrentRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="2480" Vartype="Byte" Bytesize="1" OffsetHex="000009B0" Description="CurrentRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="2480" Vartype="Byte" Bytesize="1" OffsetHex="000009B0" Description="CurrentRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="2480" Vartype="Byte" Bytesize="1" OffsetHex="000009B0" Description="CurrentRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2481" Vartype="Byte" Bytesize="1" OffsetHex="000009B1" Description="CurrentRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2484" Vartype="Float" Bytesize="4" OffsetHex="000009B4" Description="CurrentRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2488" Vartype="Float" Bytesize="4" OffsetHex="000009B8" Description="CurrentRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2492" Vartype="Float" Bytesize="4" OffsetHex="000009BC" Description="CurrentRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2496" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="000009C0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2536" Vartype="Byte" Bytesize="1" OffsetHex="000009E8" Description="ServerCorrectionRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="2536" Vartype="Byte" Bytesize="1" OffsetHex="000009E8" Description="ServerCorrectionRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="2536" Vartype="Byte" Bytesize="1" OffsetHex="000009E8" Description="ServerCorrectionRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="2536" Vartype="Byte" Bytesize="1" OffsetHex="000009E8" Description="ServerCorrectionRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2537" Vartype="Byte" Bytesize="1" OffsetHex="000009E9" Description="ServerCorrectionRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2540" Vartype="Float" Bytesize="4" OffsetHex="000009EC" Description="ServerCorrectionRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2544" Vartype="Float" Bytesize="4" OffsetHex="000009F0" Description="ServerCorrectionRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2548" Vartype="Float" Bytesize="4" OffsetHex="000009F4" Description="ServerCorrectionRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2552" Vartype="4 Bytes" Bytesize="4" RLECount="38" OffsetHex="000009F8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2704" Vartype="Byte" Bytesize="1" OffsetHex="00000A90" Description="RootMotionParams.bHasRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="2708" Vartype="Float" Bytesize="4" OffsetHex="00000A94" Description="RootMotionParams.BlendWeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2712" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000A98" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2720" Vartype="Float" Bytesize="4" OffsetHex="00000AA0" Description="RootMotionParams.RootMotionTransform.Rotation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2724" Vartype="Float" Bytesize="4" OffsetHex="00000AA4" Description="RootMotionParams.RootMotionTransform.Rotation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2728" Vartype="Float" Bytesize="4" OffsetHex="00000AA8" Description="RootMotionParams.RootMotionTransform.Rotation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2732" Vartype="Float" Bytesize="4" OffsetHex="00000AAC" Description="RootMotionParams.RootMotionTransform.Rotation.W" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2736" Vartype="Float" Bytesize="4" OffsetHex="00000AB0" Description="RootMotionParams.RootMotionTransform.Translation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2740" Vartype="Float" Bytesize="4" OffsetHex="00000AB4" Description="RootMotionParams.RootMotionTransform.Translation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2744" Vartype="Float" Bytesize="4" OffsetHex="00000AB8" Description="RootMotionParams.RootMotionTransform.Translation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2748" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000ABC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2752" Vartype="Float" Bytesize="4" OffsetHex="00000AC0" Description="RootMotionParams.RootMotionTransform.Scale3D.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2756" Vartype="Float" Bytesize="4" OffsetHex="00000AC4" Description="RootMotionParams.RootMotionTransform.Scale3D.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2760" Vartype="Float" Bytesize="4" OffsetHex="00000AC8" Description="RootMotionParams.RootMotionTransform.Scale3D.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2764" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000ACC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2768" Vartype="Float" Bytesize="4" OffsetHex="00000AD0" Description="AnimRootMotionVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2772" Vartype="Float" Bytesize="4" OffsetHex="00000AD4" Description="AnimRootMotionVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2776" Vartype="Float" Bytesize="4" OffsetHex="00000AD8" Description="AnimRootMotionVelocity.Z" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="CapsuleComponent" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Byte" Bytesize="1" OffsetHex="00000038" Description="PrimaryComponentTick.TickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="57" Vartype="Byte" Bytesize="1" OffsetHex="00000039" Description="PrimaryComponentTick.EndTickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bStartWithTickEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bAllowTickOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bCanEverTick" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="58" Vartype="Byte" Bytesize="1" OffsetHex="0000003A" Description="PrimaryComponentTick.bTickEvenWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="60" Vartype="Float" Bytesize="4" OffsetHex="0000003C" Description="PrimaryComponentTick.TickInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" RLECount="8" OffsetHex="00000040" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="ComponentTags" DisplayMethod="Unsigned Integer">
          <Structure Name="ComponentTags[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] ComponentTags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] ComponentTags" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" Description="ComponentTags_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000006C" Description="ComponentTags_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="AssetUserData" DisplayMethod="Unsigned Integer">
          <Structure Name="AssetUserData[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] AssetUserData" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] AssetUserData" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" Description="AssetUserData_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="124" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000007C" Description="AssetUserData_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="UCSSerializationIndex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Byte" Bytesize="1" OffsetHex="00000088" Description="bNetAddressable" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="136" Vartype="Byte" Bytesize="1" OffsetHex="00000088" Description="bReplicates" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="137" Vartype="Byte" Bytesize="1" OffsetHex="00000089" Description="bAutoActivate" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bIsEditorOnly" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bCanEverAffectNavigation" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="138" Vartype="Byte" Bytesize="1" OffsetHex="0000008A" Description="bEditableWhenInherited" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="140" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008C" Description="CreationMethod" DisplayMethod="Unsigned Integer"/>
        <Element Offset="141" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008D" Description="OnComponentActivated" DisplayMethod="Unsigned Integer"/>
        <Element Offset="142" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008E" Description="OnComponentDeactivated" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="UCSModifiedProperties" DisplayMethod="Unsigned Integer">
          <Structure Name="SimpleMemberReference[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[0] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000010" Description="[0] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000014" Description="[0] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" Description="[0] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000001C" Description="[0] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[1] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[1] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[1] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="[1] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" Description="[1] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000003C" Description="[1] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[2] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[2] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[2] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="[2] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" Description="[2] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005C" Description="[2] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[3] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000068" Description="[3] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="[3] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="[3] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" Description="[3] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000007C" Description="[3] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[4] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000088" Description="[4] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[4] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[4] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" Description="[4] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" Description="[4] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[5] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000A8" Description="[5] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B0" Description="[5] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B4" Description="[5] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" Description="[5] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="188" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000BC" Description="[5] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="[6] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C8" Description="[6] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D0" Description="[6] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D4" Description="[6] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D8" Description="[6] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000DC" Description="[6] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="[7] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E8" Description="[7] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="240" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F0" Description="[7] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="244" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F4" Description="[7] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F8" Description="[7] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="252" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000FC" Description="[7] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[8] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000108" Description="[8] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000110" Description="[8] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="276" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000114" Description="[8] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" Description="[8] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="284" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000011C" Description="[8] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="[9] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000128" Description="[9] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000130" Description="[9] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="308" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000134" Description="[9] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000138" Description="[9] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="316" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000013C" Description="[9] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Pointer" Bytesize="8" OffsetHex="00000140" Description="[10] MemberParent" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000148" Description="[10] MemberName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000150" Description="[10] MemberGuid.A" DisplayMethod="Unsigned Integer"/>
              <Element Offset="340" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000154" Description="[10] MemberGuid.B" DisplayMethod="Unsigned Integer"/>
              <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" Description="[10] MemberGuid.C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" Description="[10] MemberGuid.D" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" Description="UCSModifiedProperties_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" Description="UCSModifiedProperties_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="000000A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B8" Description="PhysicsVolume" DisplayMethod="Unsigned Integer"/>
        <Element Offset="188" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000BC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="AttachParent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000C8" Description="AttachSocketName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Pointer" Bytesize="8" OffsetHex="000000D0" Description="AttachChildren" DisplayMethod="Unsigned Integer">
          <Structure Name="AttachChildren[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] AttachChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] AttachChildren" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="216" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D8" Description="AttachChildren_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000DC" Description="AttachChildren_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="ClientAttachedChildren" DisplayMethod="Unsigned Integer">
          <Structure Name="ClientAttachedChildren[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ClientAttachedChildren" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="232" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E8" Description="ClientAttachedChildren_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="236" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000EC" Description="ClientAttachedChildren_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="4 Bytes" Bytesize="4" RLECount="11" OffsetHex="000000F0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="284" Vartype="Float" Bytesize="4" OffsetHex="0000011C" Description="RelativeLocation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Float" Bytesize="4" OffsetHex="00000120" Description="RelativeLocation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="292" Vartype="Float" Bytesize="4" OffsetHex="00000124" Description="RelativeLocation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="Float" Bytesize="4" OffsetHex="00000128" Description="RelativeRotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="300" Vartype="Float" Bytesize="4" OffsetHex="0000012C" Description="RelativeRotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Float" Bytesize="4" OffsetHex="00000130" Description="RelativeRotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="308" Vartype="Float" Bytesize="4" OffsetHex="00000134" Description="RelativeScale3D.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Float" Bytesize="4" OffsetHex="00000138" Description="RelativeScale3D.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="316" Vartype="Float" Bytesize="4" OffsetHex="0000013C" Description="RelativeScale3D.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="320" Vartype="Float" Bytesize="4" OffsetHex="00000140" Description="ComponentVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="324" Vartype="Float" Bytesize="4" OffsetHex="00000144" Description="ComponentVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="Float" Bytesize="4" OffsetHex="00000148" Description="ComponentVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bShouldSnapLocationWhenAttached" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bShouldBeAttached" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bVisible" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bAbsoluteLocation" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bAbsoluteRotation" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bAbsoluteScale" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="332" Vartype="Byte" Bytesize="1" OffsetHex="0000014C" Description="bComponentToWorldUpdated" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="333" Vartype="Byte" Bytesize="1" OffsetHex="0000014D" Description="bBoundsChangeTriggersStreamingDataRebuild" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="333" Vartype="Byte" Bytesize="1" OffsetHex="0000014D" Description="bUseAttachParentBound" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="333" Vartype="Byte" Bytesize="1" OffsetHex="0000014D" Description="bHiddenInGame" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="333" Vartype="Byte" Bytesize="1" OffsetHex="0000014D" Description="bShouldSnapRotationWhenAttached" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="333" Vartype="Byte" Bytesize="1" OffsetHex="0000014D" Description="bShouldUpdatePhysicsVolume" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="335" Vartype="Byte" Bytesize="1" OffsetHex="0000014F" Description="Mobility" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Byte" Bytesize="1" OffsetHex="00000150" Description="DetailMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="337" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000151" Description="PhysicsVolumeChangedDelegate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="344" Vartype="4 Bytes" Bytesize="4" RLECount="42" OffsetHex="00000158" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Float" Bytesize="4" OffsetHex="00000200" Description="MinDrawDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="516" Vartype="Float" Bytesize="4" OffsetHex="00000204" Description="LDMaxDrawDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="520" Vartype="Float" Bytesize="4" OffsetHex="00000208" Description="CachedMaxDrawDistance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="524" Vartype="Byte" Bytesize="1" OffsetHex="0000020C" Description="DepthPriorityGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="525" Vartype="Byte" Bytesize="1" OffsetHex="0000020D" Description="ViewOwnerDepthPriorityGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="526" Vartype="Byte" Bytesize="1" OffsetHex="0000020E" Description="IndirectLightingCacheQuality" DisplayMethod="Unsigned Integer"/>
        <Element Offset="527" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000020F" Description="LightmapType" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="Byte" Bytesize="1" OffsetHex="00000210" Description="bBatchImpostersAsInstances" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="528" Vartype="Byte" Bytesize="1" OffsetHex="00000210" Description="bUseMaxLODAsImposter" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="528" Vartype="Byte" Bytesize="1" OffsetHex="00000210" Description="bNeverDistanceCull" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="528" Vartype="Byte" Bytesize="1" OffsetHex="00000210" Description="bAlwaysCreatePhysicsState" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bGenerateOverlapEvents" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bMultiBodyOverlap" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bTraceComplexOnMove" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bReturnMaterialOnMove" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bHasMotionBlurVelocityMeshes" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bAllowCullDistanceVolume" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bUseViewOwnerDepthPriorityGroup" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="529" Vartype="Byte" Bytesize="1" OffsetHex="00000211" Description="bVisibleInReflectionCaptures" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bReceivesDecals" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bRenderInDepthPass" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bRenderInMainPass" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bVisibleInRayTracing" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bOnlyOwnerSee" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bTreatAsBackgroundForOcclusion" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bVisibleInRealTimeSkyCaptures" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="530" Vartype="Byte" Bytesize="1" OffsetHex="00000212" Description="bOwnerNoSee" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bAffectDynamicIndirectLighting" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="CastShadow" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bHasPerInstanceHitProxies" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bUseAsOccluder" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bAffectDistanceFieldLighting" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bCastDynamicShadow" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bSelectable" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="531" Vartype="Byte" Bytesize="1" OffsetHex="00000213" Description="bForceMipStreaming" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastHiddenShadow" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastFarShadow" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastInsetShadow" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastCinematicShadow" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bSelfShadowOnly" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastContactShadow" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastVolumetricTranslucentShadow" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" OffsetHex="00000214" Description="bCastStaticShadow" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bIgnoreRadialForce" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bReceiveMobileCSMShadows" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bSingleSampleShadowFromStationaryLights" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bIgnoreRadialImpulse" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bExcludeFromLightAttachmentGroup" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bLightAttachmentsAsGroup" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bLightAsIfStatic" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="533" Vartype="Byte" Bytesize="1" OffsetHex="00000215" Description="bCastShadowAsTwoSided" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="bApplyImpulseOnDamage" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="bReplicatePhysicsToAutonomousProxy" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="bFillCollisionUnderneathForNavmesh" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="bUseEditorCompositing" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="AlwaysLoadOnServer" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="AlwaysLoadOnClient" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="534" Vartype="Byte" Bytesize="1" OffsetHex="00000216" Description="bRenderCustomDepth" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="535" Vartype="Byte" Bytesize="1" OffsetHex="00000217" Description="bHasCustomNavigableGeometry" DisplayMethod="Unsigned Integer"/>
        <Element Offset="537" Vartype="Byte" Bytesize="1" OffsetHex="00000219" Description="CanCharacterStepUpOn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="538" Vartype="Byte" Bytesize="1" OffsetHex="0000021A" Description="LightingChannels.bChannel1" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="538" Vartype="Byte" Bytesize="1" OffsetHex="0000021A" Description="LightingChannels.bChannel0" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="538" Vartype="Byte" Bytesize="1" OffsetHex="0000021A" Description="LightingChannels.bChannel2" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="539" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000021B" Description="CustomDepthStencilWriteMask" DisplayMethod="Unsigned Integer"/>
        <Element Offset="540" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000021C" Description="CustomDepthStencilValue" DisplayMethod="Unsigned Integer"/>
        <Element Offset="544" Vartype="Pointer" Bytesize="8" OffsetHex="00000220" Description="CustomPrimitiveData.Data" DisplayMethod="Unsigned Integer">
          <Structure Name="Data[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[1] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[2] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[3] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[4] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[5] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[6] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[7] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[8] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[9] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[10] Data" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="552" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000228" Description="CustomPrimitiveData.Data_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="556" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000022C" Description="CustomPrimitiveData.Data_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Pointer" Bytesize="8" OffsetHex="00000230" Description="CustomPrimitiveDataInternal.Data" DisplayMethod="Unsigned Integer">
          <Structure Name="Data[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="Float" Bytesize="4" OffsetHex="00000004" Description="[1] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Float" Bytesize="4" OffsetHex="00000008" Description="[2] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="Float" Bytesize="4" OffsetHex="0000000C" Description="[3] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Float" Bytesize="4" OffsetHex="00000010" Description="[4] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Float" Bytesize="4" OffsetHex="00000014" Description="[5] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[6] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[7] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[8] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[9] Data" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[10] Data" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="568" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000238" Description="CustomPrimitiveDataInternal.Data_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="572" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000023C" Description="CustomPrimitiveDataInternal.Data_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="576" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000240" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000248" Description="TranslucencySortPriority" DisplayMethod="Unsigned Integer"/>
        <Element Offset="588" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000024C" Description="VisibilityId" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Pointer" Bytesize="8" OffsetHex="00000250" Description="RuntimeVirtualTextures" DisplayMethod="Unsigned Integer">
          <Structure Name="RuntimeVirtualTextures[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] RuntimeVirtualTextures" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="600" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000258" Description="RuntimeVirtualTextures_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="604" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000025C" Description="RuntimeVirtualTextures_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000260" Description="VirtualTextureLodBias" DisplayMethod="Unsigned Integer"/>
        <Element Offset="609" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000261" Description="VirtualTextureCullMips" DisplayMethod="Unsigned Integer"/>
        <Element Offset="610" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000262" Description="VirtualTextureMinCoverage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="611" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000263" Description="VirtualTextureRenderPassType" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="Float" Bytesize="4" OffsetHex="00000268" Description="LpvBiasMultiplier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="620" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="0000026C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="628" Vartype="Float" Bytesize="4" OffsetHex="00000274" Description="BoundsScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="4 Bytes" Bytesize="4" RLECount="4" OffsetHex="00000278" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Pointer" Bytesize="8" OffsetHex="00000288" Description="MoveIgnoreActors" DisplayMethod="Unsigned Integer">
          <Structure Name="MoveIgnoreActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] MoveIgnoreActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="656" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000290" Description="MoveIgnoreActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="660" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000294" Description="MoveIgnoreActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="664" Vartype="Pointer" Bytesize="8" OffsetHex="00000298" Description="MoveIgnoreComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="MoveIgnoreComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] MoveIgnoreComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="672" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002A0" Description="MoveIgnoreComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="676" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002A4" Description="MoveIgnoreComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="4 Bytes" Bytesize="4" RLECount="8" OffsetHex="000002A8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bUpdateMassWhenScaleChanges" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bStartAwake" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bOverrideMass" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bAutoWeld" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bSimulatePhysics" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bGenerateWakeEvents" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="BodyInstance.bEnableGravity" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="716" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="000002CC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="726" Vartype="Byte" Bytesize="1" OffsetHex="000002D6" Description="BodyInstance.ObjectType" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="Byte" Bytesize="1" OffsetHex="000002D8" Description="BodyInstance.CollisionEnabled" DisplayMethod="Unsigned Integer"/>
        <Element Offset="732" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="000002DC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="785" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000311" Description="BodyInstance.SleepFamily" DisplayMethod="Unsigned Integer"/>
        <Element Offset="786" Vartype="Byte" Bytesize="1" OffsetHex="00000312" Description="BodyInstance.DOFMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bLockXTranslation" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bLockYTranslation" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bUseCCD" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bLockRotation" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bNotifyRigidBodyCollision" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bLockTranslation" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="787" Vartype="Byte" Bytesize="1" OffsetHex="00000313" Description="BodyInstance.bIgnoreAnalyticCollisions" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bLockYRotation" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bLockXRotation" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bLockZTranslation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bOverrideMaxDepenetrationVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bOverrideMaxAngularVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" Description="BodyInstance.bLockZRotation" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="789" Vartype="Byte" Bytesize="1" OffsetHex="00000315" Description="BodyInstance.bInterpolateWhenSubStepping" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="789" Vartype="Byte" Bytesize="1" OffsetHex="00000315" Description="BodyInstance.bOverrideWalkableSlopeOnInstance" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="796" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="0000031C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="804" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000324" Description="BodyInstance.CollisionProfileName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="812" Vartype="Byte" Bytesize="1" OffsetHex="0000032C" Description="BodyInstance.PositionSolverIterationCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="813" Vartype="Byte" Bytesize="1" OffsetHex="0000032D" Description="BodyInstance.VelocitySolverIterationCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="BodyInstance.CollisionResponses.ResponseToChannels.WorldStatic" DisplayMethod="Unsigned Integer"/>
        <Element Offset="817" Vartype="Byte" Bytesize="1" OffsetHex="00000331" Description="BodyInstance.CollisionResponses.ResponseToChannels.WorldDynamic" DisplayMethod="Unsigned Integer"/>
        <Element Offset="818" Vartype="Byte" Bytesize="1" OffsetHex="00000332" Description="BodyInstance.CollisionResponses.ResponseToChannels.Pawn" DisplayMethod="Unsigned Integer"/>
        <Element Offset="819" Vartype="Byte" Bytesize="1" OffsetHex="00000333" Description="BodyInstance.CollisionResponses.ResponseToChannels.Visibility" DisplayMethod="Unsigned Integer"/>
        <Element Offset="820" Vartype="Byte" Bytesize="1" OffsetHex="00000334" Description="BodyInstance.CollisionResponses.ResponseToChannels.Camera" DisplayMethod="Unsigned Integer"/>
        <Element Offset="821" Vartype="Byte" Bytesize="1" OffsetHex="00000335" Description="BodyInstance.CollisionResponses.ResponseToChannels.PhysicsBody" DisplayMethod="Unsigned Integer"/>
        <Element Offset="822" Vartype="Byte" Bytesize="1" OffsetHex="00000336" Description="BodyInstance.CollisionResponses.ResponseToChannels.Vehicle" DisplayMethod="Unsigned Integer"/>
        <Element Offset="823" Vartype="Byte" Bytesize="1" OffsetHex="00000337" Description="BodyInstance.CollisionResponses.ResponseToChannels.Destructible" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Byte" Bytesize="1" OffsetHex="00000338" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="825" Vartype="Byte" Bytesize="1" OffsetHex="00000339" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="826" Vartype="Byte" Bytesize="1" OffsetHex="0000033A" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="827" Vartype="Byte" Bytesize="1" OffsetHex="0000033B" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="828" Vartype="Byte" Bytesize="1" OffsetHex="0000033C" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="829" Vartype="Byte" Bytesize="1" OffsetHex="0000033D" Description="BodyInstance.CollisionResponses.ResponseToChannels.EngineTraceChannel6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="830" Vartype="Byte" Bytesize="1" OffsetHex="0000033E" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="831" Vartype="Byte" Bytesize="1" OffsetHex="0000033F" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Byte" Bytesize="1" OffsetHex="00000340" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="833" Vartype="Byte" Bytesize="1" OffsetHex="00000341" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="834" Vartype="Byte" Bytesize="1" OffsetHex="00000342" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="835" Vartype="Byte" Bytesize="1" OffsetHex="00000343" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="836" Vartype="Byte" Bytesize="1" OffsetHex="00000344" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="837" Vartype="Byte" Bytesize="1" OffsetHex="00000345" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="838" Vartype="Byte" Bytesize="1" OffsetHex="00000346" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="839" Vartype="Byte" Bytesize="1" OffsetHex="00000347" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="Byte" Bytesize="1" OffsetHex="00000348" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="841" Vartype="Byte" Bytesize="1" OffsetHex="00000349" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="842" Vartype="Byte" Bytesize="1" OffsetHex="0000034A" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel13" DisplayMethod="Unsigned Integer"/>
        <Element Offset="843" Vartype="Byte" Bytesize="1" OffsetHex="0000034B" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="844" Vartype="Byte" Bytesize="1" OffsetHex="0000034C" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel15" DisplayMethod="Unsigned Integer"/>
        <Element Offset="845" Vartype="Byte" Bytesize="1" OffsetHex="0000034D" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel16" DisplayMethod="Unsigned Integer"/>
        <Element Offset="846" Vartype="Byte" Bytesize="1" OffsetHex="0000034E" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel17" DisplayMethod="Unsigned Integer"/>
        <Element Offset="847" Vartype="Byte" Bytesize="1" OffsetHex="0000034F" Description="BodyInstance.CollisionResponses.ResponseToChannels.GameTraceChannel18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="Pointer" Bytesize="8" OffsetHex="00000350" Description="BodyInstance.CollisionResponses.ResponseArray" DisplayMethod="Unsigned Integer">
          <Structure Name="ResponseChannel[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Byte" Bytesize="1" OffsetHex="00000008" Description="[0] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="12" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000000C" Description="[1] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="Byte" Bytesize="1" OffsetHex="00000014" Description="[1] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[2] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Byte" Bytesize="1" OffsetHex="00000020" Description="[2] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000024" Description="[3] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Byte" Bytesize="1" OffsetHex="0000002C" Description="[3] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[4] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Byte" Bytesize="1" OffsetHex="00000038" Description="[4] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="60" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000003C" Description="[5] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="Byte" Bytesize="1" OffsetHex="00000044" Description="[5] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[6] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Byte" Bytesize="1" OffsetHex="00000050" Description="[6] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000054" Description="[7] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="92" Vartype="Byte" Bytesize="1" OffsetHex="0000005C" Description="[7] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000060" Description="[8] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Byte" Bytesize="1" OffsetHex="00000068" Description="[8] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="108" Vartype="8 Bytes" Bytesize="8" OffsetHex="0000006C" Description="[9] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="Byte" Bytesize="1" OffsetHex="00000074" Description="[9] Response" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000078" Description="[10] Channel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Byte" Bytesize="1" OffsetHex="00000080" Description="[10] Response" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="856" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000358" Description="BodyInstance.CollisionResponses.ResponseArray_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="860" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000035C" Description="BodyInstance.CollisionResponses.ResponseArray_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="864" Vartype="Float" Bytesize="4" OffsetHex="00000360" Description="BodyInstance.MaxDepenetrationVelocity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="868" Vartype="Float" Bytesize="4" OffsetHex="00000364" Description="BodyInstance.MassInKgOverride" DisplayMethod="Unsigned Integer"/>
        <Element Offset="872" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000368" DisplayMethod="Unsigned Integer"/>
        <Element Offset="880" Vartype="Float" Bytesize="4" OffsetHex="00000370" Description="BodyInstance.LinearDamping" DisplayMethod="Unsigned Integer"/>
        <Element Offset="884" Vartype="Float" Bytesize="4" OffsetHex="00000374" Description="BodyInstance.AngularDamping" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="Float" Bytesize="4" OffsetHex="00000378" Description="BodyInstance.CustomDOFPlaneNormal.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="892" Vartype="Float" Bytesize="4" OffsetHex="0000037C" Description="BodyInstance.CustomDOFPlaneNormal.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="896" Vartype="Float" Bytesize="4" OffsetHex="00000380" Description="BodyInstance.CustomDOFPlaneNormal.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="900" Vartype="Float" Bytesize="4" OffsetHex="00000384" Description="BodyInstance.COMNudge.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="Float" Bytesize="4" OffsetHex="00000388" Description="BodyInstance.COMNudge.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="908" Vartype="Float" Bytesize="4" OffsetHex="0000038C" Description="BodyInstance.COMNudge.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="912" Vartype="Float" Bytesize="4" OffsetHex="00000390" Description="BodyInstance.MassScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="916" Vartype="Float" Bytesize="4" OffsetHex="00000394" Description="BodyInstance.InertiaTensorScale.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="920" Vartype="Float" Bytesize="4" OffsetHex="00000398" Description="BodyInstance.InertiaTensorScale.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="924" Vartype="Float" Bytesize="4" OffsetHex="0000039C" Description="BodyInstance.InertiaTensorScale.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="928" Vartype="4 Bytes" Bytesize="4" RLECount="4" OffsetHex="000003A0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="944" Vartype="Byte" Bytesize="1" OffsetHex="000003B0" Description="BodyInstance.WalkableSlopeOverride.WalkableSlopeBehavior" DisplayMethod="Unsigned Integer"/>
        <Element Offset="948" Vartype="Float" Bytesize="4" OffsetHex="000003B4" Description="BodyInstance.WalkableSlopeOverride.WalkableSlopeAngle" DisplayMethod="Unsigned Integer"/>
        <Element Offset="952" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000003B8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="960" Vartype="Pointer" Bytesize="8" OffsetHex="000003C0" Description="BodyInstance.PhysMaterialOverride" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="Float" Bytesize="4" OffsetHex="000003C8" Description="BodyInstance.MaxAngularVelocity" DisplayMethod="Unsigned Integer"/>
        <Element Offset="972" Vartype="Float" Bytesize="4" OffsetHex="000003CC" Description="BodyInstance.CustomSleepThresholdMultiplier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="Float" Bytesize="4" OffsetHex="000003D0" Description="BodyInstance.StabilizationThresholdMultiplier" DisplayMethod="Unsigned Integer"/>
        <Element Offset="980" Vartype="Float" Bytesize="4" OffsetHex="000003D4" Description="BodyInstance.PhysicsBlendWeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="984" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="000003D8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1040" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000410" Description="OnComponentHit" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1041" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000411" Description="OnComponentBeginOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1042" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000412" Description="OnComponentEndOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1043" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000413" Description="OnComponentWake" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1044" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000414" Description="OnComponentSleep" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1046" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000416" Description="OnBeginCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1047" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000417" Description="OnEndCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1048" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000418" Description="OnClicked" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1049" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000419" Description="OnReleased" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1050" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000041A" Description="OnInputTouchBegin" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1051" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000041B" Description="OnInputTouchEnd" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1052" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000041C" Description="OnInputTouchEnter" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1053" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000041D" Description="OnInputTouchLeave" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1060" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="00000424" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1080" Vartype="Pointer" Bytesize="8" OffsetHex="00000438" Description="LODParentPrimitive" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1088" Vartype="Pointer" Bytesize="8" OffsetHex="00000440" Description="ShapeBodySetup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1096" Vartype="Pointer" Bytesize="8" OffsetHex="00000448" Description="AreaClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1104" Vartype="Byte" Bytesize="1" OffsetHex="00000450" Description="ShapeColor.B" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1105" Vartype="Byte" Bytesize="1" OffsetHex="00000451" Description="ShapeColor.G" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1106" Vartype="Byte" Bytesize="1" OffsetHex="00000452" Description="ShapeColor.R" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1107" Vartype="Byte" Bytesize="1" OffsetHex="00000453" Description="ShapeColor.A" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1108" Vartype="Byte" Bytesize="1" OffsetHex="00000454" Description="bDrawOnlyIfSelected" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1108" Vartype="Byte" Bytesize="1" OffsetHex="00000454" Description="bDynamicObstacle" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1108" Vartype="Byte" Bytesize="1" OffsetHex="00000454" Description="bShouldCollideWhenPlacing" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1112" Vartype="Float" Bytesize="4" OffsetHex="00000458" Description="CapsuleHalfHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1116" Vartype="Float" Bytesize="4" OffsetHex="0000045C" Description="CapsuleRadius" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="GPlayer" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="12" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Byte" Bytesize="1" OffsetHex="00000030" Description="PrimaryActorTick.TickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="49" Vartype="Byte" Bytesize="1" OffsetHex="00000031" Description="PrimaryActorTick.EndTickGroup" DisplayMethod="Unsigned Integer"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bTickEvenWhenPaused" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bCanEverTick" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bStartWithTickEnabled" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="50" Vartype="Byte" Bytesize="1" OffsetHex="00000032" Description="PrimaryActorTick.bAllowTickOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="52" Vartype="Float" Bytesize="4" OffsetHex="00000034" Description="PrimaryActorTick.TickInterval" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" RLECount="8" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bExchangedRoles" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bTearOff" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bHidden" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bReplicateMovement" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bNetStartup" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bOnlyRelevantToOwner" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bAlwaysRelevant" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="88" Vartype="Byte" Bytesize="1" OffsetHex="00000058" Description="bNetTemporary" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bCanBeDamaged" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bAutoDestroyWhenFinished" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bAllowTickBeforeBeginPlay" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bReplayRewindable" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bNetUseOwnerRelevancy" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bRelevantForNetworkReplays" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bRelevantForLevelBounds" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="89" Vartype="Byte" Bytesize="1" OffsetHex="00000059" Description="bNetLoadOnClient" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bBlockInput" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bGenerateOverlapEventsDuringLevelStreaming" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bFindCameraComponentWhenViewTarget" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bCollideWhenPlacing" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bIgnoresOriginShifting" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bEnableAutoLODGeneration" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bIsEditorOnlyActor" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="90" Vartype="Byte" Bytesize="1" OffsetHex="0000005A" Description="bActorSeamlessTraveled" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bReplicates" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bAllowReceiveTickEventOnDedicatedServer" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="91" Vartype="Byte" Bytesize="1" OffsetHex="0000005B" Description="bCanBeInCluster" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="92" Vartype="Byte" Bytesize="1" OffsetHex="0000005C" Description="bActorEnableCollision" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="92" Vartype="Byte" Bytesize="1" OffsetHex="0000005C" Description="bActorIsBeingDestroyed" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="93" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005D" Description="UpdateOverlapsMethodDuringLevelStreaming" DisplayMethod="Unsigned Integer"/>
        <Element Offset="94" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000005E" Description="DefaultUpdateOverlapsMethodDuringLevelStreaming" DisplayMethod="Unsigned Integer"/>
        <Element Offset="95" Vartype="Byte" Bytesize="1" OffsetHex="0000005F" Description="RemoteRole" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Float" Bytesize="4" OffsetHex="00000060" Description="ReplicatedMovement.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="100" Vartype="Float" Bytesize="4" OffsetHex="00000064" Description="ReplicatedMovement.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Float" Bytesize="4" OffsetHex="00000068" Description="ReplicatedMovement.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="Float" Bytesize="4" OffsetHex="0000006C" Description="ReplicatedMovement.AngularVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="112" Vartype="Float" Bytesize="4" OffsetHex="00000070" Description="ReplicatedMovement.AngularVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="116" Vartype="Float" Bytesize="4" OffsetHex="00000074" Description="ReplicatedMovement.AngularVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Float" Bytesize="4" OffsetHex="00000078" Description="ReplicatedMovement.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="ReplicatedMovement.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="ReplicatedMovement.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="ReplicatedMovement.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="ReplicatedMovement.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="ReplicatedMovement.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Byte" Bytesize="1" OffsetHex="00000090" Description="ReplicatedMovement.bSimulatedPhysicSleep" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="144" Vartype="Byte" Bytesize="1" OffsetHex="00000090" Description="ReplicatedMovement.bRepPhysics" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="145" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000091" Description="ReplicatedMovement.LocationQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="146" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000092" Description="ReplicatedMovement.VelocityQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="147" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000093" Description="ReplicatedMovement.RotationQuantizationLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="InitialLifeSpan" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="CustomTimeDilation" DisplayMethod="Unsigned Integer"/>
        <Element Offset="156" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000009C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="AttachmentReplication.AttachParent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="Float" Bytesize="4" OffsetHex="000000A8" Description="AttachmentReplication.LocationOffset.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="172" Vartype="Float" Bytesize="4" OffsetHex="000000AC" Description="AttachmentReplication.LocationOffset.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Float" Bytesize="4" OffsetHex="000000B0" Description="AttachmentReplication.LocationOffset.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="180" Vartype="Float" Bytesize="4" OffsetHex="000000B4" Description="AttachmentReplication.RelativeScale3D.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Float" Bytesize="4" OffsetHex="000000B8" Description="AttachmentReplication.RelativeScale3D.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="188" Vartype="Float" Bytesize="4" OffsetHex="000000BC" Description="AttachmentReplication.RelativeScale3D.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Float" Bytesize="4" OffsetHex="000000C0" Description="AttachmentReplication.RotationOffset.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="196" Vartype="Float" Bytesize="4" OffsetHex="000000C4" Description="AttachmentReplication.RotationOffset.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="Float" Bytesize="4" OffsetHex="000000C8" Description="AttachmentReplication.RotationOffset.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="204" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000CC" Description="AttachmentReplication.AttachSocket" DisplayMethod="Unsigned Integer"/>
        <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="AttachmentReplication.AttachComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="Owner" DisplayMethod="Unsigned Integer"/>
        <Element Offset="232" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E8" Description="NetDriverName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="Byte" Bytesize="1" OffsetHex="000000F0" Description="Role" DisplayMethod="Unsigned Integer"/>
        <Element Offset="241" Vartype="Byte" Bytesize="1" OffsetHex="000000F1" Description="NetDormancy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="242" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F2" Description="SpawnCollisionHandlingMethod" DisplayMethod="Unsigned Integer"/>
        <Element Offset="243" Vartype="Byte" Bytesize="1" OffsetHex="000000F3" Description="AutoReceiveInput" DisplayMethod="Unsigned Integer"/>
        <Element Offset="244" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F4" Description="InputPriority" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="Pointer" Bytesize="8" OffsetHex="000000F8" Description="InputComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="Float" Bytesize="4" OffsetHex="00000100" Description="NetCullDistanceSquared" DisplayMethod="Unsigned Integer"/>
        <Element Offset="260" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000104" Description="NetTag" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="Float" Bytesize="4" OffsetHex="00000108" Description="NetUpdateFrequency" DisplayMethod="Unsigned Integer"/>
        <Element Offset="268" Vartype="Float" Bytesize="4" OffsetHex="0000010C" Description="MinNetUpdateFrequency" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Float" Bytesize="4" OffsetHex="00000110" Description="NetPriority" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000114" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="Pointer" Bytesize="8" OffsetHex="00000118" Description="Instigator" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="Children" DisplayMethod="Unsigned Integer">
          <Structure Name="Children[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] Children" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] Children" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="296" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000128" Description="Children_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="300" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000012C" Description="Children_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="RootComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Pointer" Bytesize="8" OffsetHex="00000138" Description="ControllingMatineeActors" DisplayMethod="Unsigned Integer">
          <Structure Name="ControllingMatineeActors[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ControllingMatineeActors" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="320" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000140" Description="ControllingMatineeActors_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="324" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000144" Description="ControllingMatineeActors_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000148" DisplayMethod="Unsigned Integer"/>
        <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="Layers" DisplayMethod="Unsigned Integer">
          <Structure Name="Layers[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] Layers" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] Layers" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" Description="Layers_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" Description="Layers_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="352" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000160" Description="ParentComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="356" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="00000164" DisplayMethod="Unsigned Integer"/>
        <Element Offset="368" Vartype="Pointer" Bytesize="8" OffsetHex="00000170" Description="Tags" DisplayMethod="Unsigned Integer">
          <Structure Name="Tags[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000000" Description="[0] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000008" Description="[1] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000010" Description="[2] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000018" Description="[3] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000020" Description="[4] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000028" Description="[5] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000030" Description="[6] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000038" Description="[7] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[8] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000048" Description="[9] Tags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000050" Description="[10] Tags" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="376" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000178" Description="Tags_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="380" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000017C" Description="Tags_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="384" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000180" Description="OnTakeAnyDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="385" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000181" Description="OnTakePointDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="386" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000182" Description="OnTakeRadialDamage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="387" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000183" Description="OnActorBeginOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="388" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000184" Description="OnActorEndOverlap" DisplayMethod="Unsigned Integer"/>
        <Element Offset="389" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000185" Description="OnBeginCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="390" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000186" Description="OnEndCursorOver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="391" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000187" Description="OnClicked" DisplayMethod="Unsigned Integer"/>
        <Element Offset="392" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000188" Description="OnReleased" DisplayMethod="Unsigned Integer"/>
        <Element Offset="393" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000189" Description="OnInputTouchBegin" DisplayMethod="Unsigned Integer"/>
        <Element Offset="394" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018A" Description="OnInputTouchEnd" DisplayMethod="Unsigned Integer"/>
        <Element Offset="395" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018B" Description="OnInputTouchEnter" DisplayMethod="Unsigned Integer"/>
        <Element Offset="396" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018C" Description="OnInputTouchLeave" DisplayMethod="Unsigned Integer"/>
        <Element Offset="397" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018D" Description="OnActorHit" DisplayMethod="Unsigned Integer"/>
        <Element Offset="398" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018E" Description="OnDestroyed" DisplayMethod="Unsigned Integer"/>
        <Element Offset="399" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018F" Description="OnEndPlay" DisplayMethod="Unsigned Integer"/>
        <Element Offset="404" Vartype="4 Bytes" Bytesize="4" RLECount="23" OffsetHex="00000194" DisplayMethod="Unsigned Integer"/>
        <Element Offset="496" Vartype="Pointer" Bytesize="8" OffsetHex="000001F0" Description="InstanceComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="InstanceComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InstanceComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InstanceComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="504" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001F8" Description="InstanceComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="508" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001FC" Description="InstanceComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Pointer" Bytesize="8" OffsetHex="00000200" Description="BlueprintCreatedComponents" DisplayMethod="Unsigned Integer">
          <Structure Name="BlueprintCreatedComponents[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] BlueprintCreatedComponents" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="520" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000208" Description="BlueprintCreatedComponents_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="524" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000020C" Description="BlueprintCreatedComponents_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000210" DisplayMethod="Unsigned Integer"/>
        <Element Offset="552" Vartype="Byte" Bytesize="1" OffsetHex="00000228" Description="bCanAffectNavigationGeneration" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="552" Vartype="Byte" Bytesize="1" OffsetHex="00000228" Description="bUseControllerRotationRoll" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="552" Vartype="Byte" Bytesize="1" OffsetHex="00000228" Description="bUseControllerRotationYaw" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="552" Vartype="Byte" Bytesize="1" OffsetHex="00000228" Description="bUseControllerRotationPitch" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="556" Vartype="Float" Bytesize="4" OffsetHex="0000022C" Description="BaseEyeHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Byte" Bytesize="1" OffsetHex="00000230" Description="AutoPossessPlayer" DisplayMethod="Unsigned Integer"/>
        <Element Offset="561" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000231" Description="AutoPossessAI" DisplayMethod="Unsigned Integer"/>
        <Element Offset="562" Vartype="Byte" Bytesize="1" OffsetHex="00000232" Description="RemoteViewPitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="568" Vartype="Pointer" Bytesize="8" OffsetHex="00000238" Description="AIControllerClass" DisplayMethod="Unsigned Integer"/>
        <Element Offset="576" Vartype="Pointer" Bytesize="8" OffsetHex="00000240" Description="PlayerState" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000248" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Pointer" Bytesize="8" OffsetHex="00000250" Description="LastHitBy" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Pointer" Bytesize="8" OffsetHex="00000258" Description="Controller" DisplayMethod="Unsigned Integer"/>
        <Element Offset="612" Vartype="Float" Bytesize="4" OffsetHex="00000264" Description="ControlInputVector.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="Float" Bytesize="4" OffsetHex="00000268" Description="ControlInputVector.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="620" Vartype="Float" Bytesize="4" OffsetHex="0000026C" Description="ControlInputVector.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="Float" Bytesize="4" OffsetHex="00000270" Description="LastControlInputVector.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="628" Vartype="Float" Bytesize="4" OffsetHex="00000274" Description="LastControlInputVector.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="Float" Bytesize="4" OffsetHex="00000278" Description="LastControlInputVector.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="636" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000027C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="640" Vartype="Pointer" Bytesize="8" OffsetHex="00000280" Description="Mesh" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Pointer" Bytesize="8" OffsetHex="00000288" Description="CharacterMovement" DisplayMethod="Unsigned Integer"/>
        <Element Offset="656" Vartype="Pointer" Bytesize="8" OffsetHex="00000290" Description="CapsuleComponent" DisplayMethod="Unsigned Integer"/>
        <Element Offset="664" Vartype="Pointer" Bytesize="8" OffsetHex="00000298" Description="BasedMovement.MovementBase" DisplayMethod="Unsigned Integer"/>
        <Element Offset="672" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002A0" Description="BasedMovement.BoneName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="680" Vartype="Float" Bytesize="4" OffsetHex="000002A8" Description="BasedMovement.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="684" Vartype="Float" Bytesize="4" OffsetHex="000002AC" Description="BasedMovement.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="688" Vartype="Float" Bytesize="4" OffsetHex="000002B0" Description="BasedMovement.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="692" Vartype="Float" Bytesize="4" OffsetHex="000002B4" Description="BasedMovement.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="696" Vartype="Float" Bytesize="4" OffsetHex="000002B8" Description="BasedMovement.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="700" Vartype="Float" Bytesize="4" OffsetHex="000002BC" Description="BasedMovement.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="704" Vartype="Byte" Bytesize="1" OffsetHex="000002C0" Description="BasedMovement.bServerHasBaseComponent" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="705" Vartype="Byte" Bytesize="1" OffsetHex="000002C1" Description="BasedMovement.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="706" Vartype="Byte" Bytesize="1" OffsetHex="000002C2" Description="BasedMovement.bServerHasVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="712" Vartype="Pointer" Bytesize="8" OffsetHex="000002C8" Description="ReplicatedBasedMovement.MovementBase" DisplayMethod="Unsigned Integer"/>
        <Element Offset="720" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002D0" Description="ReplicatedBasedMovement.BoneName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="728" Vartype="Float" Bytesize="4" OffsetHex="000002D8" Description="ReplicatedBasedMovement.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="732" Vartype="Float" Bytesize="4" OffsetHex="000002DC" Description="ReplicatedBasedMovement.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="736" Vartype="Float" Bytesize="4" OffsetHex="000002E0" Description="ReplicatedBasedMovement.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="740" Vartype="Float" Bytesize="4" OffsetHex="000002E4" Description="ReplicatedBasedMovement.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="Float" Bytesize="4" OffsetHex="000002E8" Description="ReplicatedBasedMovement.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="748" Vartype="Float" Bytesize="4" OffsetHex="000002EC" Description="ReplicatedBasedMovement.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="Byte" Bytesize="1" OffsetHex="000002F0" Description="ReplicatedBasedMovement.bServerHasBaseComponent" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="753" Vartype="Byte" Bytesize="1" OffsetHex="000002F1" Description="ReplicatedBasedMovement.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="754" Vartype="Byte" Bytesize="1" OffsetHex="000002F2" Description="ReplicatedBasedMovement.bServerHasVelocity" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="760" Vartype="Float" Bytesize="4" OffsetHex="000002F8" Description="AnimRootMotionTranslationScale" DisplayMethod="Unsigned Integer"/>
        <Element Offset="764" Vartype="Float" Bytesize="4" OffsetHex="000002FC" Description="BaseTranslationOffset.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="768" Vartype="Float" Bytesize="4" OffsetHex="00000300" Description="BaseTranslationOffset.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="772" Vartype="Float" Bytesize="4" OffsetHex="00000304" Description="BaseTranslationOffset.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="776" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000308" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="Float" Bytesize="4" OffsetHex="00000310" Description="BaseRotationOffset.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="788" Vartype="Float" Bytesize="4" OffsetHex="00000314" Description="BaseRotationOffset.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Float" Bytesize="4" OffsetHex="00000318" Description="BaseRotationOffset.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="796" Vartype="Float" Bytesize="4" OffsetHex="0000031C" Description="BaseRotationOffset.W" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="Float" Bytesize="4" OffsetHex="00000320" Description="ReplicatedServerLastTransformUpdateTimeStamp" DisplayMethod="Unsigned Integer"/>
        <Element Offset="804" Vartype="Float" Bytesize="4" OffsetHex="00000324" Description="ReplayLastTransformUpdateTimeStamp" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Byte" Bytesize="1" OffsetHex="00000328" Description="ReplicatedMovementMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="809" Vartype="Byte" Bytesize="1" OffsetHex="00000329" Description="bInBaseReplication" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="812" Vartype="Float" Bytesize="4" OffsetHex="0000032C" Description="CrouchedEyeHeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bClientUpdating" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bClientWasFalling" DisplayMethod="Unsigned Integer" ChildStructStart="16"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bProxyIsJumpForceApplied" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bPressedJump" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bClientResimulateRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="32"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bIsCrouched" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bSimGravityDisabled" DisplayMethod="Unsigned Integer" ChildStructStart="128"/>
        <Element Offset="816" Vartype="Byte" Bytesize="1" OffsetHex="00000330" Description="bClientResimulateRootMotionSources" DisplayMethod="Unsigned Integer" ChildStructStart="64"/>
        <Element Offset="817" Vartype="Byte" Bytesize="1" OffsetHex="00000331" Description="bClientCheckEncroachmentOnNetUpdate" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="817" Vartype="Byte" Bytesize="1" OffsetHex="00000331" Description="bWasJumping" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="817" Vartype="Byte" Bytesize="1" OffsetHex="00000331" Description="bServerMoveIgnoreRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="820" Vartype="Float" Bytesize="4" OffsetHex="00000334" Description="JumpKeyHoldTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Float" Bytesize="4" OffsetHex="00000338" Description="JumpForceTimeRemaining" DisplayMethod="Unsigned Integer"/>
        <Element Offset="828" Vartype="Float" Bytesize="4" OffsetHex="0000033C" Description="ProxyJumpForceStartedTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Float" Bytesize="4" OffsetHex="00000340" Description="JumpMaxHoldTime" DisplayMethod="Unsigned Integer"/>
        <Element Offset="836" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000344" Description="JumpMaxCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="840" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000348" Description="JumpCurrentCount" DisplayMethod="Unsigned Integer"/>
        <Element Offset="844" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000034C" Description="JumpCurrentCountPreJump" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000350" DisplayMethod="Unsigned Integer"/>
        <Element Offset="856" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000358" Description="OnReachedJumpApex" DisplayMethod="Unsigned Integer"/>
        <Element Offset="860" Vartype="4 Bytes" Bytesize="4" RLECount="7" OffsetHex="0000035C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000378" Description="MovementModeChangedDelegate" DisplayMethod="Unsigned Integer"/>
        <Element Offset="892" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="0000037C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000388" Description="OnCharacterMovementUpdated" DisplayMethod="Unsigned Integer"/>
        <Element Offset="908" Vartype="4 Bytes" Bytesize="4" RLECount="13" OffsetHex="0000038C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="960" Vartype="Byte" Bytesize="1" OffsetHex="000003C0" Description="SavedRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="960" Vartype="Byte" Bytesize="1" OffsetHex="000003C0" Description="SavedRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="960" Vartype="Byte" Bytesize="1" OffsetHex="000003C0" Description="SavedRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="960" Vartype="Byte" Bytesize="1" OffsetHex="000003C0" Description="SavedRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="961" Vartype="Byte" Bytesize="1" OffsetHex="000003C1" Description="SavedRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
        <Element Offset="964" Vartype="Float" Bytesize="4" OffsetHex="000003C4" Description="SavedRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="Float" Bytesize="4" OffsetHex="000003C8" Description="SavedRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="972" Vartype="Float" Bytesize="4" OffsetHex="000003CC" Description="SavedRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="976" Vartype="Byte" Bytesize="1" OffsetHex="000003D0" Description="ClientRootMotionParams.bHasRootMotion" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="980" Vartype="Float" Bytesize="4" OffsetHex="000003D4" Description="ClientRootMotionParams.BlendWeight" DisplayMethod="Unsigned Integer"/>
        <Element Offset="984" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000003D8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="992" Vartype="Float" Bytesize="4" OffsetHex="000003E0" Description="ClientRootMotionParams.RootMotionTransform.Rotation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="996" Vartype="Float" Bytesize="4" OffsetHex="000003E4" Description="ClientRootMotionParams.RootMotionTransform.Rotation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1000" Vartype="Float" Bytesize="4" OffsetHex="000003E8" Description="ClientRootMotionParams.RootMotionTransform.Rotation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1004" Vartype="Float" Bytesize="4" OffsetHex="000003EC" Description="ClientRootMotionParams.RootMotionTransform.Rotation.W" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1008" Vartype="Float" Bytesize="4" OffsetHex="000003F0" Description="ClientRootMotionParams.RootMotionTransform.Translation.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1012" Vartype="Float" Bytesize="4" OffsetHex="000003F4" Description="ClientRootMotionParams.RootMotionTransform.Translation.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1016" Vartype="Float" Bytesize="4" OffsetHex="000003F8" Description="ClientRootMotionParams.RootMotionTransform.Translation.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1020" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003FC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1024" Vartype="Float" Bytesize="4" OffsetHex="00000400" Description="ClientRootMotionParams.RootMotionTransform.Scale3D.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1028" Vartype="Float" Bytesize="4" OffsetHex="00000404" Description="ClientRootMotionParams.RootMotionTransform.Scale3D.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1032" Vartype="Float" Bytesize="4" OffsetHex="00000408" Description="ClientRootMotionParams.RootMotionTransform.Scale3D.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1036" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000040C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1040" Vartype="Pointer" Bytesize="8" OffsetHex="00000410" Description="RootMotionRepMoves" DisplayMethod="Unsigned Integer">
          <Structure Name="SimulatedRootMotionReplicatedMove[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Float" Bytesize="4" OffsetHex="00000000" Description="[0] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Byte" Bytesize="1" OffsetHex="00000008" Description="[0] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000000C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[0] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Float" Bytesize="4" OffsetHex="00000018" Description="[0] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="28" Vartype="Float" Bytesize="4" OffsetHex="0000001C" Description="[0] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Float" Bytesize="4" OffsetHex="00000020" Description="[0] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="Float" Bytesize="4" OffsetHex="00000024" Description="[0] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Float" Bytesize="4" OffsetHex="00000028" Description="[0] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="Float" Bytesize="4" OffsetHex="0000002C" Description="[0] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Float" Bytesize="4" OffsetHex="00000030" Description="[0] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[0] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000040" Description="[0] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Byte" Bytesize="1" OffsetHex="00000048" Description="[0] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="73" Vartype="Byte" Bytesize="1" OffsetHex="00000049" Description="[0] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000050" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Byte" Bytesize="1" OffsetHex="00000078" Description="[0] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="120" Vartype="Byte" Bytesize="1" OffsetHex="00000078" Description="[0] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="120" Vartype="Byte" Bytesize="1" OffsetHex="00000078" Description="[0] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="120" Vartype="Byte" Bytesize="1" OffsetHex="00000078" Description="[0] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="121" Vartype="Byte" Bytesize="1" OffsetHex="00000079" Description="[0] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="124" Vartype="Float" Bytesize="4" OffsetHex="0000007C" Description="[0] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Float" Bytesize="4" OffsetHex="00000080" Description="[0] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="Float" Bytesize="4" OffsetHex="00000084" Description="[0] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Float" Bytesize="4" OffsetHex="00000088" Description="[0] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="140" Vartype="Float" Bytesize="4" OffsetHex="0000008C" Description="[0] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Float" Bytesize="4" OffsetHex="00000090" Description="[0] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="Float" Bytesize="4" OffsetHex="00000094" Description="[0] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Float" Bytesize="4" OffsetHex="00000098" Description="[0] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="156" Vartype="Float" Bytesize="4" OffsetHex="0000009C" Description="[0] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="Float" Bytesize="4" OffsetHex="000000A0" Description="[1] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Byte" Bytesize="1" OffsetHex="000000A8" Description="[1] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="172" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000AC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="Pointer" Bytesize="8" OffsetHex="000000B0" Description="[1] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="Float" Bytesize="4" OffsetHex="000000B8" Description="[1] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="188" Vartype="Float" Bytesize="4" OffsetHex="000000BC" Description="[1] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="Float" Bytesize="4" OffsetHex="000000C0" Description="[1] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="196" Vartype="Float" Bytesize="4" OffsetHex="000000C4" Description="[1] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Float" Bytesize="4" OffsetHex="000000C8" Description="[1] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="204" Vartype="Float" Bytesize="4" OffsetHex="000000CC" Description="[1] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="208" Vartype="Float" Bytesize="4" OffsetHex="000000D0" Description="[1] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="[1] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="224" Vartype="8 Bytes" Bytesize="8" OffsetHex="000000E0" Description="[1] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="232" Vartype="Byte" Bytesize="1" OffsetHex="000000E8" Description="[1] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="233" Vartype="Byte" Bytesize="1" OffsetHex="000000E9" Description="[1] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="240" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="000000F0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="Byte" Bytesize="1" OffsetHex="00000118" Description="[1] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="280" Vartype="Byte" Bytesize="1" OffsetHex="00000118" Description="[1] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="280" Vartype="Byte" Bytesize="1" OffsetHex="00000118" Description="[1] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="280" Vartype="Byte" Bytesize="1" OffsetHex="00000118" Description="[1] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="281" Vartype="Byte" Bytesize="1" OffsetHex="00000119" Description="[1] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="284" Vartype="Float" Bytesize="4" OffsetHex="0000011C" Description="[1] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="288" Vartype="Float" Bytesize="4" OffsetHex="00000120" Description="[1] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="292" Vartype="Float" Bytesize="4" OffsetHex="00000124" Description="[1] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="296" Vartype="Float" Bytesize="4" OffsetHex="00000128" Description="[1] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="300" Vartype="Float" Bytesize="4" OffsetHex="0000012C" Description="[1] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="304" Vartype="Float" Bytesize="4" OffsetHex="00000130" Description="[1] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="308" Vartype="Float" Bytesize="4" OffsetHex="00000134" Description="[1] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="312" Vartype="Float" Bytesize="4" OffsetHex="00000138" Description="[1] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="316" Vartype="Float" Bytesize="4" OffsetHex="0000013C" Description="[1] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="320" Vartype="Float" Bytesize="4" OffsetHex="00000140" Description="[2] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="324" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000144" DisplayMethod="Unsigned Integer"/>
              <Element Offset="328" Vartype="Byte" Bytesize="1" OffsetHex="00000148" Description="[2] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="332" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000014C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" Description="[2] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="344" Vartype="Float" Bytesize="4" OffsetHex="00000158" Description="[2] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="348" Vartype="Float" Bytesize="4" OffsetHex="0000015C" Description="[2] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="352" Vartype="Float" Bytesize="4" OffsetHex="00000160" Description="[2] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="356" Vartype="Float" Bytesize="4" OffsetHex="00000164" Description="[2] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="360" Vartype="Float" Bytesize="4" OffsetHex="00000168" Description="[2] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="364" Vartype="Float" Bytesize="4" OffsetHex="0000016C" Description="[2] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="Float" Bytesize="4" OffsetHex="00000170" Description="[2] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="372" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000174" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" Description="[2] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="384" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000180" Description="[2] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="Byte" Bytesize="1" OffsetHex="00000188" Description="[2] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="393" Vartype="Byte" Bytesize="1" OffsetHex="00000189" Description="[2] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="400" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000190" DisplayMethod="Unsigned Integer"/>
              <Element Offset="440" Vartype="Byte" Bytesize="1" OffsetHex="000001B8" Description="[2] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="440" Vartype="Byte" Bytesize="1" OffsetHex="000001B8" Description="[2] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="440" Vartype="Byte" Bytesize="1" OffsetHex="000001B8" Description="[2] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="440" Vartype="Byte" Bytesize="1" OffsetHex="000001B8" Description="[2] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="441" Vartype="Byte" Bytesize="1" OffsetHex="000001B9" Description="[2] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="444" Vartype="Float" Bytesize="4" OffsetHex="000001BC" Description="[2] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="448" Vartype="Float" Bytesize="4" OffsetHex="000001C0" Description="[2] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="452" Vartype="Float" Bytesize="4" OffsetHex="000001C4" Description="[2] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="456" Vartype="Float" Bytesize="4" OffsetHex="000001C8" Description="[2] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="460" Vartype="Float" Bytesize="4" OffsetHex="000001CC" Description="[2] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="464" Vartype="Float" Bytesize="4" OffsetHex="000001D0" Description="[2] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="468" Vartype="Float" Bytesize="4" OffsetHex="000001D4" Description="[2] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="472" Vartype="Float" Bytesize="4" OffsetHex="000001D8" Description="[2] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="476" Vartype="Float" Bytesize="4" OffsetHex="000001DC" Description="[2] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="480" Vartype="Float" Bytesize="4" OffsetHex="000001E0" Description="[3] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="484" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001E4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="488" Vartype="Byte" Bytesize="1" OffsetHex="000001E8" Description="[3] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="492" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001EC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="496" Vartype="Pointer" Bytesize="8" OffsetHex="000001F0" Description="[3] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="504" Vartype="Float" Bytesize="4" OffsetHex="000001F8" Description="[3] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="508" Vartype="Float" Bytesize="4" OffsetHex="000001FC" Description="[3] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="512" Vartype="Float" Bytesize="4" OffsetHex="00000200" Description="[3] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="516" Vartype="Float" Bytesize="4" OffsetHex="00000204" Description="[3] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="520" Vartype="Float" Bytesize="4" OffsetHex="00000208" Description="[3] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="524" Vartype="Float" Bytesize="4" OffsetHex="0000020C" Description="[3] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="528" Vartype="Float" Bytesize="4" OffsetHex="00000210" Description="[3] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="532" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000214" DisplayMethod="Unsigned Integer"/>
              <Element Offset="536" Vartype="Pointer" Bytesize="8" OffsetHex="00000218" Description="[3] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="544" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000220" Description="[3] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="552" Vartype="Byte" Bytesize="1" OffsetHex="00000228" Description="[3] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="553" Vartype="Byte" Bytesize="1" OffsetHex="00000229" Description="[3] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="560" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000230" DisplayMethod="Unsigned Integer"/>
              <Element Offset="600" Vartype="Byte" Bytesize="1" OffsetHex="00000258" Description="[3] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="600" Vartype="Byte" Bytesize="1" OffsetHex="00000258" Description="[3] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="600" Vartype="Byte" Bytesize="1" OffsetHex="00000258" Description="[3] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="600" Vartype="Byte" Bytesize="1" OffsetHex="00000258" Description="[3] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="601" Vartype="Byte" Bytesize="1" OffsetHex="00000259" Description="[3] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="604" Vartype="Float" Bytesize="4" OffsetHex="0000025C" Description="[3] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="608" Vartype="Float" Bytesize="4" OffsetHex="00000260" Description="[3] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="612" Vartype="Float" Bytesize="4" OffsetHex="00000264" Description="[3] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="616" Vartype="Float" Bytesize="4" OffsetHex="00000268" Description="[3] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="620" Vartype="Float" Bytesize="4" OffsetHex="0000026C" Description="[3] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="624" Vartype="Float" Bytesize="4" OffsetHex="00000270" Description="[3] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="628" Vartype="Float" Bytesize="4" OffsetHex="00000274" Description="[3] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="632" Vartype="Float" Bytesize="4" OffsetHex="00000278" Description="[3] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="636" Vartype="Float" Bytesize="4" OffsetHex="0000027C" Description="[3] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="640" Vartype="Float" Bytesize="4" OffsetHex="00000280" Description="[4] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="644" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000284" DisplayMethod="Unsigned Integer"/>
              <Element Offset="648" Vartype="Byte" Bytesize="1" OffsetHex="00000288" Description="[4] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="652" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000028C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="656" Vartype="Pointer" Bytesize="8" OffsetHex="00000290" Description="[4] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="664" Vartype="Float" Bytesize="4" OffsetHex="00000298" Description="[4] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="668" Vartype="Float" Bytesize="4" OffsetHex="0000029C" Description="[4] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="672" Vartype="Float" Bytesize="4" OffsetHex="000002A0" Description="[4] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="676" Vartype="Float" Bytesize="4" OffsetHex="000002A4" Description="[4] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="680" Vartype="Float" Bytesize="4" OffsetHex="000002A8" Description="[4] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="684" Vartype="Float" Bytesize="4" OffsetHex="000002AC" Description="[4] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="688" Vartype="Float" Bytesize="4" OffsetHex="000002B0" Description="[4] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="692" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002B4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="696" Vartype="Pointer" Bytesize="8" OffsetHex="000002B8" Description="[4] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="704" Vartype="8 Bytes" Bytesize="8" OffsetHex="000002C0" Description="[4] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="712" Vartype="Byte" Bytesize="1" OffsetHex="000002C8" Description="[4] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="713" Vartype="Byte" Bytesize="1" OffsetHex="000002C9" Description="[4] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="720" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="000002D0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="760" Vartype="Byte" Bytesize="1" OffsetHex="000002F8" Description="[4] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="760" Vartype="Byte" Bytesize="1" OffsetHex="000002F8" Description="[4] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="760" Vartype="Byte" Bytesize="1" OffsetHex="000002F8" Description="[4] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="760" Vartype="Byte" Bytesize="1" OffsetHex="000002F8" Description="[4] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="761" Vartype="Byte" Bytesize="1" OffsetHex="000002F9" Description="[4] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="764" Vartype="Float" Bytesize="4" OffsetHex="000002FC" Description="[4] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="768" Vartype="Float" Bytesize="4" OffsetHex="00000300" Description="[4] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="772" Vartype="Float" Bytesize="4" OffsetHex="00000304" Description="[4] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="776" Vartype="Float" Bytesize="4" OffsetHex="00000308" Description="[4] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="780" Vartype="Float" Bytesize="4" OffsetHex="0000030C" Description="[4] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="784" Vartype="Float" Bytesize="4" OffsetHex="00000310" Description="[4] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="788" Vartype="Float" Bytesize="4" OffsetHex="00000314" Description="[4] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="792" Vartype="Float" Bytesize="4" OffsetHex="00000318" Description="[4] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="796" Vartype="Float" Bytesize="4" OffsetHex="0000031C" Description="[4] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="800" Vartype="Float" Bytesize="4" OffsetHex="00000320" Description="[5] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="804" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000324" DisplayMethod="Unsigned Integer"/>
              <Element Offset="808" Vartype="Byte" Bytesize="1" OffsetHex="00000328" Description="[5] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="812" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000032C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="816" Vartype="Pointer" Bytesize="8" OffsetHex="00000330" Description="[5] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="824" Vartype="Float" Bytesize="4" OffsetHex="00000338" Description="[5] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="828" Vartype="Float" Bytesize="4" OffsetHex="0000033C" Description="[5] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="832" Vartype="Float" Bytesize="4" OffsetHex="00000340" Description="[5] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="836" Vartype="Float" Bytesize="4" OffsetHex="00000344" Description="[5] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="840" Vartype="Float" Bytesize="4" OffsetHex="00000348" Description="[5] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="844" Vartype="Float" Bytesize="4" OffsetHex="0000034C" Description="[5] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="848" Vartype="Float" Bytesize="4" OffsetHex="00000350" Description="[5] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="852" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000354" DisplayMethod="Unsigned Integer"/>
              <Element Offset="856" Vartype="Pointer" Bytesize="8" OffsetHex="00000358" Description="[5] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="864" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000360" Description="[5] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="872" Vartype="Byte" Bytesize="1" OffsetHex="00000368" Description="[5] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="873" Vartype="Byte" Bytesize="1" OffsetHex="00000369" Description="[5] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="880" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000370" DisplayMethod="Unsigned Integer"/>
              <Element Offset="920" Vartype="Byte" Bytesize="1" OffsetHex="00000398" Description="[5] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="920" Vartype="Byte" Bytesize="1" OffsetHex="00000398" Description="[5] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="920" Vartype="Byte" Bytesize="1" OffsetHex="00000398" Description="[5] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="920" Vartype="Byte" Bytesize="1" OffsetHex="00000398" Description="[5] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="921" Vartype="Byte" Bytesize="1" OffsetHex="00000399" Description="[5] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="924" Vartype="Float" Bytesize="4" OffsetHex="0000039C" Description="[5] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="928" Vartype="Float" Bytesize="4" OffsetHex="000003A0" Description="[5] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="932" Vartype="Float" Bytesize="4" OffsetHex="000003A4" Description="[5] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="936" Vartype="Float" Bytesize="4" OffsetHex="000003A8" Description="[5] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="940" Vartype="Float" Bytesize="4" OffsetHex="000003AC" Description="[5] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="944" Vartype="Float" Bytesize="4" OffsetHex="000003B0" Description="[5] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="948" Vartype="Float" Bytesize="4" OffsetHex="000003B4" Description="[5] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="952" Vartype="Float" Bytesize="4" OffsetHex="000003B8" Description="[5] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="956" Vartype="Float" Bytesize="4" OffsetHex="000003BC" Description="[5] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="960" Vartype="Float" Bytesize="4" OffsetHex="000003C0" Description="[6] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="964" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003C4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="968" Vartype="Byte" Bytesize="1" OffsetHex="000003C8" Description="[6] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="972" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003CC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="976" Vartype="Pointer" Bytesize="8" OffsetHex="000003D0" Description="[6] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="984" Vartype="Float" Bytesize="4" OffsetHex="000003D8" Description="[6] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="988" Vartype="Float" Bytesize="4" OffsetHex="000003DC" Description="[6] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="992" Vartype="Float" Bytesize="4" OffsetHex="000003E0" Description="[6] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="996" Vartype="Float" Bytesize="4" OffsetHex="000003E4" Description="[6] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1000" Vartype="Float" Bytesize="4" OffsetHex="000003E8" Description="[6] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1004" Vartype="Float" Bytesize="4" OffsetHex="000003EC" Description="[6] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1008" Vartype="Float" Bytesize="4" OffsetHex="000003F0" Description="[6] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1012" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003F4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1016" Vartype="Pointer" Bytesize="8" OffsetHex="000003F8" Description="[6] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1024" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000400" Description="[6] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1032" Vartype="Byte" Bytesize="1" OffsetHex="00000408" Description="[6] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1033" Vartype="Byte" Bytesize="1" OffsetHex="00000409" Description="[6] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1040" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000410" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="[6] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="[6] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="[6] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1080" Vartype="Byte" Bytesize="1" OffsetHex="00000438" Description="[6] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="1081" Vartype="Byte" Bytesize="1" OffsetHex="00000439" Description="[6] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1084" Vartype="Float" Bytesize="4" OffsetHex="0000043C" Description="[6] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1088" Vartype="Float" Bytesize="4" OffsetHex="00000440" Description="[6] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1092" Vartype="Float" Bytesize="4" OffsetHex="00000444" Description="[6] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1096" Vartype="Float" Bytesize="4" OffsetHex="00000448" Description="[6] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1100" Vartype="Float" Bytesize="4" OffsetHex="0000044C" Description="[6] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1104" Vartype="Float" Bytesize="4" OffsetHex="00000450" Description="[6] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1108" Vartype="Float" Bytesize="4" OffsetHex="00000454" Description="[6] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1112" Vartype="Float" Bytesize="4" OffsetHex="00000458" Description="[6] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1116" Vartype="Float" Bytesize="4" OffsetHex="0000045C" Description="[6] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1120" Vartype="Float" Bytesize="4" OffsetHex="00000460" Description="[7] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1124" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000464" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1128" Vartype="Byte" Bytesize="1" OffsetHex="00000468" Description="[7] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1132" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000046C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1136" Vartype="Pointer" Bytesize="8" OffsetHex="00000470" Description="[7] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1144" Vartype="Float" Bytesize="4" OffsetHex="00000478" Description="[7] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1148" Vartype="Float" Bytesize="4" OffsetHex="0000047C" Description="[7] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1152" Vartype="Float" Bytesize="4" OffsetHex="00000480" Description="[7] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1156" Vartype="Float" Bytesize="4" OffsetHex="00000484" Description="[7] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1160" Vartype="Float" Bytesize="4" OffsetHex="00000488" Description="[7] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1164" Vartype="Float" Bytesize="4" OffsetHex="0000048C" Description="[7] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1168" Vartype="Float" Bytesize="4" OffsetHex="00000490" Description="[7] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1172" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000494" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1176" Vartype="Pointer" Bytesize="8" OffsetHex="00000498" Description="[7] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1184" Vartype="8 Bytes" Bytesize="8" OffsetHex="000004A0" Description="[7] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1192" Vartype="Byte" Bytesize="1" OffsetHex="000004A8" Description="[7] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1193" Vartype="Byte" Bytesize="1" OffsetHex="000004A9" Description="[7] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1200" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="000004B0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1240" Vartype="Byte" Bytesize="1" OffsetHex="000004D8" Description="[7] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="1240" Vartype="Byte" Bytesize="1" OffsetHex="000004D8" Description="[7] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="1240" Vartype="Byte" Bytesize="1" OffsetHex="000004D8" Description="[7] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1240" Vartype="Byte" Bytesize="1" OffsetHex="000004D8" Description="[7] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="1241" Vartype="Byte" Bytesize="1" OffsetHex="000004D9" Description="[7] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1244" Vartype="Float" Bytesize="4" OffsetHex="000004DC" Description="[7] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1248" Vartype="Float" Bytesize="4" OffsetHex="000004E0" Description="[7] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1252" Vartype="Float" Bytesize="4" OffsetHex="000004E4" Description="[7] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1256" Vartype="Float" Bytesize="4" OffsetHex="000004E8" Description="[7] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1260" Vartype="Float" Bytesize="4" OffsetHex="000004EC" Description="[7] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1264" Vartype="Float" Bytesize="4" OffsetHex="000004F0" Description="[7] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1268" Vartype="Float" Bytesize="4" OffsetHex="000004F4" Description="[7] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1272" Vartype="Float" Bytesize="4" OffsetHex="000004F8" Description="[7] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1276" Vartype="Float" Bytesize="4" OffsetHex="000004FC" Description="[7] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1280" Vartype="Float" Bytesize="4" OffsetHex="00000500" Description="[8] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1284" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000504" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1288" Vartype="Byte" Bytesize="1" OffsetHex="00000508" Description="[8] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1292" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000050C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1296" Vartype="Pointer" Bytesize="8" OffsetHex="00000510" Description="[8] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1304" Vartype="Float" Bytesize="4" OffsetHex="00000518" Description="[8] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1308" Vartype="Float" Bytesize="4" OffsetHex="0000051C" Description="[8] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1312" Vartype="Float" Bytesize="4" OffsetHex="00000520" Description="[8] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1316" Vartype="Float" Bytesize="4" OffsetHex="00000524" Description="[8] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1320" Vartype="Float" Bytesize="4" OffsetHex="00000528" Description="[8] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1324" Vartype="Float" Bytesize="4" OffsetHex="0000052C" Description="[8] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1328" Vartype="Float" Bytesize="4" OffsetHex="00000530" Description="[8] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1332" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000534" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1336" Vartype="Pointer" Bytesize="8" OffsetHex="00000538" Description="[8] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1344" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000540" Description="[8] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1352" Vartype="Byte" Bytesize="1" OffsetHex="00000548" Description="[8] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1353" Vartype="Byte" Bytesize="1" OffsetHex="00000549" Description="[8] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1360" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000550" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1400" Vartype="Byte" Bytesize="1" OffsetHex="00000578" Description="[8] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="1400" Vartype="Byte" Bytesize="1" OffsetHex="00000578" Description="[8] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="1400" Vartype="Byte" Bytesize="1" OffsetHex="00000578" Description="[8] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1400" Vartype="Byte" Bytesize="1" OffsetHex="00000578" Description="[8] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="1401" Vartype="Byte" Bytesize="1" OffsetHex="00000579" Description="[8] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1404" Vartype="Float" Bytesize="4" OffsetHex="0000057C" Description="[8] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1408" Vartype="Float" Bytesize="4" OffsetHex="00000580" Description="[8] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1412" Vartype="Float" Bytesize="4" OffsetHex="00000584" Description="[8] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1416" Vartype="Float" Bytesize="4" OffsetHex="00000588" Description="[8] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1420" Vartype="Float" Bytesize="4" OffsetHex="0000058C" Description="[8] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1424" Vartype="Float" Bytesize="4" OffsetHex="00000590" Description="[8] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1428" Vartype="Float" Bytesize="4" OffsetHex="00000594" Description="[8] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1432" Vartype="Float" Bytesize="4" OffsetHex="00000598" Description="[8] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1436" Vartype="Float" Bytesize="4" OffsetHex="0000059C" Description="[8] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1440" Vartype="Float" Bytesize="4" OffsetHex="000005A0" Description="[9] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1444" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005A4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1448" Vartype="Byte" Bytesize="1" OffsetHex="000005A8" Description="[9] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1452" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005AC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1456" Vartype="Pointer" Bytesize="8" OffsetHex="000005B0" Description="[9] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1464" Vartype="Float" Bytesize="4" OffsetHex="000005B8" Description="[9] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1468" Vartype="Float" Bytesize="4" OffsetHex="000005BC" Description="[9] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1472" Vartype="Float" Bytesize="4" OffsetHex="000005C0" Description="[9] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1476" Vartype="Float" Bytesize="4" OffsetHex="000005C4" Description="[9] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1480" Vartype="Float" Bytesize="4" OffsetHex="000005C8" Description="[9] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1484" Vartype="Float" Bytesize="4" OffsetHex="000005CC" Description="[9] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1488" Vartype="Float" Bytesize="4" OffsetHex="000005D0" Description="[9] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1492" Vartype="4 Bytes" Bytesize="4" OffsetHex="000005D4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1496" Vartype="Pointer" Bytesize="8" OffsetHex="000005D8" Description="[9] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1504" Vartype="8 Bytes" Bytesize="8" OffsetHex="000005E0" Description="[9] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1512" Vartype="Byte" Bytesize="1" OffsetHex="000005E8" Description="[9] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1513" Vartype="Byte" Bytesize="1" OffsetHex="000005E9" Description="[9] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1520" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="000005F0" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1560" Vartype="Byte" Bytesize="1" OffsetHex="00000618" Description="[9] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="1560" Vartype="Byte" Bytesize="1" OffsetHex="00000618" Description="[9] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="1560" Vartype="Byte" Bytesize="1" OffsetHex="00000618" Description="[9] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1560" Vartype="Byte" Bytesize="1" OffsetHex="00000618" Description="[9] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="1561" Vartype="Byte" Bytesize="1" OffsetHex="00000619" Description="[9] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1564" Vartype="Float" Bytesize="4" OffsetHex="0000061C" Description="[9] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1568" Vartype="Float" Bytesize="4" OffsetHex="00000620" Description="[9] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1572" Vartype="Float" Bytesize="4" OffsetHex="00000624" Description="[9] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1576" Vartype="Float" Bytesize="4" OffsetHex="00000628" Description="[9] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1580" Vartype="Float" Bytesize="4" OffsetHex="0000062C" Description="[9] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1584" Vartype="Float" Bytesize="4" OffsetHex="00000630" Description="[9] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1588" Vartype="Float" Bytesize="4" OffsetHex="00000634" Description="[9] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1592" Vartype="Float" Bytesize="4" OffsetHex="00000638" Description="[9] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1596" Vartype="Float" Bytesize="4" OffsetHex="0000063C" Description="[9] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1600" Vartype="Float" Bytesize="4" OffsetHex="00000640" Description="[10] Time" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1604" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000644" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1608" Vartype="Byte" Bytesize="1" OffsetHex="00000648" Description="[10] RootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1612" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000064C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1616" Vartype="Pointer" Bytesize="8" OffsetHex="00000650" Description="[10] RootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1624" Vartype="Float" Bytesize="4" OffsetHex="00000658" Description="[10] RootMotion.Position" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1628" Vartype="Float" Bytesize="4" OffsetHex="0000065C" Description="[10] RootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1632" Vartype="Float" Bytesize="4" OffsetHex="00000660" Description="[10] RootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1636" Vartype="Float" Bytesize="4" OffsetHex="00000664" Description="[10] RootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1640" Vartype="Float" Bytesize="4" OffsetHex="00000668" Description="[10] RootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1644" Vartype="Float" Bytesize="4" OffsetHex="0000066C" Description="[10] RootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1648" Vartype="Float" Bytesize="4" OffsetHex="00000670" Description="[10] RootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1652" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000674" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1656" Vartype="Pointer" Bytesize="8" OffsetHex="00000678" Description="[10] RootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1664" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000680" Description="[10] RootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1672" Vartype="Byte" Bytesize="1" OffsetHex="00000688" Description="[10] RootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1673" Vartype="Byte" Bytesize="1" OffsetHex="00000689" Description="[10] RootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1680" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000690" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1720" Vartype="Byte" Bytesize="1" OffsetHex="000006B8" Description="[10] RootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
              <Element Offset="1720" Vartype="Byte" Bytesize="1" OffsetHex="000006B8" Description="[10] RootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
              <Element Offset="1720" Vartype="Byte" Bytesize="1" OffsetHex="000006B8" Description="[10] RootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
              <Element Offset="1720" Vartype="Byte" Bytesize="1" OffsetHex="000006B8" Description="[10] RootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
              <Element Offset="1721" Vartype="Byte" Bytesize="1" OffsetHex="000006B9" Description="[10] RootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1724" Vartype="Float" Bytesize="4" OffsetHex="000006BC" Description="[10] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1728" Vartype="Float" Bytesize="4" OffsetHex="000006C0" Description="[10] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1732" Vartype="Float" Bytesize="4" OffsetHex="000006C4" Description="[10] RootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1736" Vartype="Float" Bytesize="4" OffsetHex="000006C8" Description="[10] RootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1740" Vartype="Float" Bytesize="4" OffsetHex="000006CC" Description="[10] RootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1744" Vartype="Float" Bytesize="4" OffsetHex="000006D0" Description="[10] RootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1748" Vartype="Float" Bytesize="4" OffsetHex="000006D4" Description="[10] RootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1752" Vartype="Float" Bytesize="4" OffsetHex="000006D8" Description="[10] RootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1756" Vartype="Float" Bytesize="4" OffsetHex="000006DC" Description="[10] RootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1048" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000418" Description="RootMotionRepMoves_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1052" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000041C" Description="RootMotionRepMoves_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1056" Vartype="Byte" Bytesize="1" OffsetHex="00000420" Description="RepRootMotion.bIsActive" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1060" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000424" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1064" Vartype="Pointer" Bytesize="8" OffsetHex="00000428" Description="RepRootMotion.AnimMontage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1072" Vartype="Float" Bytesize="4" OffsetHex="00000430" Description="RepRootMotion.Position" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1076" Vartype="Float" Bytesize="4" OffsetHex="00000434" Description="RepRootMotion.Location.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1080" Vartype="Float" Bytesize="4" OffsetHex="00000438" Description="RepRootMotion.Location.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1084" Vartype="Float" Bytesize="4" OffsetHex="0000043C" Description="RepRootMotion.Location.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1088" Vartype="Float" Bytesize="4" OffsetHex="00000440" Description="RepRootMotion.Rotation.Pitch" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1092" Vartype="Float" Bytesize="4" OffsetHex="00000444" Description="RepRootMotion.Rotation.Yaw" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1096" Vartype="Float" Bytesize="4" OffsetHex="00000448" Description="RepRootMotion.Rotation.Roll" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1100" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000044C" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1104" Vartype="Pointer" Bytesize="8" OffsetHex="00000450" Description="RepRootMotion.MovementBase" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1112" Vartype="8 Bytes" Bytesize="8" OffsetHex="00000458" Description="RepRootMotion.MovementBaseBoneName" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1120" Vartype="Byte" Bytesize="1" OffsetHex="00000460" Description="RepRootMotion.bRelativePosition" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1121" Vartype="Byte" Bytesize="1" OffsetHex="00000461" Description="RepRootMotion.bRelativeRotation" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1128" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000468" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1168" Vartype="Byte" Bytesize="1" OffsetHex="00000490" Description="RepRootMotion.AuthoritativeRootMotion.bHasOverrideSources" DisplayMethod="Unsigned Integer" ChildStructStart="2"/>
        <Element Offset="1168" Vartype="Byte" Bytesize="1" OffsetHex="00000490" Description="RepRootMotion.AuthoritativeRootMotion.bIsAdditiveVelocityApplied" DisplayMethod="Unsigned Integer" ChildStructStart="8"/>
        <Element Offset="1168" Vartype="Byte" Bytesize="1" OffsetHex="00000490" Description="RepRootMotion.AuthoritativeRootMotion.bHasAdditiveSources" DisplayMethod="Unsigned Integer" ChildStructStart="1"/>
        <Element Offset="1168" Vartype="Byte" Bytesize="1" OffsetHex="00000490" Description="RepRootMotion.AuthoritativeRootMotion.bHasOverrideSourcesWithIgnoreZAccumulate" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="1169" Vartype="Byte" Bytesize="1" OffsetHex="00000491" Description="RepRootMotion.AuthoritativeRootMotion.LastAccumulatedSettings.Flags" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1172" Vartype="Float" Bytesize="4" OffsetHex="00000494" Description="RepRootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1176" Vartype="Float" Bytesize="4" OffsetHex="00000498" Description="RepRootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1180" Vartype="Float" Bytesize="4" OffsetHex="0000049C" Description="RepRootMotion.AuthoritativeRootMotion.LastPreAdditiveVelocity.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1184" Vartype="Float" Bytesize="4" OffsetHex="000004A0" Description="RepRootMotion.Acceleration.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1188" Vartype="Float" Bytesize="4" OffsetHex="000004A4" Description="RepRootMotion.Acceleration.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1192" Vartype="Float" Bytesize="4" OffsetHex="000004A8" Description="RepRootMotion.Acceleration.Z" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1196" Vartype="Float" Bytesize="4" OffsetHex="000004AC" Description="RepRootMotion.LinearVelocity.X" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1200" Vartype="Float" Bytesize="4" OffsetHex="000004B0" Description="RepRootMotion.LinearVelocity.Y" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1204" Vartype="Float" Bytesize="4" OffsetHex="000004B4" Description="RepRootMotion.LinearVelocity.Z" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="World" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="12" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="PersistentLevel" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="NetDriver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="LineBatcher" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="PersistentLineBatcher" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="ForegroundLineBatcher" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="Pointer" Bytesize="8" OffsetHex="00000058" Description="NetworkManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="PhysicsCollisionHandler" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="ExtraReferencedObjects" DisplayMethod="Unsigned Integer">
          <Structure Name="ExtraReferencedObjects[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ExtraReferencedObjects" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="ExtraReferencedObjects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="ExtraReferencedObjects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="PerModuleDataObjects" DisplayMethod="Unsigned Integer">
          <Structure Name="PerModuleDataObjects[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] PerModuleDataObjects" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" Description="PerModuleDataObjects_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="PerModuleDataObjects_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="StreamingLevels" DisplayMethod="Unsigned Integer">
          <Structure Name="StreamingLevels[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] StreamingLevels" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="StreamingLevels_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="StreamingLevels_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="StreamingLevelsToConsider.StreamingLevels" DisplayMethod="Unsigned Integer">
          <Structure Name="StreamingLevels[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] StreamingLevels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] StreamingLevels" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" Description="StreamingLevelsToConsider.StreamingLevels_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="164" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A4" Description="StreamingLevelsToConsider.StreamingLevels_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="000000A8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Pointer" Bytesize="8" OffsetHex="000000C0" Description="StreamingLevelsPrefix" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Pointer" Bytesize="8" OffsetHex="000000D0" Description="CurrentLevelPendingVisibility" DisplayMethod="Unsigned Integer"/>
        <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" Description="CurrentLevelPendingInvisibility" DisplayMethod="Unsigned Integer"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" Description="DemoNetDriver" DisplayMethod="Unsigned Integer"/>
        <Element Offset="232" Vartype="Pointer" Bytesize="8" OffsetHex="000000E8" Description="MyParticleEventManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="240" Vartype="Pointer" Bytesize="8" OffsetHex="000000F0" Description="DefaultPhysicsVolume" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="000000F8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="270" Vartype="Byte" Bytesize="1" OffsetHex="0000010E" Description="bAreConstraintsDirty" DisplayMethod="Unsigned Integer" ChildStructStart="4"/>
        <Element Offset="272" Vartype="Pointer" Bytesize="8" OffsetHex="00000110" Description="NavigationSystem" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="Pointer" Bytesize="8" OffsetHex="00000118" Description="AuthorityGameMode" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" OffsetHex="00000120" Description="GameState" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" Description="AISystem" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" Description="AvoidanceManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Pointer" Bytesize="8" OffsetHex="00000138" Description="Levels" DisplayMethod="Unsigned Integer">
          <Structure Name="Levels[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] Levels" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="320" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000140" Description="Levels_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="324" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000144" Description="Levels_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="328" Vartype="Pointer" Bytesize="8" OffsetHex="00000148" Description="LevelCollections" DisplayMethod="Unsigned Integer">
          <Structure Name="LevelCollection[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="00000000" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[0] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[0] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[0] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[0] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" Description="[0] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="44" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="0000002C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[1] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[1] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[1] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="[1] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" Description="[1] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="000000A4" DisplayMethod="Unsigned Integer"/>
              <Element Offset="248" Vartype="Pointer" Bytesize="8" OffsetHex="000000F8" Description="[2] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" Description="[2] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="264" Vartype="Pointer" Bytesize="8" OffsetHex="00000108" Description="[2] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="272" Vartype="Pointer" Bytesize="8" OffsetHex="00000110" Description="[2] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" Description="[2] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="284" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="0000011C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="368" Vartype="Pointer" Bytesize="8" OffsetHex="00000170" Description="[3] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" Description="[3] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="384" Vartype="Pointer" Bytesize="8" OffsetHex="00000180" Description="[3] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="392" Vartype="Pointer" Bytesize="8" OffsetHex="00000188" Description="[3] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="400" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000190" Description="[3] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="404" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="00000194" DisplayMethod="Unsigned Integer"/>
              <Element Offset="488" Vartype="Pointer" Bytesize="8" OffsetHex="000001E8" Description="[4] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="496" Vartype="Pointer" Bytesize="8" OffsetHex="000001F0" Description="[4] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="504" Vartype="Pointer" Bytesize="8" OffsetHex="000001F8" Description="[4] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="512" Vartype="Pointer" Bytesize="8" OffsetHex="00000200" Description="[4] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="520" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000208" Description="[4] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="524" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="0000020C" DisplayMethod="Unsigned Integer"/>
              <Element Offset="608" Vartype="Pointer" Bytesize="8" OffsetHex="00000260" Description="[5] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="616" Vartype="Pointer" Bytesize="8" OffsetHex="00000268" Description="[5] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="624" Vartype="Pointer" Bytesize="8" OffsetHex="00000270" Description="[5] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="632" Vartype="Pointer" Bytesize="8" OffsetHex="00000278" Description="[5] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="640" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000280" Description="[5] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="644" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="00000284" DisplayMethod="Unsigned Integer"/>
              <Element Offset="728" Vartype="Pointer" Bytesize="8" OffsetHex="000002D8" Description="[6] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="736" Vartype="Pointer" Bytesize="8" OffsetHex="000002E0" Description="[6] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="744" Vartype="Pointer" Bytesize="8" OffsetHex="000002E8" Description="[6] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="752" Vartype="Pointer" Bytesize="8" OffsetHex="000002F0" Description="[6] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="760" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002F8" Description="[6] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="764" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="000002FC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="848" Vartype="Pointer" Bytesize="8" OffsetHex="00000350" Description="[7] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="856" Vartype="Pointer" Bytesize="8" OffsetHex="00000358" Description="[7] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="864" Vartype="Pointer" Bytesize="8" OffsetHex="00000360" Description="[7] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="872" Vartype="Pointer" Bytesize="8" OffsetHex="00000368" Description="[7] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="880" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000370" Description="[7] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="884" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="00000374" DisplayMethod="Unsigned Integer"/>
              <Element Offset="968" Vartype="Pointer" Bytesize="8" OffsetHex="000003C8" Description="[8] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="976" Vartype="Pointer" Bytesize="8" OffsetHex="000003D0" Description="[8] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="984" Vartype="Pointer" Bytesize="8" OffsetHex="000003D8" Description="[8] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="992" Vartype="Pointer" Bytesize="8" OffsetHex="000003E0" Description="[8] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1000" Vartype="4 Bytes" Bytesize="4" OffsetHex="000003E8" Description="[8] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1004" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="000003EC" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1088" Vartype="Pointer" Bytesize="8" OffsetHex="00000440" Description="[9] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1096" Vartype="Pointer" Bytesize="8" OffsetHex="00000448" Description="[9] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1104" Vartype="Pointer" Bytesize="8" OffsetHex="00000450" Description="[9] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1112" Vartype="Pointer" Bytesize="8" OffsetHex="00000458" Description="[9] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000460" Description="[9] Levels" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1124" Vartype="4 Bytes" Bytesize="4" RLECount="21" OffsetHex="00000464" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1208" Vartype="Pointer" Bytesize="8" OffsetHex="000004B8" Description="[10] GameState" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1216" Vartype="Pointer" Bytesize="8" OffsetHex="000004C0" Description="[10] NetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1224" Vartype="Pointer" Bytesize="8" OffsetHex="000004C8" Description="[10] DemoNetDriver" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1232" Vartype="Pointer" Bytesize="8" OffsetHex="000004D0" Description="[10] PersistentLevel" DisplayMethod="Unsigned Integer"/>
              <Element Offset="1240" Vartype="4 Bytes" Bytesize="4" OffsetHex="000004D8" Description="[10] Levels" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="336" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000150" Description="LevelCollections_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="340" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000154" Description="LevelCollections_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="344" Vartype="4 Bytes" Bytesize="4" RLECount="10" OffsetHex="00000158" DisplayMethod="Unsigned Integer"/>
        <Element Offset="384" Vartype="Pointer" Bytesize="8" OffsetHex="00000180" Description="OwningGameInstance" DisplayMethod="Unsigned Integer"/>
        <Element Offset="392" Vartype="Pointer" Bytesize="8" OffsetHex="00000188" Description="ParameterCollectionInstances" DisplayMethod="Unsigned Integer">
          <Structure Name="ParameterCollectionInstances[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ParameterCollectionInstances" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="400" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000190" Description="ParameterCollectionInstances_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="404" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000194" Description="ParameterCollectionInstances_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="408" Vartype="Pointer" Bytesize="8" OffsetHex="00000198" Description="CanvasForRenderingToTarget" DisplayMethod="Unsigned Integer"/>
        <Element Offset="416" Vartype="Pointer" Bytesize="8" OffsetHex="000001A0" Description="CanvasForDrawMaterialToRenderTarget" DisplayMethod="Unsigned Integer"/>
        <Element Offset="424" Vartype="4 Bytes" Bytesize="4" RLECount="19" OffsetHex="000001A8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="504" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001F8" Description="ComponentsThatNeedPreEndOfFrameSync" DisplayMethod="Unsigned Integer"/>
        <Element Offset="508" Vartype="4 Bytes" Bytesize="4" RLECount="19" OffsetHex="000001FC" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="Pointer" Bytesize="8" OffsetHex="00000248" Description="ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer">
          <Structure Name="ComponentsThatNeedEndOfFrameUpdate[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ComponentsThatNeedEndOfFrameUpdate" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="592" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000250" Description="ComponentsThatNeedEndOfFrameUpdate_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="596" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000254" Description="ComponentsThatNeedEndOfFrameUpdate_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Pointer" Bytesize="8" OffsetHex="00000258" Description="ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer">
          <Structure Name="ComponentsThatNeedEndOfFrameUpdate_OnGameThread[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] ComponentsThatNeedEndOfFrameUpdate_OnGameThread" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="608" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000260" Description="ComponentsThatNeedEndOfFrameUpdate_OnGameThread_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="612" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000264" Description="ComponentsThatNeedEndOfFrameUpdate_OnGameThread_sizes" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="4 Bytes" Bytesize="4" RLECount="220" OffsetHex="00000268" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1496" Vartype="Pointer" Bytesize="8" OffsetHex="000005D8" Description="WorldComposition" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1504" Vartype="4 Bytes" Bytesize="4" RLECount="33" OffsetHex="000005E0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1640" Vartype="Pointer" Bytesize="8" OffsetHex="00000668" Description="PSCPool.WorldParticleSystemPools" DisplayMethod="Unsigned Integer">
          <Structure Name="WorldParticleSystemPools_Key[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[0] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="16" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000010" Description="[0] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="20" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000014" Description="[0] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[1] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000020" Description="[0] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="32" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000020" Description="[1] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000024" Description="[0] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="36" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000024" Description="[1] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[2] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[1] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[0] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="48" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000030" Description="[2] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="[0] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="[2] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="[1] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[3] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="[1] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="[3] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="[2] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="[1] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="[2] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="[3] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[4] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[4] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[2] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" Description="[3] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="[2] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="[3] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="84" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000054" Description="[4] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" OffsetHex="00000058" Description="[5] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" OffsetHex="00000058" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="88" Vartype="Pointer" Bytesize="8" OffsetHex="00000058" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000060" Description="[3] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000060" Description="[4] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="96" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000060" Description="[5] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000064" Description="[5] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000064" Description="[3] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="100" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000064" Description="[4] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="[6] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="[4] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="[6] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" Description="[5] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="[4] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="[6] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" Description="[5] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="[7] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" Description="[5] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" Description="[7] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="128" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000080" Description="[6] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="[5] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="[6] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" Description="[7] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" Description="[8] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[6] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[7] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" Description="[8] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[7] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[6] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000094" Description="[8] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="152" Vartype="Pointer" Bytesize="8" OffsetHex="00000098" Description="[9] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] WorldParticleSystemPools_Key" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" Description="[7] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" Description="[8] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" Description="[9] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A4" Description="[8] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A4" Description="[7] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="164" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A4" Description="[9] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" OffsetHex="000000A8" Description="[10] FreeElements" DisplayMethod="Unsigned Integer">
                <Structure Name="PSCPoolElem[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[1] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[2] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[3] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[4] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[5] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" Description="[6] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="104" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000068" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="112" Vartype="Pointer" Bytesize="8" OffsetHex="00000070" Description="[7] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" Description="[8] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="144" Vartype="Pointer" Bytesize="8" OffsetHex="00000090" Description="[9] PSC" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="152" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000098" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="160" Vartype="Pointer" Bytesize="8" OffsetHex="000000A0" Description="[10] PSC" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" OffsetHex="000000A8" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="168" Vartype="Pointer" Bytesize="8" OffsetHex="000000A8" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B0" Description="[8] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B0" Description="[9] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="176" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B0" Description="[10] FreeElements_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B4" Description="[8] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B4" Description="[9] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="180" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000B4" Description="[10] FreeElements_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="184" Vartype="Pointer" Bytesize="8" OffsetHex="000000B8" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="184" Vartype="Pointer" Bytesize="8" OffsetHex="000000B8" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Auto[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Auto" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="192" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C0" Description="[9] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="192" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C0" Description="[10] InUseComponents_Auto_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="196" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C4" Description="[9] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="196" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000C4" Description="[10] InUseComponents_Auto_sizes" DisplayMethod="Unsigned Integer"/>
              <Element Offset="200" Vartype="Pointer" Bytesize="8" OffsetHex="000000C8" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer">
                <Structure Name="InUseComponents_Manual[]" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="[0] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="[1] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="[2] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="[3] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" Description="[4] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" Description="[5] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="[6] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" Description="[7] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" Description="[8] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="[9] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                    <Element Offset="80" Vartype="Pointer" Bytesize="8" OffsetHex="00000050" Description="[10] InUseComponents_Manual" DisplayMethod="Unsigned Integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="208" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D0" Description="[10] InUseComponents_Manual_size" DisplayMethod="Unsigned Integer"/>
              <Element Offset="212" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D4" Description="[10] InUseComponents_Manual_sizes" DisplayMethod="Unsigned Integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="1648" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000670" Description="PSCPool.WorldParticleSystemPools_size" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1652" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000674" Description="PSCPool.WorldParticleSystemPools_sizes" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
  </Structures>
</CheatTable>
